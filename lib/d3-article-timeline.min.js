!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("d3-article-timeline",[],e):"object"==typeof exports?exports["d3-article-timeline"]=e():t["d3-article-timeline"]=e()}("undefined"!=typeof self?self:this,(function(){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var a=e[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)n.d(r,a,function(e){return t[e]}.bind(null,a));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"timelineVis",{enumerable:!0,get:function(){return a.default}});var r,a=(r=n(1))&&r.__esModule?r:{default:r}},function(t,e){var n=n||{};n.config={width:960,height:350,parseData:function(t){return t.forEach((function(t){t.authors=t.authors,t.eigenfactor=t.eigenfactor_score,t.venue=t.journal,t.year=t.year,t.url="http://labs.jstor.org"+t.stable_url})),t}},n.timelineVis=function(){function t(t,e){return"translate("+t+","+e+")"}var e=d3.textwrap().method("tspans"),r=n.config,a=r.width,i=r.height;d3.json(json_endpoint,(function(n,o){d3.select(window).on("resize",yt),(o=r.parseData(o)).forEach((function(t){t.lane=0,null===t.eigenfactor&&(t.eigenfactor=0)}));var l=getParameterByName("m");"icon"!=l&&"circle"!=l&&(l="circle");var s=d3.nest().key((function(t){return t.year})).sortValues((function(t,e){return d3.ascending(t.title,e.title)})).entries(o);s.forEach((function(t){t.firstTitle=t.values[0].id,t.sum_eigenfactor=d3.sum(t.values,(function(t){return t.eigenfactor})),t.lane=0,t.year=+t.key}));var c=d3.max(s,(function(t){return t.values.length})),d=["Climate change"],u=d.length,f=+d3.min(s,(function(t){return t.year}))-1,p=+d3.max(s,(function(t){return t.year}))+1,y=[20,15,15,150];a=a-y[1]-y[3];var m,h,x=12*u+30,g=(i=i-y[0]-y[2])-x-50,v={opacity:.2},w={opacity:1},b=d3.scale.linear().domain([f,p]).range([0,a]),k=d3.scale.linear().range([0,a]),I=d3.scale.linear().domain([0,u]).range([0,g]),A=d3.scale.linear().domain([0,u]).range([0,x]),M=d3.extent(o,(function(t){return t.eigenfactor})),z=d3.scale.linear().domain(M).range([5,10]),_=d3.scale.linear().domain(M).range([8,18]),j=d3.scale.linear().domain(d3.extent(s,(function(t){return t.sum_eigenfactor}))).range([8,18]),P=a+y[1]+y[3],O=i+y[0]+y[2],L=d3.select("#timeline").append("svg").attr("data-maximizedHeight",O).attr("data-currHeight",O).attr("viewBox","0 0 "+P+" "+O).attr("preserveAspectRatio","xMidYMid meet").attr("class","chart");L.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",a).attr("height",g);for(var T=L.append("g").attr("transform","translate(0,"+y[0]+")").attr("width",P).attr("height",g).attr("class","mainContainer"),E=T.append("g").attr("transform","translate("+y[3]+",0)").attr("width",a).attr("height",g).attr("class","main"),F=L.append("g").attr("transform","translate(0,"+(g+y[0])+")").attr("width",P).attr("height",g).attr("class","miniContainer"),V=F.append("g").attr("transform","translate("+y[3]+",0)").attr("width",a).attr("height",x).attr("class","mini"),B=E.append("g"),S=0,D=d.length;S<D;S++)B.append("line").attr("x1",y[1]).attr("y1",(function(){return A(S)})).attr("x2",a).attr("y2",(function(){return A(S)})).attr("class","laneLine").attr("stroke","lightgray");var C=T.append("g").attr("transform","translate(0,"+y[0]+")"),Y=C.append("text").text("Number of influential articles in the year").style("font-size","14px").attr("class","laneText").attr("id","mainLabel");e.bounds({height:g,width:.9*y[3]}),Y.call(e);var H=$("#mainLabel").height(),N=C.append("text").attr("transform","translate(0,"+H+")").text("Size of circles indicates level of influence").style("font-size","11px").attr("class","laneText").attr("id","mainLabelSub");e.bounds({height:g-H,width:.9*y[3]}),N.call(e);var R=V.append("g");for(S=0,D=d.length;S<D;S++)R.append("line").attr("x1",y[1]).attr("y1",(function(){return A(S)})).attr("x2",a).attr("y2",(function(){return A(S)})).attr("class","laneLine").attr("stroke","lightgray");var X=F.append("g").attr("transform","translate(0,"+y[0]+")").append("text").text("Select date range to focus on:").style("font-size","14px").attr("class","laneText");e.bounds({height:x,width:.9*y[3]}),X.call(e);var q=d3.svg.axis().orient("bottom").scale(b).tickFormat(d3.format("d"));V.append("g").attr("class","xaxis").attr("transform","translate(0,"+x+")").call(q);var G=d3.svg.axis().orient("top").scale(k).tickFormat(d3.format("d")),J=E.append("g").attr("class","xaxis").call(G),K=E.append("g").attr("class","mainClipPath").attr("clip-path","url(#clip)"),Q=V.append("g").selectAll(".miniItem").data(o).enter().append("g").attr("class","miniItem").attr("transform",(function(t){return t.x=b(t.year),t.y=x/2,t.radius=1+z(t.eigenfactor),"translate("+t.x+","+t.y+")"}));var U=Math.max(1/c,.3);Q.append("circle").attr("class","miniMark").attr("r",(function(t){return t.radius})).style("opacity",U);switch(l){case"circle":var W=(tt=K.append("g").selectAll(".yearItem").data(s).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=j(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("circle").attr("class","yearMark").on("mouseover",(function(t){vt(),gt(et.filter((function(e){return e.year===t.year})),d3.select(this))})).style(w);tt.append("text").attr("text-anchor","middle").attr("y",".3em").attr("class","numIndicator").text((function(t){return t.values.length}));var Z=(et=tt.append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("data-year",(function(t){return t.year})).attr("transform",(function(t,e){return t.x=0,t.y=0,t.idx=e,t.radius=_(t.eigenfactor),"translate("+t.x+","+t.y+")"})).attr("title",(function(t){var e=$("<span>");return e.append($('<p class="tooltip title">').text(t.title)),e.append($('<p class="tooltip authors">').text(t.authors.join(", "))),e.append($('<p class="tooltip journal">').text(t.venue)),e.append($('<p class="tooltip year">').text(t.year)),e.html()})).on("mouseover",(function(t){})).on("click",(function(t){t.url}))).append("circle").attr("r",0).attr("class","paperMark");break;case"icon":var tt,et=(tt=K.append("g").selectAll(".yearItem").data(s).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=j(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("transform",(function(t,e){return t.x=0,t.y=0,t.idx=e,t.radius=_(t.eigenfactor),"translate("+t.x+","+t.y+")"})),nt=(Z=et.append("text").attr("class","paperMark").style("font-family","FontAwesome").text("").attr("text-anchor","middle").on("mouseover",(function(t){vt(),gt(et.filter((function(e){return e.year===t.year})))}))).node().getBBox();et.insert("rect",".paperMark").attr("x",nt.x).attr("y",nt.y).attr("width",nt.width).attr("height",nt.height).style("fill","white")}et.append("text").attr("text-anchor","end").attr("class","paperLabel").style("display","none").attr("transform","translate(-15,0)").html((function(t){return'<a target="_blank" href="'+t.url+'">'+t.title+"</a>"}));var rt=d3.svg.brush().x(b).on("brush",yt);V.append("g").attr("class","x brush").call(rt).selectAll("rect").attr("y",1).attr("height",x-1);var at=[];for(S=0;S<2;S++)at.push(L.append("line").attr("class","extentLine"));function it(t,e){rt.empty()?at.forEach((function(t){t.style("display","none")})):(at.forEach((function(t){t.style("display","")})),at[0].attr("x1",y[3]).attr("y1",y[0]).attr("x2",t+y[3]).attr("y2",g+y[0]),at[1].attr("x1",a+y[3]).attr("y1",y[0]).attr("x2",e+y[3]).attr("y2",g+y[0]))}function ot(t){if(rt.empty())ft(m=(p+f)/2,h=(p+f)/2+1,0);else switch(t){case"left":ft(Math.round(m-1),Math.round(h-1),150,"linear");break;case"right":ft(Math.round(m+1),Math.round(h+1),150,"linear");break;case"zoomIn":ft(Math.round(m+1),Math.round(h-1),150,"linear");break;case"zoomOut":ft(Math.round(m-1),Math.round(h+1),150,"linear")}}var lt=K.append("g").attr("class","scrollItems").attr("transform","translate(0,"+.7*g+")");lt.append("text").attr("class","leftArrow").style("font-family","FontAwesome").text("").attr("x",0).on("click",(function(){ot("left")})),lt.append("text").attr("class","rightArrow").style("font-family","FontAwesome").text("").attr("text-anchor","end").attr("x",a).on("click",(function(){ot("right")}));var st=lt.append("g").attr("class","zoomItems").attr("transform","translate("+(a-y[1]-10)+",30)").style("opacity",.01).on("mouseover",(function(){$(".zoomItems").stop().fadeTo(400,1)})).on("mouseout",(function(){$(".zoomItems").stop().fadeTo(400,.01)}));st.append("text").attr("class","zoomIn").style("font-family","FontAwesome").text("").on("click",(function(){ot("zoomIn")})),st.append("text").attr("class","zoomOut").style("font-family","FontAwesome").text("").attr("y",20).on("click",(function(){ot("zoomOut")}));var ct=V.append("text").attr("class","clearBrushIcon").style("font-family","FontAwesome").style("font-size","1em").attr("text-anchor","end").attr("title","Clear the timeline in order to draw a new region").text("");L.on("wheel.zoom",(function(){d3.event.wheelDeltaY>0?ot("zoomIn"):d3.event.wheelDeltaY<0&&ot("zoomOut"),d3.event.wheelDeltaX>0?ot("left"):d3.event.wheelDeltaX<0&&ot("right")}));var dt=(p+f)/2,ut=[dt,dt];function ft(t,e,n,r,a){void 0===n&&(n=1e3),void 0===r&&(r="cubic-in-out"),void 0===a&&(a=0),t<f&&(t=f),e>p&&(e=p),rt.event(V.select(".brush").transition().delay(a).duration(n).ease(r).call(rt.extent([t,e])))}V.select(".brush").call(rt.extent(ut)),yt(),$(document).trigger("timelineVis:initComplete");d3.max(o,(function(t){return t.eigenfactor}));function pt(){var t=(rt.extent()[1]+rt.extent()[0])/2;ft(t,t,0)}function yt(){var e=V.select(".brush").select(".extent"),n=+e.attr("x"),r=n+ +e.attr("width");m=b.invert(n),h=b.invert(r),m<=f?d3.select(".leftArrow").style("display","none"):d3.select(".leftArrow").style("display",""),h>=p?d3.select(".rightArrow").style("display","none"):d3.select(".rightArrow").style("display",""),h-m<=2?d3.select(".zoomIn").classed("hidden",!0):d3.select(".zoomIn").classed("hidden",!1),rt.empty()?(ct.style("display","none"),d3.select(".leftArrow").style("display","none"),d3.select(".rightArrow").style("display","none")):(ct.style("display","").style("opacity",0).attr("transform",t(r-2,15)).transition().duration(300).style("opacity",.4),ct.on("click",(function(){pt(),vt()}))),rt.empty()?(mt(f,p),it()):(mt(m,h),it(n,r))}function mt(t,e){switch(l){case"circle":var n=tt.filter((function(n){return n.year<e&&n.year>t})),r=tt.filter((function(n){return n.year>=e||n.year<=t}));n.style("display",""),r.style("display","none"),k.domain([t,e]),Q.style(w),Q.filter((function(e){console.log(t);var r=!1;return n.forEach((function(t){e.id==t.firstTitle&&(r=!0)})),r})).style(w),n.attr("transform",(function(t){return t.x=k(t.year),t.y=I(t.lane)+8,"translate("+t.x+","+t.y+")"})),W.attr("r",(function(t){return t.radius}));break;case"icon":n=tt.filter((function(n){return n.year<e&&n.year>t})),r=tt.filter((function(n){return n.year>=e||n.year<=t}));n.style("display",""),r.style("display","none"),k.domain([t,e]),Q.style(v),Q.filter((function(t){var e=!1;return n.forEach((function(n){t.id==n.firstTitle&&(e=!0)})),e})).style(w),n.attr("transform",(function(t){return t.x=k(t.year),t.y=I(t.lane)+20,"translate("+t.x+","+t.y+")"})),Z.attr("transform",(function(t){return"translate("+t.idx/2+","+3*t.idx+")"})).style("fill","black").style("opacity",1).style("font-size","1.5em"),et.each((function(t){var e=d3.select(this),n=e.select(".paperMark"),r=n.node().getBBox();e.select("rect").attr("x",r.x).attr("y",r.y).attr("width",r.width).attr("height",r.height).attr("transform",n.attr("transform")).style("fill","white")}))}J.call(G),d3.selectAll(".paperItem.expanded").each((function(t){function e(t,e){return'<a target="_blank" href="'+t+'">'+e+"</a>"}var n=d3.select(this).select(".paperLabel");n.html(e(t.url,t.title));for(var r=t.title.split(" "),a=0,i=$("#timeline svg").position().left+y[3];!(++a>20)&&$(this).position().left<i;){var o=r.length,l=(r=r.slice(0,o-2)).join(" ")+"...";n.html(e(t.url,l))}}))}var ht=function(t,e){return e*e*3},xt=function(t,e){return 16.8*e+24};function gt(t,e){var n=t.attr("data-year"),r=tt.filter((function(t){return t.year==n})),a={"pointer-events":"auto",cursor:"pointer"},i=d3.svg.line().x((function(t){return t[0]})).y((function(t){return t[1]})),o=[];o.push([0,0]),t.style({"pointer-events":"none",cursor:"default"}).transition().duration(500).attr("transform",(function(t,e){return o.push([ht(0,e),xt(0,e)]),"translate("+ht(0,e)+","+xt(0,e)+")"})).each("start",(function(){d3.select(this).classed("expanded",!0)})).each("end",(function(){d3.select(this).style(a)})),t.selectAll(".paperMark").transition().duration(500).styleTween("font-size",(function(t){return d3.interpolate(this.style.getPropertyValue("font-size"),t.radius/10+"em")})).attr("r",(function(t){return t.radius})),t.selectAll(".paperLabel").style("display","").style("opacity",0).transition().delay((function(t){return 250+75*t.idx})).duration(500).style("opacity",1),d3.transition().duration(500).each("end",(function(){r.append("path").datum(o).attr("class","joinLine").attr("d",i),yt()}))}function vt(){d3.selectAll(".joinLine").remove();var t=d3.selectAll(".expanded");t.transition().duration(500).attr("transform","translate(0,0)").each("end",(function(){d3.select(this).classed("expanded",!1).style("pointer-events","")})),t.selectAll(".paperMark").transition().duration(750).styleTween("font-size",(function(t){return d3.interpolate(this.style.getPropertyValue("font-size"),"1.5em")})).attr("r",0),t.selectAll(".paperLabel").style("display","none")}d3.select(".clickForDemo").on("click",(function(){L.classed("demoInProgress",!0),pt(),vt(),d3.select("#timeline svg").style("pointer-events","none"),V.on("mousedown",(function(){L.classed("demoInProgress",!1),n.transition(0).remove()}));var e=[750,1e3,2e3,200,2e3,3e3],n=L.append("text").attr("class","cursorIcon").style("font-family","FontAwesome").style("font-size","1em").text("").attr("transform","translate("+a+","+g+")"),r=V.select(".brush").select(".extent"),i=p-f;if(i<6)var o=[f,p];else o=[f+Math.floor(.3*i),p-Math.floor(.2*i)];ft(o[0],o[0],0);var l=b(rt.extent()[1])+y[3],s=tt.filter((function(t){return t.year<o[1]&&t.year>o[0]})),c=s.size();if(0!==c){if(1===c)var d=0;else d=Math.ceil(.55*c);var u=s.filter((function(t,e){return e===d}));L.classed("demoInProgress")&&n.transition().delay(e[0]).duration(e[1]).attr("transform",t(l,g+y[0]+x/2)).each("end",(function(){L.classed("demoInProgress")?function(){ft(o[0],o[1],e[2]);r.attr("x"),r.attr("width");k.domain(rt.extent()),n.transition().duration(e[2]).attr("transform",(function(){return t(b(rt.extent()[1])+y[3],g+y[0]+x/2)})).each("end",(function(){L.classed("demoInProgress")?function(){var r=u.select(".yearMark"),a=function(t){t=t.replace("(","").replace(")","");var e=new RegExp(/translate([\d\.]+),([\d\.]+)/).exec(t);return{x:+e[1],y:+e[2]}}(u.attr("transform"));a.x=a.x+y[3],a.y=a.y+y[0]+ +r.attr("r");var i=t(a.x,a.y);n.transition("demoExpand").delay(e[3]).duration(e[4]).attr("transform",i).each("end",(function(){L.classed("demoInProgress")?(gt(et.filter((function(t){return t.year==u[0][0].__data__.year}))),m(e[5])):m(0)}))}():m(0)}))}():m(0)}))}function m(t){n.transition("demoEnd").delay(t).duration(0).remove().each("end",(function(){vt(),d3.select("#timeline svg").style("pointer-events",null)}))}})),$(document).on("timelineVis:contract",(function(){vt()})),$(document).on("timelineVis:display",(function(){yt()})),$(document).on("timelineVis:clearBrush",(function(){pt()}))}))}()}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,