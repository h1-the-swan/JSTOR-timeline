!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3"),require("jQuery")):"function"==typeof define&&define.amd?define("d3_article_timeline",["d3","jQuery"],e):"object"==typeof exports?exports.d3_article_timeline=e(require("d3"),require("jQuery")):t.d3_article_timeline=e(t.d3,t.jQuery)}("undefined"!=typeof self?self:this,(function(t,e){return function(t){var e={};function r(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,r),a.l=!0,a.exports}return r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)r.d(n,a,function(e){return t[e]}.bind(null,a));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"TimelineVis",{enumerable:!0,get:function(){return a.default}});var n,a=(n=r(1))&&n.__esModule?n:{default:n}},function(t,e,r){"use strict";function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var a,i=function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=o();if(e&&e.has(t))return e.get(t);var r={},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var l=a?Object.getOwnPropertyDescriptor(t,i):null;l&&(l.get||l.set)?Object.defineProperty(r,i,l):r[i]=t[i]}r.default=t,e&&e.set(t,r);return r}(r(2));function o(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return o=function(){return t},t}function l(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}var c=((a=r(3))&&a.__esModule?a:{default:a}).default,u=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};l(this,t);var r={el:null,data:null,width:960,color:i.scale.ordinal(i.schemeCategory10),forceStrength:-2};Object.assign(this,r,e),this._data=this.data,this.data=this.updateData,void 0===this.height&&(this.height=.625*this.width),this.init=!1,console.log(this._data),null!==this.el&&null!==this._data&&(this.draw(this.el),this.init=!0)}var e,r,n;return e=t,(r=[{key:"updateData",value:function(t){return arguments.length?(this._data=t,!1===this.init?(this.draw(this.el),this.init=!0):console.log("UPDATING DATA NOT YET IMPLEMENTED"),this):this._data}},{key:"draw",value:function(t){var e=this.width,r=this.height,n=this._data;return t.each((function(){function t(t,e){return"translate("+t+","+e+")"}var a,o=i.textwrap().method("tspans");i.select(window).on("resize",yt),(a=n).forEach((function(t){t.authors=t.authors,t.eigenfactor=t.eigenfactor_score,t.venue=t.journal,t.year=t.year,t.url="http://labs.jstor.org"+t.stable_url})),(n=a).forEach((function(t){t.lane=0,null===t.eigenfactor&&(t.eigenfactor=0)}));var l=getParameterByName("m");"icon"!=l&&"circle"!=l&&(l="circle");var s=i.nest().key((function(t){return t.year})).sortValues((function(t,e){return i.ascending(t.title,e.title)})).entries(n);s.forEach((function(t){t.firstTitle=t.values[0].id,t.sum_eigenfactor=i.sum(t.values,(function(t){return t.eigenfactor})),t.lane=0,t.year=+t.key}));var u=i.max(s,(function(t){return t.values.length})),f=["Climate change"],d=f.length,p=+i.min(s,(function(t){return t.year}))-1,y=+i.max(s,(function(t){return t.year}))+1,h=[20,15,15,150];e=e-h[1]-h[3];var m,g,x=12*d+30,v=(r=r-h[0]-h[2])-x-50,b={opacity:.2},w={opacity:1},_=i.scale.linear().domain([p,y]).range([0,e]),k=i.scale.linear().range([0,e]),M=i.scale.linear().domain([0,d]).range([0,v]),j=i.scale.linear().domain([0,d]).range([0,x]),A=i.extent(n,(function(t){return t.eigenfactor})),I=i.scale.linear().domain(A).range([5,10]),z=i.scale.linear().domain(A).range([8,18]),P=i.scale.linear().domain(i.extent(s,(function(t){return t.sum_eigenfactor}))).range([8,18]),O=e+h[1]+h[3],T=r+h[0]+h[2],E=i.select("#timeline").append("svg").attr("data-maximizedHeight",T).attr("data-currHeight",T).attr("viewBox","0 0 "+O+" "+T).attr("preserveAspectRatio","xMidYMid meet").attr("class","chart");E.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",v);for(var S=E.append("g").attr("transform","translate(0,"+h[0]+")").attr("width",O).attr("height",v).attr("class","mainContainer"),L=S.append("g").attr("transform","translate("+h[3]+",0)").attr("width",e).attr("height",v).attr("class","main"),D=E.append("g").attr("transform","translate(0,"+(v+h[0])+")").attr("width",O).attr("height",v).attr("class","miniContainer"),F=D.append("g").attr("transform","translate("+h[3]+",0)").attr("width",e).attr("height",x).attr("class","mini"),B=L.append("g"),C=0,V=f.length;C<V;C++)B.append("line").attr("x1",h[1]).attr("y1",(function(){return j(C)})).attr("x2",e).attr("y2",(function(){return j(C)})).attr("class","laneLine").attr("stroke","lightgray");var N=S.append("g").attr("transform","translate(0,"+h[0]+")"),q=N.append("text").text("Number of influential articles in the year").style("font-size","14px").attr("class","laneText").attr("id","mainLabel");o.bounds({height:v,width:.9*h[3]}),q.call(o);var Q=c("#mainLabel").height(),Y=N.append("text").attr("transform","translate(0,"+Q+")").text("Size of circles indicates level of influence").style("font-size","11px").attr("class","laneText").attr("id","mainLabelSub");o.bounds({height:v-Q,width:.9*h[3]}),Y.call(o);var H=F.append("g");for(C=0,V=f.length;C<V;C++)H.append("line").attr("x1",h[1]).attr("y1",(function(){return j(C)})).attr("x2",e).attr("y2",(function(){return j(C)})).attr("class","laneLine").attr("stroke","lightgray");var R=D.append("g").attr("transform","translate(0,"+h[0]+")").append("text").text("Select date range to focus on:").style("font-size","14px").attr("class","laneText");o.bounds({height:x,width:.9*h[3]}),R.call(o);var W=i.svg.axis().orient("bottom").scale(_).tickFormat(i.format("d"));F.append("g").attr("class","xaxis").attr("transform","translate(0,"+x+")").call(W);var X=i.svg.axis().orient("top").scale(k).tickFormat(i.format("d")),G=L.append("g").attr("class","xaxis").call(X),U=L.append("g").attr("class","mainClipPath").attr("clip-path","url(#clip)"),J=F.append("g").selectAll(".miniItem").data(n).enter().append("g").attr("class","miniItem").attr("transform",(function(t){return t.x=_(t.year),t.y=x/2,t.radius=1+I(t.eigenfactor),"translate("+t.x+","+t.y+")"})),K=Math.max(1/u,.3);switch(J.append("circle").attr("class","miniMark").attr("r",(function(t){return t.radius})).style("opacity",K),l){case"circle":var Z=(tt=U.append("g").selectAll(".yearItem").data(s).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=P(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("circle").attr("class","yearMark").on("mouseover",(function(t){vt(),xt(et.filter((function(e){return e.year===t.year})),i.select(this))})).style(w);tt.append("text").attr("text-anchor","middle").attr("y",".3em").attr("class","numIndicator").text((function(t){return t.values.length}));var $=(et=tt.append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("data-year",(function(t){return t.year})).attr("transform",(function(t,e){return t.x=0,t.y=0,t.idx=e,t.radius=z(t.eigenfactor),"translate("+t.x+","+t.y+")"})).attr("title",(function(t){var e=c("<span>");return e.append(c('<p class="tooltip title">').text(t.title)),e.append(c('<p class="tooltip authors">').text(t.authors.join(", "))),e.append(c('<p class="tooltip journal">').text(t.venue)),e.append(c('<p class="tooltip year">').text(t.year)),e.html()})).on("mouseover",(function(t){})).on("click",(function(t){t.url}))).append("circle").attr("r",0).attr("class","paperMark");break;case"icon":var tt,et=(tt=U.append("g").selectAll(".yearItem").data(s).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=P(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("transform",(function(t,e){return t.x=0,t.y=0,t.idx=e,t.radius=z(t.eigenfactor),"translate("+t.x+","+t.y+")"})),rt=($=et.append("text").attr("class","paperMark").style("font-family","FontAwesome").text("").attr("text-anchor","middle").on("mouseover",(function(t){vt(),xt(et.filter((function(e){return e.year===t.year})))}))).node().getBBox();et.insert("rect",".paperMark").attr("x",rt.x).attr("y",rt.y).attr("width",rt.width).attr("height",rt.height).style("fill","white")}et.append("text").attr("text-anchor","end").attr("class","paperLabel").style("display","none").attr("transform","translate(-15,0)").html((function(t){return'<a target="_blank" href="'+t.url+'">'+t.title+"</a>"}));var nt=i.svg.brush().x(_).on("brush",yt);F.append("g").attr("class","x brush").call(nt).selectAll("rect").attr("y",1).attr("height",x-1);var at=[];for(C=0;C<2;C++)at.push(E.append("line").attr("class","extentLine"));function it(t,r){nt.empty()?at.forEach((function(t){t.style("display","none")})):(at.forEach((function(t){t.style("display","")})),at[0].attr("x1",h[3]).attr("y1",h[0]).attr("x2",t+h[3]).attr("y2",v+h[0]),at[1].attr("x1",e+h[3]).attr("y1",h[0]).attr("x2",r+h[3]).attr("y2",v+h[0]))}function ot(t){if(nt.empty())dt(m=(y+p)/2,g=(y+p)/2+1,0);else switch(t){case"left":dt(Math.round(m-1),Math.round(g-1),150,"linear");break;case"right":dt(Math.round(m+1),Math.round(g+1),150,"linear");break;case"zoomIn":dt(Math.round(m+1),Math.round(g-1),150,"linear");break;case"zoomOut":dt(Math.round(m-1),Math.round(g+1),150,"linear")}}var lt=U.append("g").attr("class","scrollItems").attr("transform","translate(0,"+.7*v+")");lt.append("text").attr("class","leftArrow").style("font-family","FontAwesome").text("").attr("x",0).on("click",(function(){ot("left")})),lt.append("text").attr("class","rightArrow").style("font-family","FontAwesome").text("").attr("text-anchor","end").attr("x",e).on("click",(function(){ot("right")}));var st=lt.append("g").attr("class","zoomItems").attr("transform","translate("+(e-h[1]-10)+",30)").style("opacity",.01).on("mouseover",(function(){c(".zoomItems").stop().fadeTo(400,1)})).on("mouseout",(function(){c(".zoomItems").stop().fadeTo(400,.01)}));st.append("text").attr("class","zoomIn").style("font-family","FontAwesome").text("").on("click",(function(){ot("zoomIn")})),st.append("text").attr("class","zoomOut").style("font-family","FontAwesome").text("").attr("y",20).on("click",(function(){ot("zoomOut")}));var ct=F.append("text").attr("class","clearBrushIcon").style("font-family","FontAwesome").style("font-size","1em").attr("text-anchor","end").attr("title","Clear the timeline in order to draw a new region").text("");E.on("wheel.zoom",(function(){i.event.wheelDeltaY>0?ot("zoomIn"):i.event.wheelDeltaY<0&&ot("zoomOut"),i.event.wheelDeltaX>0?ot("left"):i.event.wheelDeltaX<0&&ot("right")}));var ut=(y+p)/2,ft=[ut,ut];function dt(t,e,r,n,a){void 0===r&&(r=1e3),void 0===n&&(n="cubic-in-out"),void 0===a&&(a=0),t<p&&(t=p),e>y&&(e=y),nt.event(F.select(".brush").transition().delay(a).duration(r).ease(n).call(nt.extent([t,e])))}function pt(){var t=(nt.extent()[1]+nt.extent()[0])/2;dt(t,t,0)}function yt(){var e=F.select(".brush").select(".extent"),r=+e.attr("x"),n=r+ +e.attr("width");m=_.invert(r),g=_.invert(n),m<=p?i.select(".leftArrow").style("display","none"):i.select(".leftArrow").style("display",""),g>=y?i.select(".rightArrow").style("display","none"):i.select(".rightArrow").style("display",""),g-m<=2?i.select(".zoomIn").classed("hidden",!0):i.select(".zoomIn").classed("hidden",!1),nt.empty()?(ct.style("display","none"),i.select(".leftArrow").style("display","none"),i.select(".rightArrow").style("display","none")):(ct.style("display","").style("opacity",0).attr("transform",t(n-2,15)).transition().duration(300).style("opacity",.4),ct.on("click",(function(){pt(),vt()}))),nt.empty()?(ht(p,y),it()):(ht(m,g),it(r,n))}function ht(t,e){switch(l){case"circle":var r=tt.filter((function(r){return r.year<e&&r.year>t})),n=tt.filter((function(r){return r.year>=e||r.year<=t}));r.style("display",""),n.style("display","none"),k.domain([t,e]),J.style(w),J.filter((function(e){console.log(t);var n=!1;return r.forEach((function(t){e.id==t.firstTitle&&(n=!0)})),n})).style(w),r.attr("transform",(function(t){return t.x=k(t.year),t.y=M(t.lane)+8,"translate("+t.x+","+t.y+")"})),Z.attr("r",(function(t){return t.radius}));break;case"icon":r=tt.filter((function(r){return r.year<e&&r.year>t})),n=tt.filter((function(r){return r.year>=e||r.year<=t})),r.style("display",""),n.style("display","none"),k.domain([t,e]),J.style(b),J.filter((function(t){var e=!1;return r.forEach((function(r){t.id==r.firstTitle&&(e=!0)})),e})).style(w),r.attr("transform",(function(t){return t.x=k(t.year),t.y=M(t.lane)+20,"translate("+t.x+","+t.y+")"})),$.attr("transform",(function(t){return"translate("+t.idx/2+","+3*t.idx+")"})).style("fill","black").style("opacity",1).style("font-size","1.5em"),et.each((function(t){var e=i.select(this),r=e.select(".paperMark"),n=r.node().getBBox();e.select("rect").attr("x",n.x).attr("y",n.y).attr("width",n.width).attr("height",n.height).attr("transform",r.attr("transform")).style("fill","white")}))}G.call(X),i.selectAll(".paperItem.expanded").each((function(t){function e(t,e){return'<a target="_blank" href="'+t+'">'+e+"</a>"}var r=i.select(this).select(".paperLabel");r.html(e(t.url,t.title));for(var n=t.title.split(" "),a=0,o=c("#timeline svg").position().left+h[3];!(++a>20)&&c(this).position().left<o;){var l=n.length,s=(n=n.slice(0,l-2)).join(" ")+"...";r.html(e(t.url,s))}}))}F.select(".brush").call(nt.extent(ft)),yt(),c(document).trigger("timelineVis:initComplete"),i.max(n,(function(t){return t.eigenfactor}));var mt=function(t,e){return e*e*3},gt=function(t,e){return 16.8*e+24};function xt(t,e){var r=t.attr("data-year"),n=tt.filter((function(t){return t.year==r})),a={"pointer-events":"auto",cursor:"pointer"},o=i.svg.line().x((function(t){return t[0]})).y((function(t){return t[1]})),l=[];l.push([0,0]),t.style({"pointer-events":"none",cursor:"default"}).transition().duration(500).attr("transform",(function(t,e){return l.push([mt(0,e),gt(0,e)]),"translate("+mt(0,e)+","+gt(0,e)+")"})).each("start",(function(){i.select(this).classed("expanded",!0)})).each("end",(function(){i.select(this).style(a)})),t.selectAll(".paperMark").transition().duration(500).styleTween("font-size",(function(t){return i.interpolate(this.style.getPropertyValue("font-size"),t.radius/10+"em")})).attr("r",(function(t){return t.radius})),t.selectAll(".paperLabel").style("display","").style("opacity",0).transition().delay((function(t){return 250+75*t.idx})).duration(500).style("opacity",1),i.transition().duration(500).each("end",(function(){n.append("path").datum(l).attr("class","joinLine").attr("d",o),yt()}))}function vt(){i.selectAll(".joinLine").remove();var t=i.selectAll(".expanded");t.transition().duration(500).attr("transform","translate(0,0)").each("end",(function(){i.select(this).classed("expanded",!1).style("pointer-events","")})),t.selectAll(".paperMark").transition().duration(750).styleTween("font-size",(function(t){return i.interpolate(this.style.getPropertyValue("font-size"),"1.5em")})).attr("r",0),t.selectAll(".paperLabel").style("display","none")}i.select(".clickForDemo").on("click",(function(){E.classed("demoInProgress",!0),pt(),vt(),i.select("#timeline svg").style("pointer-events","none"),F.on("mousedown",(function(){E.classed("demoInProgress",!1),n.transition(0).remove()}));var r=[750,1e3,2e3,200,2e3,3e3],n=E.append("text").attr("class","cursorIcon").style("font-family","FontAwesome").style("font-size","1em").text("").attr("transform","translate("+e+","+v+")"),a=F.select(".brush").select(".extent"),o=y-p;if(o<6)var l=[p,y];else l=[p+Math.floor(.3*o),y-Math.floor(.2*o)];dt(l[0],l[0],0);var s=_(nt.extent()[1])+h[3],c=tt.filter((function(t){return t.year<l[1]&&t.year>l[0]})),u=c.size();if(0!==u){if(1===u)var f=0;else f=Math.ceil(.55*u);var d=c.filter((function(t,e){return e===f}));E.classed("demoInProgress")&&n.transition().delay(r[0]).duration(r[1]).attr("transform",t(s,v+h[0]+x/2)).each("end",(function(){E.classed("demoInProgress")?(dt(l[0],l[1],r[2]),a.attr("x"),a.attr("width"),k.domain(nt.extent()),n.transition().duration(r[2]).attr("transform",(function(){return t(_(nt.extent()[1])+h[3],v+h[0]+x/2)})).each("end",(function(){E.classed("demoInProgress")?function(){var e=d.select(".yearMark"),a=function(t){t=t.replace("(","").replace(")","");var e=new RegExp(/translate([\d\.]+),([\d\.]+)/).exec(t);return{x:+e[1],y:+e[2]}}(d.attr("transform"));a.x=a.x+h[3],a.y=a.y+h[0]+ +e.attr("r");var i=t(a.x,a.y);n.transition("demoExpand").delay(r[3]).duration(r[4]).attr("transform",i).each("end",(function(){E.classed("demoInProgress")?(xt(et.filter((function(t){return t.year==d[0][0].__data__.year}))),m(r[5])):m(0)}))}():m(0)}))):m(0)}))}function m(t){n.transition("demoEnd").delay(t).duration(0).remove().each("end",(function(){vt(),i.select("#timeline svg").style("pointer-events",null)}))}})),c(document).on("timelineVis:contract",(function(){vt()})),c(document).on("timelineVis:display",(function(){yt()})),c(document).on("timelineVis:clearBrush",(function(){pt()}))})),this}}])&&s(e.prototype,r),n&&s(e,n),t}();e.default=u,t.exports=e.default},function(e,r){e.exports=t},function(t,r){t.exports=e}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,