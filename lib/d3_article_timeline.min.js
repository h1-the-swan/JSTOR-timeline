!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("d3"),require("jQuery")):"function"==typeof define&&define.amd?define("d3_article_timeline",["d3","jQuery"],e):"object"==typeof exports?exports.d3_article_timeline=e(require("d3"),require("jQuery")):t.d3_article_timeline=e(t.d3,t.jQuery)}("undefined"!=typeof self?self:this,(function(t,e){return function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=0)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),Object.defineProperty(e,"TimelineVis",{enumerable:!0,get:function(){return i.default}});var r,i=(r=n(1))&&r.__esModule?r:{default:r}},function(t,e,n){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(e,"__esModule",{value:!0}),e.default=void 0;var i,a=l(n(2)),o=(i=n(3))&&i.__esModule?i:{default:i},u=l(n(4));function s(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return s=function(){return t},t}function l(t){if(t&&t.__esModule)return t;if(null===t||"object"!==r(t)&&"function"!=typeof t)return{default:t};var e=s();if(e&&e.has(t))return e.get(t);var n={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var a in t)if(Object.prototype.hasOwnProperty.call(t,a)){var o=i?Object.getOwnPropertyDescriptor(t,a):null;o&&(o.get||o.set)?Object.defineProperty(n,a,o):n[a]=t[a]}return n.default=t,e&&e.set(t,n),n}function c(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function f(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var p=o.default;console.log(u);var d=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};c(this,t);var n={el:null,data:null,width:960,color:a.scaleOrdinal(a.schemeCategory10),forceStrength:-2};Object.assign(this,n,e),this._data=this.data,this.data=this.updateData,void 0===this.height&&(this.height=.625*this.width),this.init=!1,console.log(this._data),null!==this.el&&null!==this._data&&(this.draw(this.el),this.init=!0)}var e,n,r;return e=t,(n=[{key:"updateData",value:function(t){return arguments.length?(this._data=t,!1===this.init?(this.draw(this.el),this.init=!0):console.log("UPDATING DATA NOT YET IMPLEMENTED"),this):this._data}},{key:"draw",value:function(t){var e=this.width,n=this.height,r=this._data;return t.each((function(){function t(t,e){return"translate("+t+","+e+")"}var i,o=u.textwrap().method("tspans");a.select(window).on("resize",pt),(i=r).forEach((function(t){t.authors=t.authors,t.eigenfactor=t.eigenfactor_score,t.venue=t.journal,t.year=t.year,t.url="http://labs.jstor.org"+t.stable_url})),(r=i).forEach((function(t){t.lane=0,null===t.eigenfactor&&(t.eigenfactor=0)}));var s=getParameterByName("m");"icon"!=s&&"circle"!=s&&(s="circle");var l=a.nest().key((function(t){return t.year})).sortValues((function(t,e){return a.ascending(t.title,e.title)})).entries(r);l.forEach((function(t){t.firstTitle=t.values[0].id,t.sum_eigenfactor=a.sum(t.values,(function(t){return t.eigenfactor})),t.lane=0,t.year=+t.key}));var c=a.max(l,(function(t){return t.values.length})),f=["Climate change"],d=f.length,h=+a.min(l,(function(t){return t.year}))-1,y=+a.max(l,(function(t){return t.year}))+1,m=[20,15,15,150];e=e-m[1]-m[3];var g,v,x=12*d+30,_=(n=n-m[0]-m[2])-x-50,w=a.scaleLinear().domain([h,y]).range([0,e]),b=a.scaleLinear().range([0,e]),A=a.scaleLinear().domain([0,d]).range([0,_]),j=a.scaleLinear().domain([0,d]).range([0,x]),S=a.extent(r,(function(t){return t.eigenfactor})),P=a.scaleLinear().domain(S).range([5,10]),E=a.scaleLinear().domain(S).range([8,18]),T=a.scaleLinear().domain(a.extent(l,(function(t){return t.sum_eigenfactor}))).range([8,18]),M=e+m[1]+m[3],O=n+m[0]+m[2],k=a.select("#timeline").append("svg").attr("data-maximizedHeight",O).attr("data-currHeight",O).attr("viewBox","0 0 "+M+" "+O).attr("preserveAspectRatio","xMidYMid meet").attr("class","chart");k.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",e).attr("height",_);for(var I=k.append("g").attr("transform","translate(0,"+m[0]+")").attr("width",M).attr("height",_).attr("class","mainContainer"),L=I.append("g").attr("transform","translate("+m[3]+",0)").attr("width",e).attr("height",_).attr("class","main"),z=k.append("g").attr("transform","translate(0,"+(_+m[0])+")").attr("width",M).attr("height",_).attr("class","miniContainer"),N=z.append("g").attr("transform","translate("+m[3]+",0)").attr("width",e).attr("height",x).attr("class","mini"),C=L.append("g"),D=0,B=f.length;D<B;D++)C.append("line").attr("x1",m[1]).attr("y1",(function(){return j(D)})).attr("x2",e).attr("y2",(function(){return j(D)})).attr("class","laneLine").attr("stroke","lightgray");var V=I.append("g").attr("transform","translate(0,"+m[0]+")"),q=V.append("text").text("Number of influential articles in the year").style("font-size","14px").attr("class","laneText").attr("id","mainLabel");o.bounds({height:_,width:.9*m[3]}),q.call(o);var F=p("#mainLabel").height(),R=V.append("text").attr("transform","translate(0,"+F+")").text("Size of circles indicates level of influence").style("font-size","11px").attr("class","laneText").attr("id","mainLabelSub");o.bounds({height:_-F,width:.9*m[3]}),R.call(o);var G=N.append("g");for(D=0,B=f.length;D<B;D++)G.append("line").attr("x1",m[1]).attr("y1",(function(){return j(D)})).attr("x2",e).attr("y2",(function(){return j(D)})).attr("class","laneLine").attr("stroke","lightgray");var H=z.append("g").attr("transform","translate(0,"+m[0]+")").append("text").text("Select date range to focus on:").style("font-size","14px").attr("class","laneText");o.bounds({height:x,width:.9*m[3]}),H.call(o);var X=a.axisBottom().scale(w).tickFormat(a.format("d"));N.append("g").attr("class","xaxis").attr("transform","translate(0,"+x+")").call(X);var Y=a.axisTop().scale(b).tickFormat(a.format("d")),U=L.append("g").attr("class","xaxis").call(Y),Q=L.append("g").attr("class","mainClipPath").attr("clip-path","url(#clip)"),W=N.append("g").selectAll(".miniItem").data(r).enter().append("g").attr("class","miniItem").attr("transform",(function(t){return t.x=w(t.year),t.y=x/2,t.radius=1+P(t.eigenfactor),"translate("+t.x+","+t.y+")"})),$=Math.max(1/c,.3);switch(W.append("circle").attr("class","miniMark").attr("r",(function(t){return t.radius})).style("opacity",$),s){case"circle":var J=(Z=Q.append("g").selectAll(".yearItem").data(l).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=T(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("circle").attr("class","yearMark").on("mouseover",(function(t){mt(),yt(tt.filter((function(e){return e.year===t.year})),a.select(this))})).on("mouseout",mt).attr("style","opacity: 1;");Z.append("text").attr("text-anchor","middle").attr("y",".3em").attr("class","numIndicator").text((function(t){return t.values.length}));var K=(tt=Z.append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("data-year",(function(t){return t.year})).attr("transform",(function(t,e){return t.x=0,t.y=0,t.idx=e,t.radius=E(t.eigenfactor),"translate("+t.x+","+t.y+")"})).attr("title",(function(t){var e=p("<span>");return e.append(p('<p class="tooltip title">').text(t.title)),e.append(p('<p class="tooltip authors">').text(t.authors.join(", "))),e.append(p('<p class="tooltip journal">').text(t.venue)),e.append(p('<p class="tooltip year">').text(t.year)),e.html()})).on("mouseover",(function(t){})).on("click",(function(t){t.url}))).append("circle").attr("r",0).attr("class","paperMark");break;case"icon":var Z,tt=(Z=Q.append("g").selectAll(".yearItem").data(l).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=T(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("transform",(function(t,e){return t.x=0,t.y=0,t.idx=e,t.radius=E(t.eigenfactor),"translate("+t.x+","+t.y+")"})),et=(K=tt.append("text").attr("class","paperMark").style("font-family","FontAwesome").text("").attr("text-anchor","middle").on("mouseover",(function(t){mt(),yt(tt.filter((function(e){return e.year===t.year})))}))).node().getBBox();tt.insert("rect",".paperMark").attr("x",et.x).attr("y",et.y).attr("width",et.width).attr("height",et.height).style("fill","white")}var nt=a.brushX().extent([[w.range()[0],0],[w.range()[1],x-1]]).on("end",pt);N.append("g").attr("class","x brush").call(nt).selectAll("rect").attr("y",1).attr("height",x-1);var rt=[];for(D=0;D<2;D++)rt.push(k.append("line").attr("class","extentLine"));function it(t){ct(g=(y+h)/2,v=(y+h)/2+1,0)}console.log(nt);var at=Q.append("g").attr("class","scrollItems").attr("transform","translate(0,"+.7*_+")");at.append("text").attr("class","leftArrow").style("font-family","FontAwesome").text("").attr("x",0).on("click",(function(){it()})),at.append("text").attr("class","rightArrow").style("font-family","FontAwesome").text("").attr("text-anchor","end").attr("x",e).on("click",(function(){it()}));var ot=at.append("g").attr("class","zoomItems").attr("transform","translate("+(e-m[1]-10)+",30)").style("opacity",.01).on("mouseover",(function(){p(".zoomItems").stop().fadeTo(400,1)})).on("mouseout",(function(){p(".zoomItems").stop().fadeTo(400,.01)}));ot.append("text").attr("class","zoomIn").style("font-family","FontAwesome").text("").on("click",(function(){it()})),ot.append("text").attr("class","zoomOut").style("font-family","FontAwesome").text("").attr("y",20).on("click",(function(){it()}));var ut=N.append("text").attr("class","clearBrushIcon").style("font-family","FontAwesome").style("font-size","1em").attr("text-anchor","end").attr("title","Clear the timeline in order to draw a new region").text("");k.on("wheel.zoom",(function(){(a.event.wheelDeltaY>0||a.event.wheelDeltaY<0)&&it(),(a.event.wheelDeltaX>0||a.event.wheelDeltaX<0)&&it()}));var st=(y+h)/2,lt=[st,st];function ct(t,e,n,r,i){void 0===n&&(n=1e3),void 0===r&&(r="cubic-in-out"),void 0===i&&(i=0),t<h&&(t=h),e>y&&(e=y),nt.event(N.select(".brush").transition().delay(i).duration(n).ease(r).call(nt.extent([t,e])))}function ft(){var t=(nt.extent()[1]+nt.extent()[0])/2;ct(t,t,0)}function pt(){var t=N.select(".brush").select(".selection"),e=+t.attr("x"),n=e+ +t.attr("width");g=w.invert(e),v=w.invert(n),g<=h?a.select(".leftArrow").style("display","none"):a.select(".leftArrow").style("display",""),v>=y?a.select(".rightArrow").style("display","none"):a.select(".rightArrow").style("display",""),v-g<=2?a.select(".zoomIn").classed("hidden",!0):a.select(".zoomIn").classed("hidden",!1),ut.style("display","none"),a.select(".leftArrow").style("display","none"),a.select(".rightArrow").style("display","none"),function(t,e){switch(s){case"circle":var n=Z.filter((function(n){return n.year<e&&n.year>t}));console.log(n);var r=Z.filter((function(n){return n.year>=e||n.year<=t}));n.style("display",""),r.style("display","none"),b.domain([t,e]),W.attr("style","opacity: 1;"),W.filter((function(e){console.log(t);var r=!1;return n.each((function(t){e.id==t.firstTitle&&(r=!0)})),r})).attr("style","opacity: 1;"),n.attr("transform",(function(t){return t.x=b(t.year),t.y=A(t.lane)+8,"translate("+t.x+","+t.y+")"})),console.log(J),J.attr("r",(function(t){return t.radius}));break;case"icon":n=Z.filter((function(n){return n.year<e&&n.year>t})),r=Z.filter((function(n){return n.year>=e||n.year<=t})),n.style("display",""),r.style("display","none"),b.domain([t,e]),W.attr("style","opacity: .2;"),W.filter((function(t){var e=!1;return n.each((function(n){t.id==n.firstTitle&&(e=!0)})),e})).style("opacity: 1;"),n.attr("transform",(function(t){return t.x=b(t.year),t.y=A(t.lane)+20,"translate("+t.x+","+t.y+")"})),K.attr("transform",(function(t){return"translate("+t.idx/2+","+3*t.idx+")"})).style("fill","black").style("opacity",1).style("font-size","1.5em"),tt.each((function(t){var e=a.select(this),n=e.select(".paperMark"),r=n.node().getBBox();e.select("rect").attr("x",r.x).attr("y",r.y).attr("width",r.width).attr("height",r.height).attr("transform",n.attr("transform")).style("fill","white")}))}U.call(Y),a.selectAll(".paperItem.expanded").each((function(t){function e(t,e){return'<a target="_blank" href="'+t+'">'+e+"</a>"}var n=a.select(this).select(".paperLabel");n.html(e(t.url,t.title));for(var r=t.title.split(" "),i=0,o=p("#timeline svg").position().left+m[3];!(++i>20)&&p(this).position().left<o;){var u=r.length,s=(r=r.slice(0,u-2)).join(" ")+"...";n.html(e(t.url,s))}}))}(h,y),rt.forEach((function(t){t.style("display","none")}))}N.select(".brush").call(nt.extent(lt)),pt(),p(document).trigger("timelineVis:initComplete"),a.max(r,(function(t){return t.eigenfactor}));var dt=function(t,e){return e*e*3},ht=function(t,e){return 16.8*e+24};function yt(t,e){var n=t.attr("data-year"),r=Z.filter((function(t){return t.year==n})),i=a.line().x((function(t){return t[0]})).y((function(t){return t[1]})),o=[];o.push([0,0]),console.log("dddddd"),t.attr("style","pointer-events: none; cursor: default;").transition().duration(500).attr("transform",(function(t,e){return o.push([dt(0,e),ht(0,e)]),"translate("+dt(0,e)+","+ht(0,e)+")"})).on("start",(function(){a.select(this).classed("expanded",!0)})).on("end",(function(){a.select(this).attr("style","pointer-events: auto; cursor: pointer;")})),t.selectAll(".paperMark").transition().duration(500).styleTween("font-size",(function(t){return a.interpolate(this.style.getPropertyValue("font-size"),t.radius/10+"em")})).attr("r",(function(t){return t.radius})),t.selectAll(".paperLabel").style("display","").style("opacity",0).transition().delay((function(t){return 250+75*t.idx})).duration(500).style("opacity",1),a.transition().duration(500).on("end",(function(){r.append("path").datum(o).attr("class","joinLine").attr("d",i),pt()}))}function mt(){a.selectAll(".joinLine").remove();var t=a.selectAll(".expanded");t.transition().duration(500).attr("transform","translate(0,0)").on("end",(function(){a.select(this).classed("expanded",!1).style("pointer-events","")})),t.selectAll(".paperMark").transition().duration(750).styleTween("font-size",(function(t){return a.interpolate(this.style.getPropertyValue("font-size"),"1.5em")})).attr("r",0),t.selectAll(".paperLabel").style("display","none")}a.select(".clickForDemo").on("click",(function(){k.classed("demoInProgress",!0),ft(),mt(),a.select("#timeline svg").style("pointer-events","none"),N.on("mousedown",(function(){k.classed("demoInProgress",!1),r.transition(0).remove()}));var n=[750,1e3,2e3,200,2e3,3e3],r=k.append("text").attr("class","cursorIcon").style("font-family","FontAwesome").style("font-size","1em").text("").attr("transform","translate("+e+","+_+")"),i=N.select(".brush").select(".extent"),o=y-h;if(o<6)var u=[h,y];else u=[h+Math.floor(.3*o),y-Math.floor(.2*o)];ct(u[0],u[0],0);var s=w(nt.extent()[1])+m[3],l=Z.filter((function(t){return t.year<u[1]&&t.year>u[0]})),c=l.size();if(0!==c){if(1===c)var f=0;else f=Math.ceil(.55*c);var p=l.filter((function(t,e){return e===f}));k.classed("demoInProgress")&&r.transition().delay(n[0]).duration(n[1]).attr("transform",t(s,_+m[0]+x/2)).on("end",(function(){k.classed("demoInProgress")?(ct(u[0],u[1],n[2]),i.attr("x"),i.attr("width"),b.domain(nt.extent()),r.transition().duration(n[2]).attr("transform",(function(){return t(w(nt.extent()[1])+m[3],_+m[0]+x/2)})).on("end",(function(){k.classed("demoInProgress")?function(){var e=p.select(".yearMark"),i=function(t){t=t.replace("(","").replace(")","");var e=new RegExp(/translate([\d\.]+),([\d\.]+)/).exec(t);return{x:+e[1],y:+e[2]}}(p.attr("transform"));i.x=i.x+m[3],i.y=i.y+m[0]+ +e.attr("r");var a=t(i.x,i.y);r.transition("demoExpand").delay(n[3]).duration(n[4]).attr("transform",a).on("end",(function(){k.classed("demoInProgress")?(yt(tt.filter((function(t){return t.year==p[0][0].__data__.year}))),d(n[5])):d(0)}))}():d(0)}))):d(0)}))}function d(t){r.transition("demoEnd").delay(t).duration(0).remove().on("end",(function(){mt(),a.select("#timeline svg").style("pointer-events",null)}))}})),p(document).on("timelineVis:contract",(function(){mt()})),p(document).on("timelineVis:display",(function(){pt()})),p(document).on("timelineVis:clearBrush",(function(){ft()}))})),this}}])&&f(e.prototype,n),r&&f(e,r),t}();e.default=d,t.exports=e.default},function(e,n){e.exports=t},function(t,n){t.exports=e},function(t,e,n){!function(t,e){"use strict";var n,r,i,a,o,u,s;n="undefined"==typeof SVGForeignObjectElement?"tspans":"foreignobject",r=function(t){var n;return n="function"==typeof t,"object"!=typeof t||t.nodeType?!!(t instanceof e.selection||t.nodeType||n)||(console.error("invalid bounds specified for text wrapping"),!1):!(!t.height||!t.width)||(console.error("text wrapping bounds must specify height and width"),!1)},i=function(t){var e,n,r,i;for(e=["height","width"],"function"==typeof t?n=t():t.nodeType?n=t.getBoundingClientRect():"object"==typeof t&&(n=t),r=Object.create(null),i=0;i<e.length;i++)r[e[i]]=n[e[i]];return r},a=function(t){var e;if("function"==typeof t?e=t():"number"==typeof t?e=t:void 0===t&&(e=0),"number"==typeof e)return e;console.error("padding could not be converted into a number")},o=function(t,e){return{height:t.height-2*e,width:t.width-2*e}},u=function(t,e){return o(i(t),a(e))},(s={}).foreignobject=function(t,n,r){var i,a,o,u;return i=t.text(),a=e.select(t.node().parentNode),t.remove(),(o=a.append("foreignObject")).attr("requiredFeatures","http://www.w3.org/TR/SVG11/feature#Extensibility").attr("width",n.width).attr("height",n.height),"number"==typeof r&&o.attr("x",r).attr("y",r),(u=o.append("xhtml:div")).style("height",n.height).style("width",n.width).html(i),u},s.tspans=function(t,e,n){var r,i,a,o,u;for(r=t.text().split(" ").reverse(),t.text(""),(o=t.append("tspan")).attr("dx",0).attr("dy",0),a=0;r.length>0;)i=r.pop(),o.text(o.text()+" "+i),(o.node().getComputedTextLength()||0)>e.width&&(u=o.text().split(" ").slice(0,-1).join(" "),o.text(u),a=-1*o.node().getComputedTextLength(),(o=t.append("tspan")).attr("dx",a).attr("dy","1em").text(i));"number"==typeof n&&t.attr("y",t.attr("y")+n).attr("x",t.attr("x")+n)};var l=function(){var t,i,o;return(t=function(t){t.each((function(){e.select(this).call(s[n],u(i,o),a(o))}))}).bounds=function(e){return e?r(e)?(i=e,t):(console.error("invalid text wrapping bounds"),!1):i},t.padding=function(e){return e?"number"==typeof e||"function"==typeof e?(o=e,t):(console.error("text wrap padding value must be either a number or a function"),!1):o},t.method=function(e){return e?(n=e,t):n},t};t.selection=e.selection,t.select=e.select,t.textwrap=l,Object.defineProperty(t,"__esModule",{value:!0})}(e,n(5))},function(t,e,n){"use strict";n.r(e),n.d(e,"create",(function(){return yt})),n.d(e,"creator",(function(){return s})),n.d(e,"local",(function(){return gt})),n.d(e,"matcher",(function(){return d})),n.d(e,"mouse",(function(){return wt})),n.d(e,"namespace",(function(){return a})),n.d(e,"namespaces",(function(){return i})),n.d(e,"clientPoint",(function(){return _t})),n.d(e,"select",(function(){return ht})),n.d(e,"selectAll",(function(){return bt})),n.d(e,"selection",(function(){return dt})),n.d(e,"selector",(function(){return c})),n.d(e,"selectorAll",(function(){return p})),n.d(e,"style",(function(){return M})),n.d(e,"touch",(function(){return At})),n.d(e,"touches",(function(){return jt})),n.d(e,"window",(function(){return S})),n.d(e,"event",(function(){return tt})),n.d(e,"customEvent",(function(){return ot}));var r="http://www.w3.org/1999/xhtml",i={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},a=function(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),i.hasOwnProperty(e)?{space:i[e],local:t}:t};function o(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===r&&e.documentElement.namespaceURI===r?e.createElement(t):e.createElementNS(n,t)}}function u(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}var s=function(t){var e=a(t);return(e.local?u:o)(e)};function l(){}var c=function(t){return null==t?l:function(){return this.querySelector(t)}};function f(){return[]}var p=function(t){return null==t?f:function(){return this.querySelectorAll(t)}},d=function(t){return function(){return this.matches(t)}},h=function(t){return new Array(t.length)};function y(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}y.prototype={constructor:y,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};function m(t,e,n,r,i,a){for(var o,u=0,s=e.length,l=a.length;u<l;++u)(o=e[u])?(o.__data__=a[u],r[u]=o):n[u]=new y(t,a[u]);for(;u<s;++u)(o=e[u])&&(i[u]=o)}function g(t,e,n,r,i,a,o){var u,s,l,c={},f=e.length,p=a.length,d=new Array(f);for(u=0;u<f;++u)(s=e[u])&&(d[u]=l="$"+o.call(s,s.__data__,u,e),l in c?i[u]=s:c[l]=s);for(u=0;u<p;++u)(s=c[l="$"+o.call(t,a[u],u,a)])?(r[u]=s,s.__data__=a[u],c[l]=null):n[u]=new y(t,a[u]);for(u=0;u<f;++u)(s=e[u])&&c[d[u]]===s&&(i[u]=s)}function v(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}function x(t){return function(){this.removeAttribute(t)}}function _(t){return function(){this.removeAttributeNS(t.space,t.local)}}function w(t,e){return function(){this.setAttribute(t,e)}}function b(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function A(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function j(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}var S=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function P(t){return function(){this.style.removeProperty(t)}}function E(t,e,n){return function(){this.style.setProperty(t,e,n)}}function T(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function M(t,e){return t.style.getPropertyValue(e)||S(t).getComputedStyle(t,null).getPropertyValue(e)}function O(t){return function(){delete this[t]}}function k(t,e){return function(){this[t]=e}}function I(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function L(t){return t.trim().split(/^|\s+/)}function z(t){return t.classList||new N(t)}function N(t){this._node=t,this._names=L(t.getAttribute("class")||"")}function C(t,e){for(var n=z(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function D(t,e){for(var n=z(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function B(t){return function(){C(this,t)}}function V(t){return function(){D(this,t)}}function q(t,e){return function(){(e.apply(this,arguments)?C:D)(this,t)}}N.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function F(){this.textContent=""}function R(t){return function(){this.textContent=t}}function G(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function H(){this.innerHTML=""}function X(t){return function(){this.innerHTML=t}}function Y(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function U(){this.nextSibling&&this.parentNode.appendChild(this)}function Q(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function W(){return null}function $(){var t=this.parentNode;t&&t.removeChild(this)}function J(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function K(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}var Z={},tt=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(Z={mouseenter:"mouseover",mouseleave:"mouseout"}));function et(t,e,n){return t=nt(t,e,n),function(e){var n=e.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||t.call(this,e)}}function nt(t,e,n){return function(r){var i=tt;tt=r;try{t.call(this,this.__data__,e,n)}finally{tt=i}}}function rt(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}function it(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,a=e.length;r<a;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.capture);++i?e.length=i:delete this.__on}}}function at(t,e,n){var r=Z.hasOwnProperty(t.type)?et:nt;return function(i,a,o){var u,s=this.__on,l=r(e,a,o);if(s)for(var c=0,f=s.length;c<f;++c)if((u=s[c]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=l,u.capture=n),void(u.value=e);this.addEventListener(t.type,l,n),u={type:t.type,name:t.name,value:e,listener:l,capture:n},s?s.push(u):this.__on=[u]}}function ot(t,e,n,r){var i=tt;t.sourceEvent=tt,tt=t;try{return e.apply(n,r)}finally{tt=i}}function ut(t,e,n){var r=S(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function st(t,e){return function(){return ut(this,t,e)}}function lt(t,e){return function(){return ut(this,t,e.apply(this,arguments))}}var ct=[null];function ft(t,e){this._groups=t,this._parents=e}function pt(){return new ft([[document.documentElement]],ct)}ft.prototype=pt.prototype={constructor:ft,select:function(t){"function"!=typeof t&&(t=c(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o,u=e[i],s=u.length,l=r[i]=new Array(s),f=0;f<s;++f)(a=u[f])&&(o=t.call(a,a.__data__,f,u))&&("__data__"in a&&(o.__data__=a.__data__),l[f]=o);return new ft(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=p(t));for(var e=this._groups,n=e.length,r=[],i=[],a=0;a<n;++a)for(var o,u=e[a],s=u.length,l=0;l<s;++l)(o=u[l])&&(r.push(t.call(o,o.__data__,l,u)),i.push(o));return new ft(r,i)},filter:function(t){"function"!=typeof t&&(t=d(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var a,o=e[i],u=o.length,s=r[i]=[],l=0;l<u;++l)(a=o[l])&&t.call(a,a.__data__,l,o)&&s.push(a);return new ft(r,this._parents)},data:function(t,e){if(!t)return h=new Array(this.size()),c=-1,this.each((function(t){h[++c]=t})),h;var n,r=e?g:m,i=this._parents,a=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var o=a.length,u=new Array(o),s=new Array(o),l=new Array(o),c=0;c<o;++c){var f=i[c],p=a[c],d=p.length,h=t.call(f,f&&f.__data__,c,i),y=h.length,v=s[c]=new Array(y),x=u[c]=new Array(y);r(f,p,v,x,l[c]=new Array(d),h,e);for(var _,w,b=0,A=0;b<y;++b)if(_=v[b]){for(b>=A&&(A=b+1);!(w=x[A])&&++A<y;);_._next=w||null}}return(u=new ft(u,i))._enter=s,u._exit=l,u},enter:function(){return new ft(this._enter||this._groups.map(h),this._parents)},exit:function(){return new ft(this._exit||this._groups.map(h),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,a=this.exit();return r="function"==typeof t?t(r):r.append(t+""),null!=e&&(i=e(i)),null==n?a.remove():n(a),r&&i?r.merge(i).order():i},merge:function(t){for(var e=this._groups,n=t._groups,r=e.length,i=n.length,a=Math.min(r,i),o=new Array(r),u=0;u<a;++u)for(var s,l=e[u],c=n[u],f=l.length,p=o[u]=new Array(f),d=0;d<f;++d)(s=l[d]||c[d])&&(p[d]=s);for(;u<r;++u)o[u]=e[u];return new ft(o,this._parents)},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],a=i.length-1,o=i[a];--a>=0;)(r=i[a])&&(o&&4^r.compareDocumentPosition(o)&&o.parentNode.insertBefore(r,o),o=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=v);for(var n=this._groups,r=n.length,i=new Array(r),a=0;a<r;++a){for(var o,u=n[a],s=u.length,l=i[a]=new Array(s),c=0;c<s;++c)(o=u[c])&&(l[c]=o);l.sort(e)}return new ft(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),e=-1;return this.each((function(){t[++e]=this})),t},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,a=r.length;i<a;++i){var o=r[i];if(o)return o}return null},size:function(){var t=0;return this.each((function(){++t})),t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,a=e[n],o=0,u=a.length;o<u;++o)(i=a[o])&&t.call(i,i.__data__,o,a);return this},attr:function(t,e){var n=a(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?_:x:"function"==typeof e?n.local?j:A:n.local?b:w)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?P:"function"==typeof e?T:E)(t,e,null==n?"":n)):M(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?O:"function"==typeof e?I:k)(t,e)):this.node()[t]},classed:function(t,e){var n=L(t+"");if(arguments.length<2){for(var r=z(this.node()),i=-1,a=n.length;++i<a;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?q:e?B:V)(n,e))},text:function(t){return arguments.length?this.each(null==t?F:("function"==typeof t?G:R)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?H:("function"==typeof t?Y:X)(t)):this.node().innerHTML},raise:function(){return this.each(U)},lower:function(){return this.each(Q)},append:function(t){var e="function"==typeof t?t:s(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:s(t),r=null==e?W:"function"==typeof e?e:c(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each($)},clone:function(t){return this.select(t?K:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,a=rt(t+""),o=a.length;if(!(arguments.length<2)){for(u=e?at:it,null==n&&(n=!1),r=0;r<o;++r)this.each(u(a[r],e,n));return this}var u=this.node().__on;if(u)for(var s,l=0,c=u.length;l<c;++l)for(r=0,s=u[l];r<o;++r)if((i=a[r]).type===s.type&&i.name===s.name)return s.value},dispatch:function(t,e){return this.each(("function"==typeof e?lt:st)(t,e))}};var dt=pt,ht=function(t){return"string"==typeof t?new ft([[document.querySelector(t)]],[document.documentElement]):new ft([[t]],ct)},yt=function(t){return ht(s(t).call(document.documentElement))},mt=0;function gt(){return new vt}function vt(){this._="@"+(++mt).toString(36)}vt.prototype=gt.prototype={constructor:vt,get:function(t){for(var e=this._;!(e in t);)if(!(t=t.parentNode))return;return t[e]},set:function(t,e){return t[this._]=e},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var xt=function(){for(var t,e=tt;t=e.sourceEvent;)e=t;return e},_t=function(t,e){var n=t.ownerSVGElement||t;if(n.createSVGPoint){var r=n.createSVGPoint();return r.x=e.clientX,r.y=e.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[e.clientX-i.left-t.clientLeft,e.clientY-i.top-t.clientTop]},wt=function(t){var e=xt();return e.changedTouches&&(e=e.changedTouches[0]),_t(t,e)},bt=function(t){return"string"==typeof t?new ft([document.querySelectorAll(t)],[document.documentElement]):new ft([null==t?[]:t],ct)},At=function(t,e,n){arguments.length<3&&(n=e,e=xt().changedTouches);for(var r,i=0,a=e?e.length:0;i<a;++i)if((r=e[i]).identifier===n)return _t(t,r);return null},jt=function(t,e){null==e&&(e=xt().touches);for(var n=0,r=e?e.length:0,i=new Array(r);n<r;++n)i[n]=_t(t,e[n]);return i}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,