!function(t,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("jQuery")):"function"==typeof define&&define.amd?define("TimelineVis",["jQuery"],n):"object"==typeof exports?exports.TimelineVis=n(require("jQuery")):t.TimelineVis=n(t.jQuery)}("undefined"!=typeof self?self:this,(function(t){return function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}return e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=0)}([function(t,n,e){"use strict";var r;Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i=((r=e(1))&&r.__esModule?r:{default:r}).default;n.default=i,t.exports=n.default},function(t,n,e){"use strict";function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}Object.defineProperty(n,"__esModule",{value:!0}),n.default=void 0;var i,o=function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==r(t)&&"function"!=typeof t)return{default:t};var n=a();if(n&&n.has(t))return n.get(t);var e={},i=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var o in t)if(Object.prototype.hasOwnProperty.call(t,o)){var u=i?Object.getOwnPropertyDescriptor(t,o):null;u&&(u.get||u.set)?Object.defineProperty(e,o,u):e[o]=t[o]}e.default=t,n&&n.set(t,e);return e}(e(2));function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}function u(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function l(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}var c=((i=e(3))&&i.__esModule?i:{default:i}).default,s=function(){function t(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};u(this,t);var e={el:null,data:null,width:960,color:o.scale.ordinal(o.schemeCategory10),forceStrength:-2};Object.assign(this,e,n),this._data=this.data,this.data=this.updateData,void 0===this.height&&(this.height=.625*this.width),this.init=!1,console.log(this._data),null!==this.el&&null!==this._data&&(this.draw(this.el),this.init=!0)}var n,e,r;return n=t,(e=[{key:"updateData",value:function(t){return arguments.length?(this._data=t,!1===this.init?(this.draw(this.el),this.init=!0):console.log("UPDATING DATA NOT YET IMPLEMENTED"),this):this._data}},{key:"draw",value:function(t){var n=this.width,e=this.height,r=this._data;return t.each((function(){function t(t,n){return"translate("+t+","+n+")"}var i,a=o.textwrap().method("tspans");o.select(window).on("resize",ft),(i=r).forEach((function(t){t.authors=t.display_authors,void 0===t.authors&&(t.authors=null),t.node_rank=t.node_rank,t.venue=t.venue,void 0===t.venue&&(t.venue=null),t.year=t.year,t.url=t.url,t.title=t.display_title})),(r=i).forEach((function(t){t.lane=0,null===t.node_rank&&(t.node_rank=0)}));var u=getParameterByName("m");"icon"!=u&&"circle"!=u&&(u="circle");var l=o.nest().key((function(t){return t.year})).sortValues((function(t,n){return o.ascending(t.title,n.title)})).entries(r);l.forEach((function(t){t.firstTitle=t.values[0].id,t.sum_eigenfactor=o.sum(t.values,(function(t){return t.node_rank})),t.lane=0,t.year=+t.key}));var s=o.max(l,(function(t){return t.values.length})),f=["Climate change"],h=f.length,p=+o.min(l,(function(t){return t.year}))-1,g=+o.max(l,(function(t){return t.year}))+1,d=[20,15,15,150];n=n-d[1]-d[3];var v,y,m=12*h+30,x=(e=e-d[0]-d[2])-m-50,M={opacity:.2},b={opacity:1},w=o.scale.linear().domain([p,g]).range([0,n]),_=o.scale.linear().range([0,n]),k=o.scale.linear().domain([0,h]).range([0,x]),S=o.scale.linear().domain([0,h]).range([0,m]),N=o.extent(r,(function(t){return t.node_rank})),E=o.scale.linear().domain(N).range([5,10]),A=o.scale.linear().domain(N).range([8,18]),C=o.scale.linear().domain(o.extent(l,(function(t){return t.sum_eigenfactor}))).range([8,18]),z=n+d[1]+d[3],T=e+d[0]+d[2],L=o.select("#timeline").append("svg").attr("data-maximizedHeight",T).attr("data-currHeight",T).attr("viewBox","0 0 "+z+" "+T).attr("preserveAspectRatio","xMidYMid meet").attr("class","chart");L.append("defs").append("clipPath").attr("id","clip").append("rect").attr("width",n).attr("height",x);for(var q=L.append("g").attr("transform","translate(0,"+d[0]+")").attr("width",z).attr("height",x).attr("class","mainContainer"),P=q.append("g").attr("transform","translate("+d[3]+",0)").attr("width",n).attr("height",x).attr("class","main"),j=L.append("g").attr("transform","translate(0,"+(x+d[0])+")").attr("width",z).attr("height",x).attr("class","miniContainer"),D=j.append("g").attr("transform","translate("+d[3]+",0)").attr("width",n).attr("height",m).attr("class","mini"),R=P.append("g"),I=0,O=f.length;I<O;I++)R.append("line").attr("x1",d[1]).attr("y1",(function(){return S(I)})).attr("x2",n).attr("y2",(function(){return S(I)})).attr("class","laneLine").attr("stroke","lightgray");var U=q.append("g").attr("transform","translate(0,"+d[0]+")").append("text").text("Number of articles in the year").style("font-size","14px").attr("class","laneText").attr("id","mainLabel");a.bounds({height:x,width:.9*d[3]}),U.call(a);var F=D.append("g");for(I=0,O=f.length;I<O;I++)F.append("line").attr("x1",d[1]).attr("y1",(function(){return S(I)})).attr("x2",n).attr("y2",(function(){return S(I)})).attr("class","laneLine").attr("stroke","lightgray");var H=j.append("g").attr("transform","translate(0,"+d[0]+")").append("text").text("Select date range to focus on:").style("font-size","14px").attr("class","laneText");a.bounds({height:m,width:.9*d[3]}),H.call(a);var Y=o.svg.axis().orient("bottom").scale(w).tickFormat(o.format("d"));D.append("g").attr("class","xaxis").attr("transform","translate(0,"+m+")").call(Y);var V=o.svg.axis().orient("top").scale(_).tickFormat(o.format("d")),Z=P.append("g").attr("class","xaxis").call(V),B=P.append("g").attr("class","mainClipPath").attr("clip-path","url(#clip)"),X=D.append("g").selectAll(".miniItem").data(r).enter().append("g").attr("class","miniItem").attr("transform",(function(t){return t.x=w(t.year),t.y=m/2,t.radius=1+E(t.node_rank),"translate("+t.x+","+t.y+")"})),$=Math.max(1/s,.3);switch(X.append("circle").attr("class","miniMark").attr("r",(function(t){return t.radius})).style("opacity",$),u){case"circle":var W=(Q=B.append("g").selectAll(".yearItem").data(l).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=C(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("circle").attr("class","yearMark").on("mouseover",(function(t){vt(),dt(G.filter((function(n){return n.year===t.year})),o.select(this))})).style(b);Q.append("text").attr("text-anchor","middle").attr("y",".3em").attr("class","numIndicator").text((function(t){return t.values.length}));var J=(G=Q.append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("data-year",(function(t){return t.year})).attr("transform",(function(t,n){return t.x=0,t.y=0,t.idx=n,t.radius=A(t.node_rank),"translate("+t.x+","+t.y+")"})).attr("title",(function(t){var n=c("<span>");return n.append(c('<p class="tooltip title">').text(t.title)),n.append(c('<p class="tooltip authors">').text(t.authors)),t.venue&&n.append(c('<p class="tooltip journal">').text(t.venue)),n.append(c('<p class="tooltip year">').text(t.year)),n.html()})).on("mouseover",(function(t){})).on("click",(function(t){t.url}))).append("circle").attr("r",0).attr("class","paperMark");break;case"icon":var Q,G=(Q=B.append("g").selectAll(".yearItem").data(l).enter().append("g").attr("class","yearItem").attr("transform",(function(t){return t.x=0,t.y=0,t.radius=C(t.sum_eigenfactor),"translate("+t.x+","+t.y+")"}))).append("g").selectAll(".paperItem").data((function(t){return t.values})).enter().append("g").attr("class","paperItem").attr("transform",(function(t,n){return t.x=0,t.y=0,t.idx=n,t.radius=A(t.node_rank),"translate("+t.x+","+t.y+")"})),K=(J=G.append("text").attr("class","paperMark").style("font-family","FontAwesome").text("").attr("text-anchor","middle").on("mouseover",(function(t){vt(),dt(G.filter((function(n){return n.year===t.year})))}))).node().getBBox();G.insert("rect",".paperMark").attr("x",K.x).attr("y",K.y).attr("width",K.width).attr("height",K.height).style("fill","white")}G.append("text").attr("text-anchor","end").attr("class","paperLabel").style("display","none").attr("transform","translate(-15,0)").html((function(t){return'<a target="_blank" href="'+t.url+'">'+t.title+"</a>"}));var tt=o.svg.brush().x(w).on("brush",ft);D.append("g").attr("class","x brush").call(tt).selectAll("rect").attr("y",1).attr("height",m-1);var nt=[];for(I=0;I<2;I++)nt.push(L.append("line").attr("class","extentLine"));function et(t,e){tt.empty()?nt.forEach((function(t){t.style("display","none")})):(nt.forEach((function(t){t.style("display","")})),nt[0].attr("x1",d[3]).attr("y1",d[0]).attr("x2",t+d[3]).attr("y2",x+d[0]),nt[1].attr("x1",n+d[3]).attr("y1",d[0]).attr("x2",e+d[3]).attr("y2",x+d[0]))}function rt(t){if(tt.empty())ct(v=(g+p)/2,y=(g+p)/2+1,0);else switch(t){case"left":ct(Math.round(v-1),Math.round(y-1),150,"linear");break;case"right":ct(Math.round(v+1),Math.round(y+1),150,"linear");break;case"zoomIn":ct(Math.round(v+1),Math.round(y-1),150,"linear");break;case"zoomOut":ct(Math.round(v-1),Math.round(y+1),150,"linear")}}var it=B.append("g").attr("class","scrollItems").attr("transform","translate(0,"+.7*x+")");it.append("text").attr("class","leftArrow").style("font-family","FontAwesome").text("").attr("x",0).on("click",(function(){rt("left")})),it.append("text").attr("class","rightArrow").style("font-family","FontAwesome").text("").attr("text-anchor","end").attr("x",n).on("click",(function(){rt("right")}));var ot=it.append("g").attr("class","zoomItems").attr("transform","translate("+(n-d[1]-10)+",30)").style("opacity",.01).on("mouseover",(function(){c(".zoomItems").stop().fadeTo(400,1)})).on("mouseout",(function(){c(".zoomItems").stop().fadeTo(400,.01)}));ot.append("text").attr("class","zoomIn").style("font-family","FontAwesome").text("").on("click",(function(){rt("zoomIn")})),ot.append("text").attr("class","zoomOut").style("font-family","FontAwesome").text("").attr("y",20).on("click",(function(){rt("zoomOut")}));var at=D.append("text").attr("class","clearBrushIcon").style("font-family","FontAwesome").style("font-size","1em").attr("text-anchor","end").attr("title","Clear the timeline in order to draw a new region").text("");L.on("wheel.zoom",(function(){o.event.wheelDeltaY>0?rt("zoomIn"):o.event.wheelDeltaY<0&&rt("zoomOut"),o.event.wheelDeltaX>0?rt("left"):o.event.wheelDeltaX<0&&rt("right")}));var ut=(g+p)/2,lt=[ut,ut];function ct(t,n,e,r,i){void 0===e&&(e=1e3),void 0===r&&(r="cubic-in-out"),void 0===i&&(i=0),t<p&&(t=p),n>g&&(n=g),tt.event(D.select(".brush").transition().delay(i).duration(e).ease(r).call(tt.extent([t,n])))}function st(){var t=(tt.extent()[1]+tt.extent()[0])/2;ct(t,t,0)}function ft(){var n=D.select(".brush").select(".extent"),e=+n.attr("x"),r=e+ +n.attr("width");v=w.invert(e),y=w.invert(r),v<=p?o.select(".leftArrow").style("display","none"):o.select(".leftArrow").style("display",""),y>=g?o.select(".rightArrow").style("display","none"):o.select(".rightArrow").style("display",""),y-v<=2?o.select(".zoomIn").classed("hidden",!0):o.select(".zoomIn").classed("hidden",!1),tt.empty()?(at.style("display","none"),o.select(".leftArrow").style("display","none"),o.select(".rightArrow").style("display","none")):(at.style("display","").style("opacity",0).attr("transform",t(r-2,15)).transition().duration(300).style("opacity",.4),at.on("click",(function(){st(),vt()}))),tt.empty()?(ht(p,g),et()):(ht(v,y),et(e,r))}function ht(t,n){switch(u){case"circle":var e=Q.filter((function(e){return e.year<n&&e.year>t})),r=Q.filter((function(e){return e.year>=n||e.year<=t}));e.style("display",""),r.style("display","none"),_.domain([t,n]),X.style(b),X.filter((function(n){console.log(t);var r=!1;return e.forEach((function(t){n.id==t.firstTitle&&(r=!0)})),r})).style(b),e.attr("transform",(function(t){return t.x=_(t.year),t.y=k(t.lane)+8,"translate("+t.x+","+t.y+")"})),W.attr("r",(function(t){return t.radius}));break;case"icon":e=Q.filter((function(e){return e.year<n&&e.year>t})),r=Q.filter((function(e){return e.year>=n||e.year<=t})),e.style("display",""),r.style("display","none"),_.domain([t,n]),X.style(M),X.filter((function(t){var n=!1;return e.forEach((function(e){t.id==e.firstTitle&&(n=!0)})),n})).style(b),e.attr("transform",(function(t){return t.x=_(t.year),t.y=k(t.lane)+20,"translate("+t.x+","+t.y+")"})),J.attr("transform",(function(t){return"translate("+t.idx/2+","+3*t.idx+")"})).style("fill","black").style("opacity",1).style("font-size","1.5em"),G.each((function(t){var n=o.select(this),e=n.select(".paperMark"),r=e.node().getBBox();n.select("rect").attr("x",r.x).attr("y",r.y).attr("width",r.width).attr("height",r.height).attr("transform",e.attr("transform")).style("fill","white")}))}Z.call(V),o.selectAll(".paperItem.expanded").each((function(t){function n(t,n){return'<a target="_blank" href="'+t+'">'+n+"</a>"}var e=o.select(this).select(".paperLabel");e.html(n(t.url,t.title));for(var r=t.title.split(" "),i=0,a=c("#timeline svg").position().left+d[3];!(++i>20)&&c(this).position().left<a;){var u=r.length,l=(r=r.slice(0,u-2)).join(" ")+"...";e.html(n(t.url,l))}}))}D.select(".brush").call(tt.extent(lt)),ft(),c(document).trigger("timelineVis:initComplete"),o.max(r,(function(t){return t.node_rank}));var pt=function(t,n){return n*n*3},gt=function(t,n){return 16.8*n+24};function dt(t,n){var e=t.attr("data-year"),r=Q.filter((function(t){return t.year==e})),i={"pointer-events":"auto",cursor:"pointer"},a=o.svg.line().x((function(t){return t[0]})).y((function(t){return t[1]})),u=[];u.push([0,0]),t.style({"pointer-events":"none",cursor:"default"}).transition().duration(500).attr("transform",(function(t,n){return u.push([pt(0,n),gt(0,n)]),"translate("+pt(0,n)+","+gt(0,n)+")"})).each("start",(function(){o.select(this).classed("expanded",!0)})).each("end",(function(){o.select(this).style(i)})),t.selectAll(".paperMark").transition().duration(500).styleTween("font-size",(function(t){return o.interpolate(this.style.getPropertyValue("font-size"),t.radius/10+"em")})).attr("r",(function(t){return t.radius})),t.selectAll(".paperLabel").style("display","").style("opacity",0).transition().delay((function(t){return 250+75*t.idx})).duration(500).style("opacity",1),o.transition().duration(500).each("end",(function(){r.append("path").datum(u).attr("class","joinLine").attr("d",a),ft()}))}function vt(){o.selectAll(".joinLine").remove();var t=o.selectAll(".expanded");t.transition().duration(500).attr("transform","translate(0,0)").each("end",(function(){o.select(this).classed("expanded",!1).style("pointer-events","")})),t.selectAll(".paperMark").transition().duration(750).styleTween("font-size",(function(t){return o.interpolate(this.style.getPropertyValue("font-size"),"1.5em")})).attr("r",0),t.selectAll(".paperLabel").style("display","none")}o.select(".clickForDemo").on("click",(function(){L.classed("demoInProgress",!0),st(),vt(),o.select("#timeline svg").style("pointer-events","none"),D.on("mousedown",(function(){L.classed("demoInProgress",!1),r.transition(0).remove()}));var e=[750,1e3,2e3,200,2e3,3e3],r=L.append("text").attr("class","cursorIcon").style("font-family","FontAwesome").style("font-size","1em").text("").attr("transform","translate("+n+","+x+")"),i=D.select(".brush").select(".extent"),a=g-p;if(a<6)var u=[p,g];else u=[p+Math.floor(.3*a),g-Math.floor(.2*a)];ct(u[0],u[0],0);var l=w(tt.extent()[1])+d[3],c=Q.filter((function(t){return t.year<u[1]&&t.year>u[0]})),s=c.size();if(0!==s){if(1===s)var f=0;else f=Math.ceil(.55*s);var h=c.filter((function(t,n){return n===f}));L.classed("demoInProgress")&&r.transition().delay(e[0]).duration(e[1]).attr("transform",t(l,x+d[0]+m/2)).each("end",(function(){L.classed("demoInProgress")?(ct(u[0],u[1],e[2]),i.attr("x"),i.attr("width"),_.domain(tt.extent()),r.transition().duration(e[2]).attr("transform",(function(){return t(w(tt.extent()[1])+d[3],x+d[0]+m/2)})).each("end",(function(){L.classed("demoInProgress")?function(){var n=h.select(".yearMark"),i=function(t){t=t.replace("(","").replace(")","");var n=new RegExp(/translate([\d\.]+),([\d\.]+)/).exec(t);return{x:+n[1],y:+n[2]}}(h.attr("transform"));i.x=i.x+d[3],i.y=i.y+d[0]+ +n.attr("r");var o=t(i.x,i.y);r.transition("demoExpand").delay(e[3]).duration(e[4]).attr("transform",o).each("end",(function(){L.classed("demoInProgress")?(dt(G.filter((function(t){return t.year==h[0][0].__data__.year}))),v(e[5])):v(0)}))}():v(0)}))):v(0)}))}function v(t){r.transition("demoEnd").delay(t).duration(0).remove().each("end",(function(){vt(),o.select("#timeline svg").style("pointer-events",null)}))}})),c(document).on("timelineVis:contract",(function(){vt()})),c(document).on("timelineVis:display",(function(){ft()})),c(document).on("timelineVis:clearBrush",(function(){st()}))})),this}}])&&l(n.prototype,e),r&&l(n,r),t}();n.default=s,t.exports=n.default},function(t,n,e){var r,i;!function(){var o={version:"3.5.17"},a=[].slice,u=function(t){return a.call(t)},l=this.document;function c(t){return t&&(t.ownerDocument||t.document||t).documentElement}function s(t){return t&&(t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView)}if(l)try{u(l.documentElement.childNodes)[0].nodeType}catch(t){u=function(t){for(var n=t.length,e=new Array(n);n--;)e[n]=t[n];return e}}if(Date.now||(Date.now=function(){return+new Date}),l)try{l.createElement("DIV").style.setProperty("opacity",0,"")}catch(t){var f=this.Element.prototype,h=f.setAttribute,p=f.setAttributeNS,g=this.CSSStyleDeclaration.prototype,d=g.setProperty;f.setAttribute=function(t,n){h.call(this,t,n+"")},f.setAttributeNS=function(t,n,e){p.call(this,t,n,e+"")},g.setProperty=function(t,n,e){d.call(this,t,n+"",e)}}function v(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function y(t){return null===t?NaN:+t}function m(t){return!isNaN(t)}function x(t){return{left:function(n,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}}o.ascending=v,o.descending=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},o.min=function(t,n){var e,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<o;)null!=(r=t[i])&&e>r&&(e=r)}else{for(;++i<o;)if(null!=(r=n.call(t,t[i],i))&&r>=r){e=r;break}for(;++i<o;)null!=(r=n.call(t,t[i],i))&&e>r&&(e=r)}return e},o.max=function(t,n){var e,r,i=-1,o=t.length;if(1===arguments.length){for(;++i<o;)if(null!=(r=t[i])&&r>=r){e=r;break}for(;++i<o;)null!=(r=t[i])&&r>e&&(e=r)}else{for(;++i<o;)if(null!=(r=n.call(t,t[i],i))&&r>=r){e=r;break}for(;++i<o;)null!=(r=n.call(t,t[i],i))&&r>e&&(e=r)}return e},o.extent=function(t,n){var e,r,i,o=-1,a=t.length;if(1===arguments.length){for(;++o<a;)if(null!=(r=t[o])&&r>=r){e=i=r;break}for(;++o<a;)null!=(r=t[o])&&(e>r&&(e=r),i<r&&(i=r))}else{for(;++o<a;)if(null!=(r=n.call(t,t[o],o))&&r>=r){e=i=r;break}for(;++o<a;)null!=(r=n.call(t,t[o],o))&&(e>r&&(e=r),i<r&&(i=r))}return[e,i]},o.sum=function(t,n){var e,r=0,i=t.length,o=-1;if(1===arguments.length)for(;++o<i;)m(e=+t[o])&&(r+=e);else for(;++o<i;)m(e=+n.call(t,t[o],o))&&(r+=e);return r},o.mean=function(t,n){var e,r=0,i=t.length,o=-1,a=i;if(1===arguments.length)for(;++o<i;)m(e=y(t[o]))?r+=e:--a;else for(;++o<i;)m(e=y(n.call(t,t[o],o)))?r+=e:--a;if(a)return r/a},o.quantile=function(t,n){var e=(t.length-1)*n+1,r=Math.floor(e),i=+t[r-1],o=e-r;return o?i+o*(t[r]-i):i},o.median=function(t,n){var e,r=[],i=t.length,a=-1;if(1===arguments.length)for(;++a<i;)m(e=y(t[a]))&&r.push(e);else for(;++a<i;)m(e=y(n.call(t,t[a],a)))&&r.push(e);if(r.length)return o.quantile(r.sort(v),.5)},o.variance=function(t,n){var e,r,i=t.length,o=0,a=0,u=-1,l=0;if(1===arguments.length)for(;++u<i;)m(e=y(t[u]))&&(a+=(r=e-o)*(e-(o+=r/++l)));else for(;++u<i;)m(e=y(n.call(t,t[u],u)))&&(a+=(r=e-o)*(e-(o+=r/++l)));if(l>1)return a/(l-1)},o.deviation=function(){var t=o.variance.apply(this,arguments);return t?Math.sqrt(t):t};var M=x(v);function b(t){return t.length}o.bisectLeft=M.left,o.bisect=o.bisectRight=M.right,o.bisector=function(t){return x(1===t.length?function(n,e){return v(t(n),e)}:t)},o.shuffle=function(t,n,e){(o=arguments.length)<3&&(e=t.length,o<2&&(n=0));for(var r,i,o=e-n;o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},o.permute=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},o.pairs=function(t){for(var n=0,e=t.length-1,r=t[0],i=new Array(e<0?0:e);n<e;)i[n]=[r,r=t[++n]];return i},o.transpose=function(t){if(!(i=t.length))return[];for(var n=-1,e=o.min(t,b),r=new Array(e);++n<e;)for(var i,a=-1,u=r[n]=new Array(i);++a<i;)u[a]=t[a][n];return r},o.zip=function(){return o.transpose(arguments)},o.keys=function(t){var n=[];for(var e in t)n.push(e);return n},o.values=function(t){var n=[];for(var e in t)n.push(t[e]);return n},o.entries=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},o.merge=function(t){for(var n,e,r,i=t.length,o=-1,a=0;++o<i;)a+=t[o].length;for(e=new Array(a);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--a]=r[n];return e};var w=Math.abs;function _(t){for(var n=1;t*n%1;)n*=10;return n}function k(t,n){for(var e in n)Object.defineProperty(t.prototype,e,{value:n[e],enumerable:!1})}function S(){this._=Object.create(null)}o.range=function(t,n,e){if(arguments.length<3&&(e=1,arguments.length<2&&(n=t,t=0)),(n-t)/e==1/0)throw new Error("infinite range");var r,i=[],o=_(w(e)),a=-1;if(t*=o,n*=o,(e*=o)<0)for(;(r=t+e*++a)>n;)i.push(r/o);else for(;(r=t+e*++a)<n;)i.push(r/o);return i},o.map=function(t,n){var e=new S;if(t instanceof S)t.forEach((function(t,n){e.set(t,n)}));else if(Array.isArray(t)){var r,i=-1,o=t.length;if(1===arguments.length)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n.call(t,r=t[i],i),r)}else for(var a in t)e.set(a,t[a]);return e};function N(t){return"__proto__"==(t+="")||"\0"===t[0]?"\0"+t:t}function E(t){return"\0"===(t+="")[0]?t.slice(1):t}function A(t){return N(t)in this._}function C(t){return(t=N(t))in this._&&delete this._[t]}function z(){var t=[];for(var n in this._)t.push(E(n));return t}function T(){var t=0;for(var n in this._)++t;return t}function L(){for(var t in this._)return!1;return!0}function q(){this._=Object.create(null)}function P(t){return t}function j(t,n,e){return function(){var r=e.apply(n,arguments);return r===n?t:r}}function D(t,n){if(n in t)return n;n=n.charAt(0).toUpperCase()+n.slice(1);for(var e=0,r=R.length;e<r;++e){var i=R[e]+n;if(i in t)return i}}k(S,{has:A,get:function(t){return this._[N(t)]},set:function(t,n){return this._[N(t)]=n},remove:C,keys:z,values:function(){var t=[];for(var n in this._)t.push(this._[n]);return t},entries:function(){var t=[];for(var n in this._)t.push({key:E(n),value:this._[n]});return t},size:T,empty:L,forEach:function(t){for(var n in this._)t.call(this,E(n),this._[n])}}),o.nest=function(){var t,n,e={},r=[],i=[];function a(i,o,u){if(u>=r.length)return n?n.call(e,o):t?o.sort(t):o;for(var l,c,s,f,h=-1,p=o.length,g=r[u++],d=new S;++h<p;)(f=d.get(l=g(c=o[h])))?f.push(c):d.set(l,[c]);return i?(c=i(),s=function(t,n){c.set(t,a(i,n,u))}):(c={},s=function(t,n){c[t]=a(i,n,u)}),d.forEach(s),c}return e.map=function(t,n){return a(n,t,0)},e.entries=function(t){return function t(n,e){if(e>=r.length)return n;var o=[],a=i[e++];return n.forEach((function(n,r){o.push({key:n,values:t(r,e)})})),a?o.sort((function(t,n){return a(t.key,n.key)})):o}(a(o.map,t,0),0)},e.key=function(t){return r.push(t),e},e.sortKeys=function(t){return i[r.length-1]=t,e},e.sortValues=function(n){return t=n,e},e.rollup=function(t){return n=t,e},e},o.set=function(t){var n=new q;if(t)for(var e=0,r=t.length;e<r;++e)n.add(t[e]);return n},k(q,{has:A,add:function(t){return this._[N(t+="")]=!0,t},remove:C,values:z,size:T,empty:L,forEach:function(t){for(var n in this._)t.call(this,E(n))}}),o.behavior={},o.rebind=function(t,n){for(var e,r=1,i=arguments.length;++r<i;)t[e=arguments[r]]=j(t,n,n[e]);return t};var R=["webkit","ms","moz","Moz","o","O"];function I(){}function O(){}function U(t){var n=[],e=new S;function r(){for(var e,r=n,i=-1,o=r.length;++i<o;)(e=r[i].on)&&e.apply(this,arguments);return t}return r.on=function(r,i){var o,a=e.get(r);return arguments.length<2?a&&a.on:(a&&(a.on=null,n=n.slice(0,o=n.indexOf(a)).concat(n.slice(o+1)),e.remove(r)),i&&n.push(e.set(r,{on:i})),t)},r}function F(){o.event.preventDefault()}function H(){for(var t,n=o.event;t=n.sourceEvent;)n=t;return n}function Y(t){for(var n=new O,e=0,r=arguments.length;++e<r;)n[arguments[e]]=U(n);return n.of=function(e,r){return function(i){try{var a=i.sourceEvent=o.event;i.target=t,o.event=i,n[i.type].apply(e,r)}finally{o.event=a}}},n}o.dispatch=function(){for(var t=new O,n=-1,e=arguments.length;++n<e;)t[arguments[n]]=U(t);return t},O.prototype.on=function(t,n){var e=t.indexOf("."),r="";if(e>=0&&(r=t.slice(e+1),t=t.slice(0,e)),t)return arguments.length<2?this[t].on(r):this[t].on(r,n);if(2===arguments.length){if(null==n)for(t in this)this.hasOwnProperty(t)&&this[t].on(r,null);return this}},o.event=null,o.requote=function(t){return t.replace(V,"\\$&")};var V=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,Z={}.__proto__?function(t,n){t.__proto__=n}:function(t,n){for(var e in n)t[e]=n[e]};function B(t){return Z(t,J),t}var X=function(t,n){return n.querySelector(t)},$=function(t,n){return n.querySelectorAll(t)},W=function(t,n){var e=t.matches||t[D(t,"matchesSelector")];return(W=function(t,n){return e.call(t,n)})(t,n)};"function"==typeof Sizzle&&(X=function(t,n){return Sizzle(t,n)[0]||null},$=Sizzle,W=Sizzle.matchesSelector),o.selection=function(){return o.select(l.documentElement)};var J=o.selection.prototype=[];function Q(t){return"function"==typeof t?t:function(){return X(t,this)}}function G(t){return"function"==typeof t?t:function(){return $(t,this)}}J.select=function(t){var n,e,r,i,o=[];t=Q(t);for(var a=-1,u=this.length;++a<u;){o.push(n=[]),n.parentNode=(r=this[a]).parentNode;for(var l=-1,c=r.length;++l<c;)(i=r[l])?(n.push(e=t.call(i,i.__data__,l,a)),e&&"__data__"in i&&(e.__data__=i.__data__)):n.push(null)}return B(o)},J.selectAll=function(t){var n,e,r=[];t=G(t);for(var i=-1,o=this.length;++i<o;)for(var a=this[i],l=-1,c=a.length;++l<c;)(e=a[l])&&(r.push(n=u(t.call(e,e.__data__,l,i))),n.parentNode=e);return B(r)};var K="http://www.w3.org/1999/xhtml",tt={svg:"http://www.w3.org/2000/svg",xhtml:K,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function nt(t,n){return t=o.ns.qualify(t),null==n?t.local?function(){this.removeAttributeNS(t.space,t.local)}:function(){this.removeAttribute(t)}:"function"==typeof n?t.local?function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}:function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}:t.local?function(){this.setAttributeNS(t.space,t.local,n)}:function(){this.setAttribute(t,n)}}function et(t){return t.trim().replace(/\s+/g," ")}function rt(t){return new RegExp("(?:^|\\s+)"+o.requote(t)+"(?:\\s+|$)","g")}function it(t){return(t+"").trim().split(/^|\s+/)}function ot(t,n){var e=(t=it(t).map(at)).length;return"function"==typeof n?function(){for(var r=-1,i=n.apply(this,arguments);++r<e;)t[r](this,i)}:function(){for(var r=-1;++r<e;)t[r](this,n)}}function at(t){var n=rt(t);return function(e,r){if(i=e.classList)return r?i.add(t):i.remove(t);var i=e.getAttribute("class")||"";r?(n.lastIndex=0,n.test(i)||e.setAttribute("class",et(i+" "+t))):e.setAttribute("class",et(i.replace(n," ")))}}function ut(t,n,e){return null==n?function(){this.style.removeProperty(t)}:"function"==typeof n?function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}:function(){this.style.setProperty(t,n,e)}}function lt(t,n){return null==n?function(){delete this[t]}:"function"==typeof n?function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}:function(){this[t]=n}}function ct(t){return"function"==typeof t?t:(t=o.ns.qualify(t)).local?function(){return this.ownerDocument.createElementNS(t.space,t.local)}:function(){var n=this.ownerDocument,e=this.namespaceURI;return e===K&&n.documentElement.namespaceURI===K?n.createElement(t):n.createElementNS(e,t)}}function st(){var t=this.parentNode;t&&t.removeChild(this)}function ft(t){return{__data__:t}}function ht(t){return function(){return W(this,t)}}function pt(t){return arguments.length||(t=v),function(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}}function gt(t,n){for(var e=0,r=t.length;e<r;e++)for(var i,o=t[e],a=0,u=o.length;a<u;a++)(i=o[a])&&n(i,a,e);return t}function dt(t){return Z(t,vt),t}o.ns={prefix:tt,qualify:function(t){var n=t.indexOf(":"),e=t;return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),tt.hasOwnProperty(e)?{space:tt[e],local:t}:t}},J.attr=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node();return(t=o.ns.qualify(t)).local?e.getAttributeNS(t.space,t.local):e.getAttribute(t)}for(n in t)this.each(nt(n,t[n]));return this}return this.each(nt(t,n))},J.classed=function(t,n){if(arguments.length<2){if("string"==typeof t){var e=this.node(),r=(t=it(t)).length,i=-1;if(n=e.classList){for(;++i<r;)if(!n.contains(t[i]))return!1}else for(n=e.getAttribute("class");++i<r;)if(!rt(t[i]).test(n))return!1;return!0}for(n in t)this.each(ot(n,t[n]));return this}return this.each(ot(t,n))},J.style=function(t,n,e){var r=arguments.length;if(r<3){if("string"!=typeof t){for(e in r<2&&(n=""),t)this.each(ut(e,t[e],n));return this}if(r<2){var i=this.node();return s(i).getComputedStyle(i,null).getPropertyValue(t)}e=""}return this.each(ut(t,n,e))},J.property=function(t,n){if(arguments.length<2){if("string"==typeof t)return this.node()[t];for(n in t)this.each(lt(n,t[n]));return this}return this.each(lt(t,n))},J.text=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}:null==t?function(){this.textContent=""}:function(){this.textContent=t}):this.node().textContent},J.html=function(t){return arguments.length?this.each("function"==typeof t?function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}:null==t?function(){this.innerHTML=""}:function(){this.innerHTML=t}):this.node().innerHTML},J.append=function(t){return t=ct(t),this.select((function(){return this.appendChild(t.apply(this,arguments))}))},J.insert=function(t,n){return t=ct(t),n=Q(n),this.select((function(){return this.insertBefore(t.apply(this,arguments),n.apply(this,arguments)||null)}))},J.remove=function(){return this.each(st)},J.data=function(t,n){var e,r,i=-1,o=this.length;if(!arguments.length){for(t=new Array(o=(e=this[0]).length);++i<o;)(r=e[i])&&(t[i]=r.__data__);return t}function a(t,e){var r,i,o,a=t.length,s=e.length,f=Math.min(a,s),h=new Array(s),p=new Array(s),g=new Array(a);if(n){var d,v=new S,y=new Array(a);for(r=-1;++r<a;)(i=t[r])&&(v.has(d=n.call(i,i.__data__,r))?g[r]=i:v.set(d,i),y[r]=d);for(r=-1;++r<s;)(i=v.get(d=n.call(e,o=e[r],r)))?!0!==i&&(h[r]=i,i.__data__=o):p[r]=ft(o),v.set(d,!0);for(r=-1;++r<a;)r in y&&!0!==v.get(y[r])&&(g[r]=t[r])}else{for(r=-1;++r<f;)i=t[r],o=e[r],i?(i.__data__=o,h[r]=i):p[r]=ft(o);for(;r<s;++r)p[r]=ft(e[r]);for(;r<a;++r)g[r]=t[r]}p.update=h,p.parentNode=h.parentNode=g.parentNode=t.parentNode,u.push(p),l.push(h),c.push(g)}var u=dt([]),l=B([]),c=B([]);if("function"==typeof t)for(;++i<o;)a(e=this[i],t.call(e,e.parentNode.__data__,i));else for(;++i<o;)a(e=this[i],t);return l.enter=function(){return u},l.exit=function(){return c},l},J.datum=function(t){return arguments.length?this.property("__data__",t):this.property("__data__")},J.filter=function(t){var n,e,r,i=[];"function"!=typeof t&&(t=ht(t));for(var o=0,a=this.length;o<a;o++){i.push(n=[]),n.parentNode=(e=this[o]).parentNode;for(var u=0,l=e.length;u<l;u++)(r=e[u])&&t.call(r,r.__data__,u,o)&&n.push(r)}return B(i)},J.order=function(){for(var t=-1,n=this.length;++t<n;)for(var e,r=this[t],i=r.length-1,o=r[i];--i>=0;)(e=r[i])&&(o&&o!==e.nextSibling&&o.parentNode.insertBefore(e,o),o=e);return this},J.sort=function(t){t=pt.apply(this,arguments);for(var n=-1,e=this.length;++n<e;)this[n].sort(t);return this.order()},J.each=function(t){return gt(this,(function(n,e,r){t.call(n,n.__data__,e,r)}))},J.call=function(t){var n=u(arguments);return t.apply(n[0]=this,n),this},J.empty=function(){return!this.node()},J.node=function(){for(var t=0,n=this.length;t<n;t++)for(var e=this[t],r=0,i=e.length;r<i;r++){var o=e[r];if(o)return o}return null},J.size=function(){var t=0;return gt(this,(function(){++t})),t};var vt=[];function yt(t){var n,e;return function(r,i,o){var a,u=t[o].update,l=u.length;for(o!=e&&(e=o,n=0),i>=n&&(n=i+1);!(a=u[n])&&++n<l;);return a}}function mt(t,n,e){var r="__on"+t,i=t.indexOf("."),a=Mt;i>0&&(t=t.slice(0,i));var l=xt.get(t);function c(){var n=this[r];n&&(this.removeEventListener(t,n,n.$),delete this[r])}return l&&(t=l,a=bt),i?n?function(){var i=a(n,u(arguments));c.call(this),this.addEventListener(t,this[r]=i,i.$=e),i._=n}:c:n?I:function(){var n,e=new RegExp("^__on([^.]+)"+o.requote(t)+"$");for(var r in this)if(n=r.match(e)){var i=this[r];this.removeEventListener(n[1],i,i.$),delete this[r]}}}o.selection.enter=dt,o.selection.enter.prototype=vt,vt.append=J.append,vt.empty=J.empty,vt.node=J.node,vt.call=J.call,vt.size=J.size,vt.select=function(t){for(var n,e,r,i,o,a=[],u=-1,l=this.length;++u<l;){r=(i=this[u]).update,a.push(n=[]),n.parentNode=i.parentNode;for(var c=-1,s=i.length;++c<s;)(o=i[c])?(n.push(r[c]=e=t.call(i.parentNode,o.__data__,c,u)),e.__data__=o.__data__):n.push(null)}return B(a)},vt.insert=function(t,n){return arguments.length<2&&(n=yt(this)),J.insert.call(this,t,n)},o.select=function(t){var n;return"string"==typeof t?(n=[X(t,l)]).parentNode=l.documentElement:(n=[t]).parentNode=c(t),B([n])},o.selectAll=function(t){var n;return"string"==typeof t?(n=u($(t,l))).parentNode=l.documentElement:(n=u(t)).parentNode=null,B([n])},J.on=function(t,n,e){var r=arguments.length;if(r<3){if("string"!=typeof t){for(e in r<2&&(n=!1),t)this.each(mt(e,t[e],n));return this}if(r<2)return(r=this.node()["__on"+t])&&r._;e=!1}return this.each(mt(t,n,e))};var xt=o.map({mouseenter:"mouseover",mouseleave:"mouseout"});function Mt(t,n){return function(e){var r=o.event;o.event=e,n[0]=this.__data__;try{t.apply(this,n)}finally{o.event=r}}}function bt(t,n){var e=Mt(t,n);return function(t){var n=t.relatedTarget;n&&(n===this||8&n.compareDocumentPosition(this))||e.call(this,t)}}l&&xt.forEach((function(t){"on"+t in l&&xt.remove(t)}));var wt,_t=0;function kt(t){var n=".dragsuppress-"+ ++_t,e="click"+n,r=o.select(s(t)).on("touchmove"+n,F).on("dragstart"+n,F).on("selectstart"+n,F);if(null==wt&&(wt=!("onselectstart"in t)&&D(t.style,"userSelect")),wt){var i=c(t).style,a=i[wt];i[wt]="none"}return function(t){if(r.on(n,null),wt&&(i[wt]=a),t){var o=function(){r.on(e,null)};r.on(e,(function(){F(),o()}),!0),setTimeout(o,0)}}}o.mouse=function(t){return Nt(t,H())};var St=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;function Nt(t,n){n.changedTouches&&(n=n.changedTouches[0]);var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();if(St<0){var i=s(t);if(i.scrollX||i.scrollY){var a=(e=o.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important"))[0][0].getScreenCTM();St=!(a.f||a.e),e.remove()}}return St?(r.x=n.pageX,r.y=n.pageY):(r.x=n.clientX,r.y=n.clientY),[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var u=t.getBoundingClientRect();return[n.clientX-u.left-t.clientLeft,n.clientY-u.top-t.clientTop]}function Et(){return o.event.changedTouches[0].identifier}o.touch=function(t,n,e){if(arguments.length<3&&(e=n,n=H().changedTouches),n)for(var r,i=0,o=n.length;i<o;++i)if((r=n[i]).identifier===e)return Nt(t,r)},o.behavior.drag=function(){var t=Y(i,"drag","dragstart","dragend"),n=null,e=a(I,o.mouse,s,"mousemove","mouseup"),r=a(Et,o.touch,P,"touchmove","touchend");function i(){this.on("mousedown.drag",e).on("touchstart.drag",r)}function a(e,r,i,a,u){return function(){var l,c=this,s=o.event.target.correspondingElement||o.event.target,f=c.parentNode,h=t.of(c,arguments),p=0,g=e(),d=".drag"+(null==g?"":"-"+g),v=o.select(i(s)).on(a+d,x).on(u+d,M),y=kt(s),m=r(f,g);function x(){var t,n,e=r(f,g);e&&(t=e[0]-m[0],n=e[1]-m[1],p|=t|n,m=e,h({type:"drag",x:e[0]+l[0],y:e[1]+l[1],dx:t,dy:n}))}function M(){r(f,g)&&(v.on(a+d,null).on(u+d,null),y(p),h({type:"dragend"}))}l=n?[(l=n.apply(c,arguments)).x-m[0],l.y-m[1]]:[0,0],h({type:"dragstart"})}}return i.origin=function(t){return arguments.length?(n=t,i):n},o.rebind(i,t,"on")},o.touches=function(t,n){return arguments.length<2&&(n=H().touches),n?u(n).map((function(n){var e=Nt(t,n);return e.identifier=n.identifier,e})):[]};var At=1e-6,Ct=At*At,zt=Math.PI,Tt=2*zt,Lt=Tt-At,qt=zt/2,Pt=zt/180,jt=180/zt;function Dt(t){return t>0?1:t<0?-1:0}function Rt(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])}function It(t){return t>1?0:t<-1?zt:Math.acos(t)}function Ot(t){return t>1?qt:t<-1?-qt:Math.asin(t)}function Ut(t){return((t=Math.exp(t))+1/t)/2}function Ft(t){return(t=Math.sin(t/2))*t}var Ht=Math.SQRT2;o.interpolateZoom=function(t,n){var e,r,i=t[0],o=t[1],a=t[2],u=n[0],l=n[1],c=n[2],s=u-i,f=l-o,h=s*s+f*f;if(h<Ct)r=Math.log(c/a)/Ht,e=function(t){return[i+t*s,o+t*f,a*Math.exp(Ht*t*r)]};else{var p=Math.sqrt(h),g=(c*c-a*a+4*h)/(2*a*2*p),d=(c*c-a*a-4*h)/(2*c*2*p),v=Math.log(Math.sqrt(g*g+1)-g),y=Math.log(Math.sqrt(d*d+1)-d);r=(y-v)/Ht,e=function(t){var n,e=t*r,u=Ut(v),l=a/(2*p)*(u*(n=Ht*e+v,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(v));return[i+l*s,o+l*f,a*u/Ut(Ht*e+v)]}}return e.duration=1e3*r,e},o.behavior.zoom=function(){var t,n,e,r,i,a,u,c,f,h={x:0,y:0,k:1},p=[960,500],g=Zt,d=250,v=0,y="mousedown.zoom",m="mousemove.zoom",x="mouseup.zoom",M="touchstart.zoom",b=Y(w,"zoomstart","zoom","zoomend");function w(t){t.on(y,T).on(Vt+".zoom",q).on("dblclick.zoom",P).on(M,L)}function _(t){return[(t[0]-h.x)/h.k,(t[1]-h.y)/h.k]}function k(t){h.k=Math.max(g[0],Math.min(g[1],t))}function S(t,n){n=function(t){return[t[0]*h.k+h.x,t[1]*h.k+h.y]}(n),h.x+=t[0]-n[0],h.y+=t[1]-n[1]}function N(t,e,r,i){t.__chart__={x:h.x,y:h.y,k:h.k},k(Math.pow(2,i)),S(n=e,r),t=o.select(t),d>0&&(t=t.transition().duration(d)),t.call(w.event)}function E(){u&&u.domain(a.range().map((function(t){return(t-h.x)/h.k})).map(a.invert)),f&&f.domain(c.range().map((function(t){return(t-h.y)/h.k})).map(c.invert))}function A(t){v++||t({type:"zoomstart"})}function C(t){E(),t({type:"zoom",scale:h.k,translate:[h.x,h.y]})}function z(t){--v||(t({type:"zoomend"}),n=null)}function T(){var t=this,n=b.of(t,arguments),e=0,r=o.select(s(t)).on(m,u).on(x,l),i=_(o.mouse(t)),a=kt(t);function u(){e=1,S(o.mouse(t),i),C(n)}function l(){r.on(m,null).on(x,null),a(e),z(n)}bu.call(t),A(n)}function L(){var t,n=this,e=b.of(n,arguments),r={},a=0,u=".zoom-"+o.event.changedTouches[0].identifier,l="touchmove"+u,c="touchend"+u,s=[],f=o.select(n),p=kt(n);function g(){var e=o.touches(n);return t=h.k,e.forEach((function(t){t.identifier in r&&(r[t.identifier]=_(t))})),e}function d(){var t=o.event.target;o.select(t).on(l,v).on(c,m),s.push(t);for(var e=o.event.changedTouches,u=0,f=e.length;u<f;++u)r[e[u].identifier]=null;var p=g(),d=Date.now();if(1===p.length){if(d-i<500){var y=p[0];N(n,y,r[y.identifier],Math.floor(Math.log(h.k)/Math.LN2)+1),F()}i=d}else if(p.length>1){y=p[0];var x=p[1],M=y[0]-x[0],b=y[1]-x[1];a=M*M+b*b}}function v(){var u,l,c,s,f=o.touches(n);bu.call(n);for(var h=0,p=f.length;h<p;++h,s=null)if(c=f[h],s=r[c.identifier]){if(l)break;u=c,l=s}if(s){var g=(g=c[0]-u[0])*g+(g=c[1]-u[1])*g,d=a&&Math.sqrt(g/a);u=[(u[0]+c[0])/2,(u[1]+c[1])/2],l=[(l[0]+s[0])/2,(l[1]+s[1])/2],k(d*t)}i=null,S(u,l),C(e)}function m(){if(o.event.touches.length){for(var t=o.event.changedTouches,n=0,i=t.length;n<i;++n)delete r[t[n].identifier];for(var a in r)return void g()}o.selectAll(s).on(u,null),f.on(y,T).on(M,L),p(),z(e)}d(),A(e),f.on(y,null).on(M,d)}function q(){var i=b.of(this,arguments);r?clearTimeout(r):(bu.call(this),t=_(n=e||o.mouse(this)),A(i)),r=setTimeout((function(){r=null,z(i)}),50),F(),k(Math.pow(2,.002*Yt())*h.k),S(n,t),C(i)}function P(){var t=o.mouse(this),n=Math.log(h.k)/Math.LN2;N(this,t,_(t),o.event.shiftKey?Math.ceil(n)-1:Math.floor(n)+1)}return Vt||(Vt="onwheel"in l?(Yt=function(){return-o.event.deltaY*(o.event.deltaMode?120:1)},"wheel"):"onmousewheel"in l?(Yt=function(){return o.event.wheelDelta},"mousewheel"):(Yt=function(){return-o.event.detail},"MozMousePixelScroll")),w.event=function(t){t.each((function(){var t=b.of(this,arguments),e=h;ku?o.select(this).transition().each("start.zoom",(function(){h=this.__chart__||{x:0,y:0,k:1},A(t)})).tween("zoom:zoom",(function(){var r=p[0],i=p[1],a=n?n[0]:r/2,u=n?n[1]:i/2,l=o.interpolateZoom([(a-h.x)/h.k,(u-h.y)/h.k,r/h.k],[(a-e.x)/e.k,(u-e.y)/e.k,r/e.k]);return function(n){var e=l(n),i=r/e[2];this.__chart__=h={x:a-e[0]*i,y:u-e[1]*i,k:i},C(t)}})).each("interrupt.zoom",(function(){z(t)})).each("end.zoom",(function(){z(t)})):(this.__chart__=h,A(t),C(t),z(t))}))},w.translate=function(t){return arguments.length?(h={x:+t[0],y:+t[1],k:h.k},E(),w):[h.x,h.y]},w.scale=function(t){return arguments.length?(h={x:h.x,y:h.y,k:null},k(+t),E(),w):h.k},w.scaleExtent=function(t){return arguments.length?(g=null==t?Zt:[+t[0],+t[1]],w):g},w.center=function(t){return arguments.length?(e=t&&[+t[0],+t[1]],w):e},w.size=function(t){return arguments.length?(p=t&&[+t[0],+t[1]],w):p},w.duration=function(t){return arguments.length?(d=+t,w):d},w.x=function(t){return arguments.length?(u=t,a=t.copy(),h={x:0,y:0,k:1},w):u},w.y=function(t){return arguments.length?(f=t,c=t.copy(),h={x:0,y:0,k:1},w):f},o.rebind(w,b,"on")};var Yt,Vt,Zt=[0,1/0];function Bt(){}function Xt(t,n,e){return this instanceof Xt?(this.h=+t,this.s=+n,void(this.l=+e)):arguments.length<2?t instanceof Xt?new Xt(t.h,t.s,t.l):pn(""+t,gn,Xt):new Xt(t,n,e)}o.color=Bt,Bt.prototype.toString=function(){return this.rgb()+""},o.hsl=Xt;var $t=Xt.prototype=new Bt;function Wt(t,n,e){var r,i;function o(t){return Math.round(255*function(t){return t>360?t-=360:t<0&&(t+=360),t<60?r+(i-r)*t/60:t<180?i:t<240?r+(i-r)*(240-t)/60:r}(t))}return t=isNaN(t)?0:(t%=360)<0?t+360:t,n=isNaN(n)||n<0?0:n>1?1:n,r=2*(e=e<0?0:e>1?1:e)-(i=e<=.5?e*(1+n):e+n-e*n),new ln(o(t+120),o(t),o(t-120))}function Jt(t,n,e){return this instanceof Jt?(this.h=+t,this.c=+n,void(this.l=+e)):arguments.length<2?t instanceof Jt?new Jt(t.h,t.c,t.l):rn(t instanceof Kt?t.l:(t=dn((t=o.rgb(t)).r,t.g,t.b)).l,t.a,t.b):new Jt(t,n,e)}$t.brighter=function(t){return t=Math.pow(.7,arguments.length?t:1),new Xt(this.h,this.s,this.l/t)},$t.darker=function(t){return t=Math.pow(.7,arguments.length?t:1),new Xt(this.h,this.s,t*this.l)},$t.rgb=function(){return Wt(this.h,this.s,this.l)},o.hcl=Jt;var Qt=Jt.prototype=new Bt;function Gt(t,n,e){return isNaN(t)&&(t=0),isNaN(n)&&(n=0),new Kt(e,Math.cos(t*=Pt)*n,Math.sin(t)*n)}function Kt(t,n,e){return this instanceof Kt?(this.l=+t,this.a=+n,void(this.b=+e)):arguments.length<2?t instanceof Kt?new Kt(t.l,t.a,t.b):t instanceof Jt?Gt(t.h,t.c,t.l):dn((t=ln(t)).r,t.g,t.b):new Kt(t,n,e)}Qt.brighter=function(t){return new Jt(this.h,this.c,Math.min(100,this.l+tn*(arguments.length?t:1)))},Qt.darker=function(t){return new Jt(this.h,this.c,Math.max(0,this.l-tn*(arguments.length?t:1)))},Qt.rgb=function(){return Gt(this.h,this.c,this.l).rgb()},o.lab=Kt;var tn=18,nn=Kt.prototype=new Bt;function en(t,n,e){var r=(t+16)/116,i=r+n/500,o=r-e/200;return new ln(un(3.2404542*(i=.95047*on(i))-1.5371385*(r=1*on(r))-.4985314*(o=1.08883*on(o))),un(-.969266*i+1.8760108*r+.041556*o),un(.0556434*i-.2040259*r+1.0572252*o))}function rn(t,n,e){return t>0?new Jt(Math.atan2(e,n)*jt,Math.sqrt(n*n+e*e),t):new Jt(NaN,NaN,t)}function on(t){return t>.206893034?t*t*t:(t-4/29)/7.787037}function an(t){return t>.008856?Math.pow(t,1/3):7.787037*t+4/29}function un(t){return Math.round(255*(t<=.00304?12.92*t:1.055*Math.pow(t,1/2.4)-.055))}function ln(t,n,e){return this instanceof ln?(this.r=~~t,this.g=~~n,void(this.b=~~e)):arguments.length<2?t instanceof ln?new ln(t.r,t.g,t.b):pn(""+t,ln,Wt):new ln(t,n,e)}function cn(t){return new ln(t>>16,t>>8&255,255&t)}function sn(t){return cn(t)+""}nn.brighter=function(t){return new Kt(Math.min(100,this.l+tn*(arguments.length?t:1)),this.a,this.b)},nn.darker=function(t){return new Kt(Math.max(0,this.l-tn*(arguments.length?t:1)),this.a,this.b)},nn.rgb=function(){return en(this.l,this.a,this.b)},o.rgb=ln;var fn=ln.prototype=new Bt;function hn(t){return t<16?"0"+Math.max(0,t).toString(16):Math.min(255,t).toString(16)}function pn(t,n,e){var r,i,o,a=0,u=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(t=t.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return n(yn(i[0]),yn(i[1]),yn(i[2]))}return(o=mn.get(t))?n(o.r,o.g,o.b):(null==t||"#"!==t.charAt(0)||isNaN(o=parseInt(t.slice(1),16))||(4===t.length?(a=(3840&o)>>4,a|=a>>4,u=240&o,u|=u>>4,l=15&o,l|=l<<4):7===t.length&&(a=(16711680&o)>>16,u=(65280&o)>>8,l=255&o)),n(a,u,l))}function gn(t,n,e){var r,i,o=Math.min(t/=255,n/=255,e/=255),a=Math.max(t,n,e),u=a-o,l=(a+o)/2;return u?(i=l<.5?u/(a+o):u/(2-a-o),r=t==a?(n-e)/u+(n<e?6:0):n==a?(e-t)/u+2:(t-n)/u+4,r*=60):(r=NaN,i=l>0&&l<1?0:r),new Xt(r,i,l)}function dn(t,n,e){var r=an((.4124564*(t=vn(t))+.3575761*(n=vn(n))+.1804375*(e=vn(e)))/.95047),i=an((.2126729*t+.7151522*n+.072175*e)/1);return Kt(116*i-16,500*(r-i),200*(i-an((.0193339*t+.119192*n+.9503041*e)/1.08883)))}function vn(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function yn(t){var n=parseFloat(t);return"%"===t.charAt(t.length-1)?Math.round(2.55*n):n}fn.brighter=function(t){t=Math.pow(.7,arguments.length?t:1);var n=this.r,e=this.g,r=this.b,i=30;return n||e||r?(n&&n<i&&(n=i),e&&e<i&&(e=i),r&&r<i&&(r=i),new ln(Math.min(255,n/t),Math.min(255,e/t),Math.min(255,r/t))):new ln(i,i,i)},fn.darker=function(t){return new ln((t=Math.pow(.7,arguments.length?t:1))*this.r,t*this.g,t*this.b)},fn.hsl=function(){return gn(this.r,this.g,this.b)},fn.toString=function(){return"#"+hn(this.r)+hn(this.g)+hn(this.b)};var mn=o.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});function xn(t){return"function"==typeof t?t:function(){return t}}function Mn(t){return function(n,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),bn(n,e,t,r)}}function bn(t,n,e,r){var i={},a=o.dispatch("beforesend","progress","load","error"),l={},c=new XMLHttpRequest,s=null;function f(){var t,n=c.status;if(!n&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||n>=200&&n<300||304===n){try{t=e.call(i,c)}catch(t){return void a.error.call(i,t)}a.load.call(i,t)}else a.error.call(i,c)}return!this.XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=f:c.onreadystatechange=function(){c.readyState>3&&f()},c.onprogress=function(t){var n=o.event;o.event=t;try{a.progress.call(i,c)}finally{o.event=n}},i.header=function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?l[t]:(null==n?delete l[t]:l[t]=n+"",i)},i.mimeType=function(t){return arguments.length?(n=null==t?null:t+"",i):n},i.responseType=function(t){return arguments.length?(s=t,i):s},i.response=function(t){return e=t,i},["get","post"].forEach((function(t){i[t]=function(){return i.send.apply(i,[t].concat(u(arguments)))}})),i.send=function(e,r,o){if(2===arguments.length&&"function"==typeof r&&(o=r,r=null),c.open(e,t,!0),null==n||"accept"in l||(l.accept=n+",*/*"),c.setRequestHeader)for(var u in l)c.setRequestHeader(u,l[u]);return null!=n&&c.overrideMimeType&&c.overrideMimeType(n),null!=s&&(c.responseType=s),null!=o&&i.on("error",o).on("load",(function(t){o(null,t)})),a.beforesend.call(i,c),c.send(null==r?null:r),i},i.abort=function(){return c.abort(),i},o.rebind(i,a,"on"),null==r?i:i.get(function(t){return 1===t.length?function(n,e){t(null==n?e:null)}:t}(r))}mn.forEach((function(t,n){mn.set(t,cn(n))})),o.functor=xn,o.xhr=Mn(P),o.dsv=function(t,n){var e=new RegExp('["'+t+"\n]"),r=t.charCodeAt(0);function i(t,e,r){arguments.length<3&&(r=e,e=null);var i=bn(t,n,null==e?o:a(e),r);return i.row=function(t){return arguments.length?i.response(null==(e=t)?o:a(t)):e},i}function o(t){return i.parse(t.responseText)}function a(t){return function(n){return i.parse(n.responseText,t)}}function u(n){return n.map(l).join(t)}function l(t){return e.test(t)?'"'+t.replace(/\"/g,'""')+'"':t}return i.parse=function(t,n){var e;return i.parseRows(t,(function(t,r){if(e)return e(t,r-1);var i=new Function("d","return {"+t.map((function(t,n){return JSON.stringify(t)+": d["+n+"]"})).join(",")+"}");e=n?function(t,e){return n(i(t),e)}:i}))},i.parseRows=function(t,n){var e,i,o={},a={},u=[],l=t.length,c=0,s=0;function f(){if(c>=l)return a;if(i)return i=!1,o;var n=c;if(34===t.charCodeAt(n)){for(var e=n;e++<l;)if(34===t.charCodeAt(e)){if(34!==t.charCodeAt(e+1))break;++e}return c=e+2,13===(u=t.charCodeAt(e+1))?(i=!0,10===t.charCodeAt(e+2)&&++c):10===u&&(i=!0),t.slice(n+1,e).replace(/""/g,'"')}for(;c<l;){var u,s=1;if(10===(u=t.charCodeAt(c++)))i=!0;else if(13===u)i=!0,10===t.charCodeAt(c)&&(++c,++s);else if(u!==r)continue;return t.slice(n,c-s)}return t.slice(n)}for(;(e=f())!==a;){for(var h=[];e!==o&&e!==a;)h.push(e),e=f();n&&null==(h=n(h,s++))||u.push(h)}return u},i.format=function(n){if(Array.isArray(n[0]))return i.formatRows(n);var e=new q,r=[];return n.forEach((function(t){for(var n in t)e.has(n)||r.push(e.add(n))})),[r.map(l).join(t)].concat(n.map((function(n){return r.map((function(t){return l(n[t])})).join(t)}))).join("\n")},i.formatRows=function(t){return t.map(u).join("\n")},i},o.csv=o.dsv(",","text/csv"),o.tsv=o.dsv("\t","text/tab-separated-values");var wn,_n,kn,Sn,Nn=this[D(this,"requestAnimationFrame")]||function(t){setTimeout(t,17)};function En(t,n,e){var r=arguments.length;r<2&&(n=0),r<3&&(e=Date.now());var i=e+n,o={c:t,t:i,n:null};return _n?_n.n=o:wn=o,_n=o,kn||(Sn=clearTimeout(Sn),kn=1,Nn(An)),o}function An(){var t=Cn(),n=zn()-t;n>24?(isFinite(n)&&(clearTimeout(Sn),Sn=setTimeout(An,n)),kn=0):(kn=1,Nn(An))}function Cn(){for(var t=Date.now(),n=wn;n;)t>=n.t&&n.c(t-n.t)&&(n.c=null),n=n.n;return t}function zn(){for(var t,n=wn,e=1/0;n;)n.c?(n.t<e&&(e=n.t),n=(t=n).n):n=t?t.n=n.n:wn=n.n;return _n=t,e}function Tn(t,n){return n-(t?Math.ceil(Math.log(t)/Math.LN10):1)}o.timer=function(){En.apply(this,arguments)},o.timer.flush=function(){Cn(),zn()},o.round=function(t,n){return n?Math.round(t*(n=Math.pow(10,n)))/n:Math.round(t)};var Ln=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"].map((function(t,n){var e=Math.pow(10,3*w(8-n));return{scale:n>8?function(t){return t/e}:function(t){return t*e},symbol:t}}));function qn(t){var n=t.decimal,e=t.thousands,r=t.grouping,i=t.currency,a=r&&e?function(t,n){for(var i=t.length,o=[],a=0,u=r[0],l=0;i>0&&u>0&&(l+u+1>n&&(u=Math.max(1,n-l)),o.push(t.substring(i-=u,i+u)),!((l+=u+1)>n));)u=r[a=(a+1)%r.length];return o.reverse().join(e)}:P;return function(t){var e=Pn.exec(t),r=e[1]||" ",u=e[2]||">",l=e[3]||"-",c=e[4]||"",s=e[5],f=+e[6],h=e[7],p=e[8],g=e[9],d=1,v="",y="",m=!1,x=!0;switch(p&&(p=+p.substring(1)),(s||"0"===r&&"="===u)&&(s=r="0",u="="),g){case"n":h=!0,g="g";break;case"%":d=100,y="%",g="f";break;case"p":d=100,y="%",g="r";break;case"b":case"o":case"x":case"X":"#"===c&&(v="0"+g.toLowerCase());case"c":x=!1;case"d":m=!0,p=0;break;case"s":d=-1,g="r"}"$"===c&&(v=i[0],y=i[1]),"r"!=g||p||(g="g"),null!=p&&("g"==g?p=Math.max(1,Math.min(21,p)):"e"!=g&&"f"!=g||(p=Math.max(0,Math.min(20,p)))),g=jn.get(g)||Dn;var M=s&&h;return function(t){var e=y;if(m&&t%1)return"";var i=t<0||0===t&&1/t<0?(t=-t,"-"):"-"===l?"":l;if(d<0){var c=o.formatPrefix(t,p);t=c.scale(t),e=c.symbol+y}else t*=d;var b,w,_=(t=g(t,p)).lastIndexOf(".");if(_<0){var k=x?t.lastIndexOf("e"):-1;k<0?(b=t,w=""):(b=t.substring(0,k),w=t.substring(k))}else b=t.substring(0,_),w=n+t.substring(_+1);!s&&h&&(b=a(b,1/0));var S=v.length+b.length+w.length+(M?0:i.length),N=S<f?new Array(S=f-S+1).join(r):"";return M&&(b=a(N+b,N.length?f-w.length:1/0)),i+=v,t=b+w,("<"===u?i+t+N:">"===u?N+i+t:"^"===u?N.substring(0,S>>=1)+i+t+N.substring(S):i+(M?t:N+t))+e}}}o.formatPrefix=function(t,n){var e=0;return(t=+t)&&(t<0&&(t*=-1),n&&(t=o.round(t,Tn(t,n))),e=1+Math.floor(1e-12+Math.log(t)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),Ln[8+e/3]};var Pn=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,jn=o.map({b:function(t){return t.toString(2)},c:function(t){return String.fromCharCode(t)},o:function(t){return t.toString(8)},x:function(t){return t.toString(16)},X:function(t){return t.toString(16).toUpperCase()},g:function(t,n){return t.toPrecision(n)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},r:function(t,n){return(t=o.round(t,Tn(t,n))).toFixed(Math.max(0,Math.min(20,Tn(t*(1+1e-15),n))))}});function Dn(t){return t+""}var Rn=o.time={},In=Date;function On(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}On.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){Un.setUTCDate.apply(this._,arguments)},setDay:function(){Un.setUTCDay.apply(this._,arguments)},setFullYear:function(){Un.setUTCFullYear.apply(this._,arguments)},setHours:function(){Un.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){Un.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){Un.setUTCMinutes.apply(this._,arguments)},setMonth:function(){Un.setUTCMonth.apply(this._,arguments)},setSeconds:function(){Un.setUTCSeconds.apply(this._,arguments)},setTime:function(){Un.setTime.apply(this._,arguments)}};var Un=Date.prototype;function Fn(t,n,e){function r(n){var e=t(n),r=o(e,1);return n-e<r-n?e:r}function i(e){return n(e=t(new In(e-1)),1),e}function o(t,e){return n(t=new In(+t),e),t}function a(t,r,o){var a=i(t),u=[];if(o>1)for(;a<r;)e(a)%o||u.push(new Date(+a)),n(a,1);else for(;a<r;)u.push(new Date(+a)),n(a,1);return u}t.floor=t,t.round=r,t.ceil=i,t.offset=o,t.range=a;var u=t.utc=Hn(t);return u.floor=u,u.round=Hn(r),u.ceil=Hn(i),u.offset=Hn(o),u.range=function(t,n,e){try{In=On;var r=new On;return r._=t,a(r,n,e)}finally{In=Date}},t}function Hn(t){return function(n,e){try{In=On;var r=new On;return r._=n,t(r,e)._}finally{In=Date}}}function Yn(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,a=t.days,u=t.shortDays,l=t.months,c=t.shortMonths;function s(t){var n=t.length;function e(e){for(var r,i,o,a=[],u=-1,l=0;++u<n;)37===t.charCodeAt(u)&&(a.push(t.slice(l,u)),null!=(i=Vn[r=t.charAt(++u)])&&(r=t.charAt(++u)),(o=b[r])&&(r=o(e,null==i?"e"===r?" ":"0":i)),a.push(r),l=u+1);return a.push(t.slice(l,u)),a.join("")}return e.parse=function(n){var e={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null};if(f(e,t,n,0)!=n.length)return null;"p"in e&&(e.H=e.H%12+12*e.p);var r=null!=e.Z&&In!==On,i=new(r?On:In);return"j"in e?i.setFullYear(e.y,0,e.j):"W"in e||"U"in e?("w"in e||(e.w="W"in e?1:0),i.setFullYear(e.y,0,1),i.setFullYear(e.y,0,"W"in e?(e.w+6)%7+7*e.W-(i.getDay()+5)%7:e.w+7*e.U-(i.getDay()+6)%7)):i.setFullYear(e.y,e.m,e.d),i.setHours(e.H+(e.Z/100|0),e.M+e.Z%100,e.S,e.L),r?i._:i},e.toString=function(){return t},e}function f(t,n,e,r){for(var i,o,a,u=0,l=n.length,c=e.length;u<l;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(a=n.charAt(u++),!(o=w[a in Vn?n.charAt(u++):a])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}s.utc=function(t){var n=s(t);function e(t){try{var e=new(In=On);return e._=t,n(e)}finally{In=Date}}return e.parse=function(t){try{In=On;var e=n.parse(t);return e&&e._}finally{In=Date}},e.toString=n.toString,e},s.multi=s.utc.multi=fe;var h=o.map(),p=$n(a),g=Wn(a),d=$n(u),v=Wn(u),y=$n(l),m=Wn(l),x=$n(c),M=Wn(c);i.forEach((function(t,n){h.set(t.toLowerCase(),n)}));var b={a:function(t){return u[t.getDay()]},A:function(t){return a[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return l[t.getMonth()]},c:s(n),d:function(t,n){return Xn(t.getDate(),n,2)},e:function(t,n){return Xn(t.getDate(),n,2)},H:function(t,n){return Xn(t.getHours(),n,2)},I:function(t,n){return Xn(t.getHours()%12||12,n,2)},j:function(t,n){return Xn(1+Rn.dayOfYear(t),n,3)},L:function(t,n){return Xn(t.getMilliseconds(),n,3)},m:function(t,n){return Xn(t.getMonth()+1,n,2)},M:function(t,n){return Xn(t.getMinutes(),n,2)},p:function(t){return i[+(t.getHours()>=12)]},S:function(t,n){return Xn(t.getSeconds(),n,2)},U:function(t,n){return Xn(Rn.sundayOfYear(t),n,2)},w:function(t){return t.getDay()},W:function(t,n){return Xn(Rn.mondayOfYear(t),n,2)},x:s(e),X:s(r),y:function(t,n){return Xn(t.getFullYear()%100,n,2)},Y:function(t,n){return Xn(t.getFullYear()%1e4,n,4)},Z:ce,"%":function(){return"%"}},w={a:function(t,n,e){d.lastIndex=0;var r=d.exec(n.slice(e));return r?(t.w=v.get(r[0].toLowerCase()),e+r[0].length):-1},A:function(t,n,e){p.lastIndex=0;var r=p.exec(n.slice(e));return r?(t.w=g.get(r[0].toLowerCase()),e+r[0].length):-1},b:function(t,n,e){x.lastIndex=0;var r=x.exec(n.slice(e));return r?(t.m=M.get(r[0].toLowerCase()),e+r[0].length):-1},B:function(t,n,e){y.lastIndex=0;var r=y.exec(n.slice(e));return r?(t.m=m.get(r[0].toLowerCase()),e+r[0].length):-1},c:function(t,n,e){return f(t,b.c.toString(),n,e)},d:re,e:re,H:oe,I:oe,j:ie,L:le,m:ee,M:ae,p:function(t,n,e){var r=h.get(n.slice(e,e+=2).toLowerCase());return null==r?-1:(t.p=r,e)},S:ue,U:Qn,w:Jn,W:Gn,x:function(t,n,e){return f(t,b.x.toString(),n,e)},X:function(t,n,e){return f(t,b.X.toString(),n,e)},y:te,Y:Kn,Z:ne,"%":se};return s}Rn.year=Fn((function(t){return(t=Rn.day(t)).setMonth(0,1),t}),(function(t,n){t.setFullYear(t.getFullYear()+n)}),(function(t){return t.getFullYear()})),Rn.years=Rn.year.range,Rn.years.utc=Rn.year.utc.range,Rn.day=Fn((function(t){var n=new In(2e3,0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()),n}),(function(t,n){t.setDate(t.getDate()+n)}),(function(t){return t.getDate()-1})),Rn.days=Rn.day.range,Rn.days.utc=Rn.day.utc.range,Rn.dayOfYear=function(t){var n=Rn.year(t);return Math.floor((t-n-6e4*(t.getTimezoneOffset()-n.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach((function(t,n){n=7-n;var e=Rn[t]=Fn((function(t){return(t=Rn.day(t)).setDate(t.getDate()-(t.getDay()+n)%7),t}),(function(t,n){t.setDate(t.getDate()+7*Math.floor(n))}),(function(t){var e=Rn.year(t).getDay();return Math.floor((Rn.dayOfYear(t)+(e+n)%7)/7)-(e!==n)}));Rn[t+"s"]=e.range,Rn[t+"s"].utc=e.utc.range,Rn[t+"OfYear"]=function(t){var e=Rn.year(t).getDay();return Math.floor((Rn.dayOfYear(t)+(e+n)%7)/7)}})),Rn.week=Rn.sunday,Rn.weeks=Rn.sunday.range,Rn.weeks.utc=Rn.sunday.utc.range,Rn.weekOfYear=Rn.sundayOfYear;var Vn={"-":"",_:" ",0:"0"},Zn=/^\s*\d+/,Bn=/^%/;function Xn(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function $n(t){return new RegExp("^(?:"+t.map(o.requote).join("|")+")","i")}function Wn(t){for(var n=new S,e=-1,r=t.length;++e<r;)n.set(t[e].toLowerCase(),e);return n}function Jn(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Qn(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function Gn(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function Kn(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function te(t,n,e){Zn.lastIndex=0;var r,i=Zn.exec(n.slice(e,e+2));return i?(t.y=(r=+i[0])+(r>68?1900:2e3),e+i[0].length):-1}function ne(t,n,e){return/^[+-]\d{4}$/.test(n=n.slice(e,e+5))?(t.Z=-n,e+5):-1}function ee(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function re(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function ie(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+3));return r?(t.j=+r[0],e+r[0].length):-1}function oe(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function ae(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function ue(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function le(t,n,e){Zn.lastIndex=0;var r=Zn.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function ce(t){var n=t.getTimezoneOffset(),e=n>0?"-":"+",r=w(n)/60|0,i=w(n)%60;return e+Xn(r,"0",2)+Xn(i,"0",2)}function se(t,n,e){Bn.lastIndex=0;var r=Bn.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function fe(t){for(var n=t.length,e=-1;++e<n;)t[e][0]=this(t[e][0]);return function(n){for(var e=0,r=t[e];!r[1](n);)r=t[++e];return r[0](n)}}o.locale=function(t){return{numberFormat:qn(t),timeFormat:Yn(t)}};var he=o.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});function pe(){}o.format=he.numberFormat,o.geo={},pe.prototype={s:0,t:0,add:function(t){de(t,this.t,ge),de(ge.s,this.s,this),this.s?this.t+=ge.t:this.s=ge.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var ge=new pe;function de(t,n,e){var r=e.s=t+n,i=r-t,o=r-i;e.t=t-o+(n-i)}function ve(t,n){t&&me.hasOwnProperty(t.type)&&me[t.type](t,n)}o.geo.stream=function(t,n){t&&ye.hasOwnProperty(t.type)?ye[t.type](t,n):ve(t,n)};var ye={Feature:function(t,n){ve(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)ve(e[r].geometry,n)}},me={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){xe(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)xe(e[r],n,0)},Polygon:function(t,n){Me(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)Me(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)ve(e[r],n)}};function xe(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function Me(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)xe(t[e],n,1);n.polygonEnd()}o.geo.area=function(t){return be=0,o.geo.stream(t,Pe),be};var be,we,_e,ke,Se,Ne,Ee,Ae,Ce,ze,Te,Le,qe=new pe,Pe={sphere:function(){be+=4*zt},point:I,lineStart:I,lineEnd:I,polygonStart:function(){qe.reset(),Pe.lineStart=je},polygonEnd:function(){var t=2*qe;be+=t<0?4*zt+t:t,Pe.lineStart=Pe.lineEnd=Pe.point=I}};function je(){var t,n,e,r,i;function o(t,n){n=n*Pt/2+zt/4;var o=(t*=Pt)-e,a=o>=0?1:-1,u=a*o,l=Math.cos(n),c=Math.sin(n),s=i*c,f=r*l+s*Math.cos(u),h=s*a*Math.sin(u);qe.add(Math.atan2(h,f)),e=t,r=l,i=c}Pe.point=function(a,u){Pe.point=o,e=(t=a)*Pt,r=Math.cos(u=(n=u)*Pt/2+zt/4),i=Math.sin(u)},Pe.lineEnd=function(){o(t,n)}}function De(t){var n=t[0],e=t[1],r=Math.cos(e);return[r*Math.cos(n),r*Math.sin(n),Math.sin(e)]}function Re(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Ie(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Oe(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Ue(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Fe(t){var n=Math.sqrt(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}function He(t){return[Math.atan2(t[1],t[0]),Ot(t[2])]}function Ye(t,n){return w(t[0]-n[0])<At&&w(t[1]-n[1])<At}o.geo.bounds=function(){var t,n,e,r,i,a,u,l,c,s,f,h={point:p,lineStart:d,lineEnd:v,polygonStart:function(){h.point=y,h.lineStart=m,h.lineEnd=x,c=0,Pe.polygonStart()},polygonEnd:function(){Pe.polygonEnd(),h.point=p,h.lineStart=d,h.lineEnd=v,qe<0?(t=-(e=180),n=-(r=90)):c>At?r=90:c<-At&&(n=-90),f[0]=t,f[1]=e}};function p(i,o){s.push(f=[t=i,e=i]),o<n&&(n=o),o>r&&(r=o)}function g(o,a){var u=De([o*Pt,a*Pt]);if(l){var c=Ie(l,u),s=Ie([c[1],-c[0],0],c);Fe(s),s=He(s);var f=o-i,h=f>0?1:-1,g=s[0]*jt*h,d=w(f)>180;if(d^(h*i<g&&g<h*o))(v=s[1]*jt)>r&&(r=v);else if(d^(h*i<(g=(g+360)%360-180)&&g<h*o)){var v;(v=-s[1]*jt)<n&&(n=v)}else a<n&&(n=a),a>r&&(r=a);d?o<i?M(t,o)>M(t,e)&&(e=o):M(o,e)>M(t,e)&&(t=o):e>=t?(o<t&&(t=o),o>e&&(e=o)):o>i?M(t,o)>M(t,e)&&(e=o):M(o,e)>M(t,e)&&(t=o)}else p(o,a);l=u,i=o}function d(){h.point=g}function v(){f[0]=t,f[1]=e,h.point=p,l=null}function y(t,n){if(l){var e=t-i;c+=w(e)>180?e+(e>0?360:-360):e}else a=t,u=n;Pe.point(t,n),g(t,n)}function m(){Pe.lineStart()}function x(){y(a,u),Pe.lineEnd(),w(c)>At&&(t=-(e=180)),f[0]=t,f[1]=e,l=null}function M(t,n){return(n-=t)<0?n+360:n}function b(t,n){return t[0]-n[0]}function _(t,n){return n[0]<=n[1]?n[0]<=t&&t<=n[1]:t<n[0]||n[1]<t}return function(i){if(r=e=-(t=n=1/0),s=[],o.geo.stream(i,h),c=s.length){s.sort(b);for(var a=1,u=[d=s[0]];a<c;++a)_((p=s[a])[0],d)||_(p[1],d)?(M(d[0],p[1])>M(d[0],d[1])&&(d[1]=p[1]),M(p[0],d[1])>M(d[0],d[1])&&(d[0]=p[0])):u.push(d=p);for(var l,c,p,g=-1/0,d=(a=0,u[c=u.length-1]);a<=c;d=p,++a)p=u[a],(l=M(d[1],p[0]))>g&&(g=l,t=p[0],e=d[1])}return s=f=null,t===1/0||n===1/0?[[NaN,NaN],[NaN,NaN]]:[[t,n],[e,r]]}}(),o.geo.centroid=function(t){we=_e=ke=Se=Ne=Ee=Ae=Ce=ze=Te=Le=0,o.geo.stream(t,Ve);var n=ze,e=Te,r=Le,i=n*n+e*e+r*r;return i<Ct&&(n=Ee,e=Ae,r=Ce,_e<At&&(n=ke,e=Se,r=Ne),(i=n*n+e*e+r*r)<Ct)?[NaN,NaN]:[Math.atan2(e,n)*jt,Ot(r/Math.sqrt(i))*jt]};var Ve={sphere:I,point:Ze,lineStart:Xe,lineEnd:$e,polygonStart:function(){Ve.lineStart=We},polygonEnd:function(){Ve.lineStart=Xe}};function Ze(t,n){t*=Pt;var e=Math.cos(n*=Pt);Be(e*Math.cos(t),e*Math.sin(t),Math.sin(n))}function Be(t,n,e){++we,ke+=(t-ke)/we,Se+=(n-Se)/we,Ne+=(e-Ne)/we}function Xe(){var t,n,e;function r(r,i){r*=Pt;var o=Math.cos(i*=Pt),a=o*Math.cos(r),u=o*Math.sin(r),l=Math.sin(i),c=Math.atan2(Math.sqrt((c=n*l-e*u)*c+(c=e*a-t*l)*c+(c=t*u-n*a)*c),t*a+n*u+e*l);_e+=c,Ee+=c*(t+(t=a)),Ae+=c*(n+(n=u)),Ce+=c*(e+(e=l)),Be(t,n,e)}Ve.point=function(i,o){i*=Pt;var a=Math.cos(o*=Pt);t=a*Math.cos(i),n=a*Math.sin(i),e=Math.sin(o),Ve.point=r,Be(t,n,e)}}function $e(){Ve.point=Ze}function We(){var t,n,e,r,i;function o(t,n){t*=Pt;var o=Math.cos(n*=Pt),a=o*Math.cos(t),u=o*Math.sin(t),l=Math.sin(n),c=r*l-i*u,s=i*a-e*l,f=e*u-r*a,h=Math.sqrt(c*c+s*s+f*f),p=e*a+r*u+i*l,g=h&&-It(p)/h,d=Math.atan2(h,p);ze+=g*c,Te+=g*s,Le+=g*f,_e+=d,Ee+=d*(e+(e=a)),Ae+=d*(r+(r=u)),Ce+=d*(i+(i=l)),Be(e,r,i)}Ve.point=function(a,u){t=a,n=u,Ve.point=o,a*=Pt;var l=Math.cos(u*=Pt);e=l*Math.cos(a),r=l*Math.sin(a),i=Math.sin(u),Be(e,r,i)},Ve.lineEnd=function(){o(t,n),Ve.lineEnd=$e,Ve.point=Ze}}function Je(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e}function Qe(){return!0}function Ge(t,n,e,r,i){var o=[],a=[];if(t.forEach((function(t){if(!((n=t.length-1)<=0)){var n,e=t[0],r=t[n];if(Ye(e,r)){i.lineStart();for(var u=0;u<n;++u)i.point((e=t[u])[0],e[1]);i.lineEnd()}else{var l=new tr(e,t,null,!0),c=new tr(e,null,l,!1);l.o=c,o.push(l),a.push(c),l=new tr(r,t,null,!1),c=new tr(r,null,l,!0),l.o=c,o.push(l),a.push(c)}}})),a.sort(n),Ke(o),Ke(a),o.length){for(var u=0,l=e,c=a.length;u<c;++u)a[u].e=l=!l;for(var s,f,h=o[0];;){for(var p=h,g=!0;p.v;)if((p=p.n)===h)return;s=p.z,i.lineStart();do{if(p.v=p.o.v=!0,p.e){if(g)for(u=0,c=s.length;u<c;++u)i.point((f=s[u])[0],f[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(g)for(u=(s=p.p.z).length-1;u>=0;--u)i.point((f=s[u])[0],f[1]);else r(p.x,p.p.x,-1,i);p=p.p}s=(p=p.o).z,g=!g}while(!p.v);i.lineEnd()}}}function Ke(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}function tr(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function nr(t,n,e,r){return function(i,a){var u,l=n(a),c=i.invert(r[0],r[1]),s={point:f,lineStart:p,lineEnd:g,polygonStart:function(){s.point=M,s.lineStart=b,s.lineEnd=w,u=[],d=[]},polygonEnd:function(){s.point=f,s.lineStart=p,s.lineEnd=g,u=o.merge(u);var t=function(t,n){var e=t[0],r=t[1],i=[Math.sin(e),-Math.cos(e),0],o=0,a=0;qe.reset();for(var u=0,l=n.length;u<l;++u){var c=n[u],s=c.length;if(s)for(var f=c[0],h=f[0],p=f[1]/2+zt/4,g=Math.sin(p),d=Math.cos(p),v=1;;){v===s&&(v=0);var y=(t=c[v])[0],m=t[1]/2+zt/4,x=Math.sin(m),M=Math.cos(m),b=y-h,w=b>=0?1:-1,_=w*b,k=_>zt,S=g*x;if(qe.add(Math.atan2(S*w*Math.sin(_),d*M+S*Math.cos(_))),o+=k?b+w*Tt:b,k^h>=e^y>=e){var N=Ie(De(f),De(t));Fe(N);var E=Ie(i,N);Fe(E);var A=(k^b>=0?-1:1)*Ot(E[2]);(r>A||r===A&&(N[0]||N[1]))&&(a+=k^b>=0?1:-1)}if(!v++)break;h=y,g=x,d=M,f=t}}return(o<-At||o<At&&qe<-At)^1&a}(c,d);u.length?(x||(a.polygonStart(),x=!0),Ge(u,ir,t,e,a)):t&&(x||(a.polygonStart(),x=!0),a.lineStart(),e(null,null,1,a),a.lineEnd()),x&&(a.polygonEnd(),x=!1),u=d=null},sphere:function(){a.polygonStart(),a.lineStart(),e(null,null,1,a),a.lineEnd(),a.polygonEnd()}};function f(n,e){var r=i(n,e);t(n=r[0],e=r[1])&&a.point(n,e)}function h(t,n){var e=i(t,n);l.point(e[0],e[1])}function p(){s.point=h,l.lineStart()}function g(){s.point=f,l.lineEnd()}var d,v,y=rr(),m=n(y),x=!1;function M(t,n){v.push([t,n]);var e=i(t,n);m.point(e[0],e[1])}function b(){m.lineStart(),v=[]}function w(){M(v[0][0],v[0][1]),m.lineEnd();var t,n=m.clean(),e=y.buffer(),r=e.length;if(v.pop(),d.push(v),v=null,r)if(1&n){var i,o=-1;if((r=(t=e[0]).length-1)>0){for(x||(a.polygonStart(),x=!0),a.lineStart();++o<r;)a.point((i=t[o])[0],i[1]);a.lineEnd()}}else r>1&&2&n&&e.push(e.pop().concat(e.shift())),u.push(e.filter(er))}return s}}function er(t){return t.length>1}function rr(){var t,n=[];return{lineStart:function(){n.push(t=[])},point:function(n,e){t.push([n,e])},lineEnd:I,buffer:function(){var e=n;return n=[],t=null,e},rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))}}}function ir(t,n){return((t=t.x)[0]<0?t[1]-qt-At:qt-t[1])-((n=n.x)[0]<0?n[1]-qt-At:qt-n[1])}var or=nr(Qe,(function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,a){var u=o>0?zt:-zt,l=w(o-e);w(l-zt)<At?(t.point(e,r=(r+a)/2>0?qt:-qt),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),t.point(o,r),n=0):i!==u&&l>=zt&&(w(e-i)<At&&(e-=i*At),w(o-u)<At&&(o-=u*At),r=function(t,n,e,r){var i,o,a=Math.sin(t-e);return w(a)>At?Math.atan((Math.sin(n)*(o=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(n))*Math.sin(t))/(i*o*a)):(n+r)/2}(e,r,o,a),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(u,r),n=0),t.point(e=o,r=a),i=u},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}}),(function(t,n,e,r){var i;if(null==t)i=e*qt,r.point(-zt,i),r.point(0,i),r.point(zt,i),r.point(zt,0),r.point(zt,-i),r.point(0,-i),r.point(-zt,-i),r.point(-zt,0),r.point(-zt,i);else if(w(t[0]-n[0])>At){var o=t[0]<n[0]?zt:-zt;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])}),[-zt,-zt/2]);function ar(t){var n=Math.cos(t),e=n>0,r=w(n)>At;return nr(i,(function(t){var n,u,l,c,s;return{lineStart:function(){c=l=!1,s=1},point:function(f,h){var p,g=[f,h],d=i(f,h),v=e?d?0:a(f,h):d?a(f+(f<0?zt:-zt),h):0;if(!n&&(c=l=d)&&t.lineStart(),d!==l&&(p=o(n,g),(Ye(n,p)||Ye(g,p))&&(g[0]+=At,g[1]+=At,d=i(g[0],g[1]))),d!==l)s=0,d?(t.lineStart(),p=o(g,n),t.point(p[0],p[1])):(p=o(n,g),t.point(p[0],p[1]),t.lineEnd()),n=p;else if(r&&n&&e^d){var y;v&u||!(y=o(g,n,!0))||(s=0,e?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!d||n&&Ye(n,g)||t.point(g[0],g[1]),n=g,l=d,u=v},lineEnd:function(){l&&t.lineEnd(),n=null},clean:function(){return s|(c&&l)<<1}}}),Hr(t,6*Pt),e?[0,-t]:[-zt,t-zt]);function i(t,e){return Math.cos(t)*Math.cos(e)>n}function o(t,e,r){var i=[1,0,0],o=Ie(De(t),De(e)),a=Re(o,o),u=o[0],l=a-u*u;if(!l)return!r&&t;var c=n*a/l,s=-n*u/l,f=Ie(i,o),h=Ue(i,c);Oe(h,Ue(o,s));var p=f,g=Re(h,p),d=Re(p,p),v=g*g-d*(Re(h,h)-1);if(!(v<0)){var y=Math.sqrt(v),m=Ue(p,(-g-y)/d);if(Oe(m,h),m=He(m),!r)return m;var x,M=t[0],b=e[0],_=t[1],k=e[1];b<M&&(x=M,M=b,b=x);var S=b-M,N=w(S-zt)<At;if(!N&&k<_&&(x=_,_=k,k=x),N||S<At?N?_+k>0^m[1]<(w(m[0]-M)<At?_:k):_<=m[1]&&m[1]<=k:S>zt^(M<=m[0]&&m[0]<=b)){var E=Ue(p,(-g+y)/d);return Oe(E,h),[m,He(E)]}}}function a(n,r){var i=e?t:zt-t,o=0;return n<-i?o|=1:n>i&&(o|=2),r<-i?o|=4:r>i&&(o|=8),o}}function ur(t,n,e,r){return function(i){var o,a=i.a,u=i.b,l=a.x,c=a.y,s=0,f=1,h=u.x-l,p=u.y-c;if(o=t-l,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<f&&(f=o)}else if(h>0){if(o>f)return;o>s&&(s=o)}if(o=e-l,h||!(o<0)){if(o/=h,h<0){if(o>f)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<f&&(f=o)}if(o=n-c,p||!(o>0)){if(o/=p,p<0){if(o<s)return;o<f&&(f=o)}else if(p>0){if(o>f)return;o>s&&(s=o)}if(o=r-c,p||!(o<0)){if(o/=p,p<0){if(o>f)return;o>s&&(s=o)}else if(p>0){if(o<s)return;o<f&&(f=o)}return s>0&&(i.a={x:l+s*h,y:c+s*p}),f<1&&(i.b={x:l+f*h,y:c+f*p}),i}}}}}}function lr(t,n,e,r){return function(l){var c,s,f,h,p,g,d,v,y,m,x,M=l,b=rr(),w=ur(t,n,e,r),_={point:N,lineStart:function(){_.point=E,s&&s.push(f=[]);m=!0,y=!1,d=v=NaN},lineEnd:function(){c&&(E(h,p),g&&y&&b.rejoin(),c.push(b.buffer()));_.point=N,y&&l.lineEnd()},polygonStart:function(){l=b,c=[],s=[],x=!0},polygonEnd:function(){l=M,c=o.merge(c);var n=function(t){for(var n=0,e=s.length,r=t[1],i=0;i<e;++i)for(var o,a=1,u=s[i],l=u.length,c=u[0];a<l;++a)o=u[a],c[1]<=r?o[1]>r&&Rt(c,o,t)>0&&++n:o[1]<=r&&Rt(c,o,t)<0&&--n,c=o;return 0!==n}([t,r]),e=x&&n,i=c.length;(e||i)&&(l.polygonStart(),e&&(l.lineStart(),k(null,null,1,l),l.lineEnd()),i&&Ge(c,a,n,k,l),l.polygonEnd()),c=s=f=null}};function k(o,a,l,c){var s=0,f=0;if(null==o||(s=i(o,l))!==(f=i(a,l))||u(o,a)<0^l>0)do{c.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+l+4)%4)!==f);else c.point(a[0],a[1])}function S(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function N(t,n){S(t,n)&&l.point(t,n)}function E(t,n){var e=S(t=Math.max(-1e9,Math.min(1e9,t)),n=Math.max(-1e9,Math.min(1e9,n)));if(s&&f.push([t,n]),m)h=t,p=n,g=e,m=!1,e&&(l.lineStart(),l.point(t,n));else if(e&&y)l.point(t,n);else{var r={a:{x:d,y:v},b:{x:t,y:n}};w(r)?(y||(l.lineStart(),l.point(r.a.x,r.a.y)),l.point(r.b.x,r.b.y),e||l.lineEnd(),x=!1):e&&(l.lineStart(),l.point(t,n),x=!1)}d=t,v=n,y=e}return _};function i(r,i){return w(r[0]-t)<At?i>0?0:3:w(r[0]-e)<At?i>0?2:1:w(r[1]-n)<At?i>0?1:0:i>0?3:2}function a(t,n){return u(t.x,n.x)}function u(t,n){var e=i(t,1),r=i(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}}function cr(t){var n=0,e=zt/3,r=Pr(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*zt/180,e=t[1]*zt/180):[n/zt*180,e/zt*180]},i}function sr(t,n){var e=Math.sin(t),r=(e+Math.sin(n))/2,i=1+e*(2*r-e),o=Math.sqrt(i)/r;function a(t,n){var e=Math.sqrt(i-2*r*Math.sin(n))/r;return[e*Math.sin(t*=r),o-e*Math.cos(t)]}return a.invert=function(t,n){var e=o-n;return[Math.atan2(t,e)/r,Ot((i-(t*t+e*e)*r*r)/(2*r))]},a}o.geo.clipExtent=function(){var t,n,e,r,i,o,a={stream:function(t){return i&&(i.valid=!1),(i=o(t)).valid=!0,i},extent:function(u){return arguments.length?(o=lr(t=+u[0][0],n=+u[0][1],e=+u[1][0],r=+u[1][1]),i&&(i.valid=!1,i=null),a):[[t,n],[e,r]]}};return a.extent([[0,0],[960,500]])},(o.geo.conicEqualArea=function(){return cr(sr)}).raw=sr,o.geo.albers=function(){return o.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},o.geo.albersUsa=function(){var t,n,e,r,i=o.geo.albers(),a=o.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),u=o.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(n,e){t=[n,e]}};function c(i){var o=i[0],a=i[1];return t=null,n(o,a),t||(e(o,a),t)||r(o,a),t}return c.invert=function(t){var n=i.scale(),e=i.translate(),r=(t[0]-e[0])/n,o=(t[1]-e[1])/n;return(o>=.12&&o<.234&&r>=-.425&&r<-.214?a:o>=.166&&o<.234&&r>=-.214&&r<-.115?u:i).invert(t)},c.stream=function(t){var n=i.stream(t),e=a.stream(t),r=u.stream(t);return{point:function(t,i){n.point(t,i),e.point(t,i),r.point(t,i)},sphere:function(){n.sphere(),e.sphere(),r.sphere()},lineStart:function(){n.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){n.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){n.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){n.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},c.precision=function(t){return arguments.length?(i.precision(t),a.precision(t),u.precision(t),c):i.precision()},c.scale=function(t){return arguments.length?(i.scale(t),a.scale(.35*t),u.scale(t),c.translate(i.translate())):i.scale()},c.translate=function(t){if(!arguments.length)return i.translate();var o=i.scale(),s=+t[0],f=+t[1];return n=i.translate(t).clipExtent([[s-.455*o,f-.238*o],[s+.455*o,f+.238*o]]).stream(l).point,e=a.translate([s-.307*o,f+.201*o]).clipExtent([[s-.425*o+At,f+.12*o+At],[s-.214*o-At,f+.234*o-At]]).stream(l).point,r=u.translate([s-.205*o,f+.212*o]).clipExtent([[s-.214*o+At,f+.166*o+At],[s-.115*o-At,f+.234*o-At]]).stream(l).point,c},c.scale(1070)};var fr,hr,pr,gr,dr,vr,yr={point:I,lineStart:I,lineEnd:I,polygonStart:function(){hr=0,yr.lineStart=mr},polygonEnd:function(){yr.lineStart=yr.lineEnd=yr.point=I,fr+=w(hr/2)}};function mr(){var t,n,e,r;function i(t,n){hr+=r*t-e*n,e=t,r=n}yr.point=function(o,a){yr.point=i,t=e=o,n=r=a},yr.lineEnd=function(){i(t,n)}}var xr={point:function(t,n){t<pr&&(pr=t);t>dr&&(dr=t);n<gr&&(gr=n);n>vr&&(vr=n)},lineStart:I,lineEnd:I,polygonStart:I,polygonEnd:I};function Mr(){var t=br(4.5),n=[],e={point:r,lineStart:function(){e.point=i},lineEnd:a,polygonStart:function(){e.lineEnd=u},polygonEnd:function(){e.lineEnd=a,e.point=r},pointRadius:function(n){return t=br(n),e},result:function(){if(n.length){var t=n.join("");return n=[],t}}};function r(e,r){n.push("M",e,",",r,t)}function i(t,r){n.push("M",t,",",r),e.point=o}function o(t,e){n.push("L",t,",",e)}function a(){e.point=r}function u(){n.push("Z")}return e}function br(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}var wr,_r={point:kr,lineStart:Sr,lineEnd:Nr,polygonStart:function(){_r.lineStart=Er},polygonEnd:function(){_r.point=kr,_r.lineStart=Sr,_r.lineEnd=Nr}};function kr(t,n){ke+=t,Se+=n,++Ne}function Sr(){var t,n;function e(e,r){var i=e-t,o=r-n,a=Math.sqrt(i*i+o*o);Ee+=a*(t+e)/2,Ae+=a*(n+r)/2,Ce+=a,kr(t=e,n=r)}_r.point=function(r,i){_r.point=e,kr(t=r,n=i)}}function Nr(){_r.point=kr}function Er(){var t,n,e,r;function i(t,n){var i=t-e,o=n-r,a=Math.sqrt(i*i+o*o);Ee+=a*(e+t)/2,Ae+=a*(r+n)/2,Ce+=a,ze+=(a=r*t-e*n)*(e+t),Te+=a*(r+n),Le+=3*a,kr(e=t,r=n)}_r.point=function(o,a){_r.point=i,kr(t=e=o,n=r=a)},_r.lineEnd=function(){i(t,n)}}function Ar(t){var n=4.5,e={point:r,lineStart:function(){e.point=i},lineEnd:a,polygonStart:function(){e.lineEnd=u},polygonEnd:function(){e.lineEnd=a,e.point=r},pointRadius:function(t){return n=t,e},result:I};function r(e,r){t.moveTo(e+n,r),t.arc(e,r,n,0,Tt)}function i(n,r){t.moveTo(n,r),e.point=o}function o(n,e){t.lineTo(n,e)}function a(){e.point=r}function u(){t.closePath()}return e}function Cr(t){var n=.5,e=Math.cos(30*Pt),r=16;function i(t){return(r?a:o)(t)}function o(n){return Lr(n,(function(e,r){e=t(e,r),n.point(e[0],e[1])}))}function a(n){var e,i,o,a,l,c,s,f,h,p,g,d,v={point:y,lineStart:m,lineEnd:M,polygonStart:function(){n.polygonStart(),v.lineStart=b},polygonEnd:function(){n.polygonEnd(),v.lineStart=m}};function y(e,r){e=t(e,r),n.point(e[0],e[1])}function m(){f=NaN,v.point=x,n.lineStart()}function x(e,i){var o=De([e,i]),a=t(e,i);u(f,h,s,p,g,d,f=a[0],h=a[1],s=e,p=o[0],g=o[1],d=o[2],r,n),n.point(f,h)}function M(){v.point=y,n.lineEnd()}function b(){m(),v.point=w,v.lineEnd=_}function w(t,n){x(e=t,n),i=f,o=h,a=p,l=g,c=d,v.point=x}function _(){u(f,h,s,p,g,d,i,o,e,a,l,c,r,n),v.lineEnd=M,M()}return v}function u(r,i,o,a,l,c,s,f,h,p,g,d,v,y){var m=s-r,x=f-i,M=m*m+x*x;if(M>4*n&&v--){var b=a+p,_=l+g,k=c+d,S=Math.sqrt(b*b+_*_+k*k),N=Math.asin(k/=S),E=w(w(k)-1)<At||w(o-h)<At?(o+h)/2:Math.atan2(_,b),A=t(E,N),C=A[0],z=A[1],T=C-r,L=z-i,q=x*T-m*L;(q*q/M>n||w((m*T+x*L)/M-.5)>.3||a*p+l*g+c*d<e)&&(u(r,i,o,a,l,c,C,z,E,b/=S,_/=S,k,v,y),y.point(C,z),u(C,z,E,b,_,k,s,f,h,p,g,d,v,y))}}return i.precision=function(t){return arguments.length?(r=(n=t*t)>0&&16,i):Math.sqrt(n)},i}function zr(t){var n=Cr((function(n,e){return t([n*jt,e*jt])}));return function(t){return jr(n(t))}}function Tr(t){this.stream=t}function Lr(t,n){return{point:n,sphere:function(){t.sphere()},lineStart:function(){t.lineStart()},lineEnd:function(){t.lineEnd()},polygonStart:function(){t.polygonStart()},polygonEnd:function(){t.polygonEnd()}}}function qr(t){return Pr((function(){return t}))()}function Pr(t){var n,e,r,i,a,u,l=Cr((function(t,e){return[(t=n(t,e))[0]*c+i,a-t[1]*c]})),c=150,s=480,f=250,h=0,p=0,g=0,d=0,v=0,y=or,m=P,x=null,M=null;function b(t){return[(t=r(t[0]*Pt,t[1]*Pt))[0]*c+i,a-t[1]*c]}function w(t){return(t=r.invert((t[0]-i)/c,(a-t[1])/c))&&[t[0]*jt,t[1]*jt]}function _(){r=Je(e=Ir(g,d,v),n);var t=n(h,p);return i=s-t[0]*c,a=f+t[1]*c,k()}function k(){return u&&(u.valid=!1,u=null),b}return b.stream=function(t){return u&&(u.valid=!1),(u=jr(y(e,l(m(t))))).valid=!0,u},b.clipAngle=function(t){return arguments.length?(y=null==t?(x=t,or):ar((x=+t)*Pt),k()):x},b.clipExtent=function(t){return arguments.length?(M=t,m=t?lr(t[0][0],t[0][1],t[1][0],t[1][1]):P,k()):M},b.scale=function(t){return arguments.length?(c=+t,_()):c},b.translate=function(t){return arguments.length?(s=+t[0],f=+t[1],_()):[s,f]},b.center=function(t){return arguments.length?(h=t[0]%360*Pt,p=t[1]%360*Pt,_()):[h*jt,p*jt]},b.rotate=function(t){return arguments.length?(g=t[0]%360*Pt,d=t[1]%360*Pt,v=t.length>2?t[2]%360*Pt:0,_()):[g*jt,d*jt,v*jt]},o.rebind(b,l,"precision"),function(){return n=t.apply(this,arguments),b.invert=n.invert&&w,_()}}function jr(t){return Lr(t,(function(n,e){t.point(n*Pt,e*Pt)}))}function Dr(t,n){return[t,n]}function Rr(t,n){return[t>zt?t-Tt:t<-zt?t+Tt:t,n]}function Ir(t,n,e){return t?n||e?Je(Ur(t),Fr(n,e)):Ur(t):n||e?Fr(n,e):Rr}function Or(t){return function(n,e){return[(n+=t)>zt?n-Tt:n<-zt?n+Tt:n,e]}}function Ur(t){var n=Or(t);return n.invert=Or(-t),n}function Fr(t,n){var e=Math.cos(t),r=Math.sin(t),i=Math.cos(n),o=Math.sin(n);function a(t,n){var a=Math.cos(n),u=Math.cos(t)*a,l=Math.sin(t)*a,c=Math.sin(n),s=c*e+u*r;return[Math.atan2(l*i-s*o,u*e-c*r),Ot(s*i+l*o)]}return a.invert=function(t,n){var a=Math.cos(n),u=Math.cos(t)*a,l=Math.sin(t)*a,c=Math.sin(n),s=c*i-l*o;return[Math.atan2(l*i+c*o,u*e+s*r),Ot(s*e-u*r)]},a}function Hr(t,n){var e=Math.cos(t),r=Math.sin(t);return function(i,o,a,u){var l=a*n;null!=i?(i=Yr(e,i),o=Yr(e,o),(a>0?i<o:i>o)&&(i+=a*Tt)):(i=t+a*Tt,o=t-.5*l);for(var c,s=i;a>0?s>o:s<o;s-=l)u.point((c=He([e,-r*Math.cos(s),-r*Math.sin(s)]))[0],c[1])}}function Yr(t,n){var e=De(n);e[0]-=t,Fe(e);var r=It(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-At)%(2*Math.PI)}function Vr(t,n,e){var r=o.range(t,n-At,e).concat(n);return function(t){return r.map((function(n){return[t,n]}))}}function Zr(t,n,e){var r=o.range(t,n-At,e).concat(n);return function(t){return r.map((function(n){return[n,t]}))}}function Br(t){return t.source}function Xr(t){return t.target}o.geo.path=function(){var t,n,e,r,i,a=4.5;function u(t){return t&&("function"==typeof a&&r.pointRadius(+a.apply(this,arguments)),i&&i.valid||(i=e(r)),o.geo.stream(t,i)),r.result()}function l(){return i=null,u}return u.area=function(t){return fr=0,o.geo.stream(t,e(yr)),fr},u.centroid=function(t){return ke=Se=Ne=Ee=Ae=Ce=ze=Te=Le=0,o.geo.stream(t,e(_r)),Le?[ze/Le,Te/Le]:Ce?[Ee/Ce,Ae/Ce]:Ne?[ke/Ne,Se/Ne]:[NaN,NaN]},u.bounds=function(t){return dr=vr=-(pr=gr=1/0),o.geo.stream(t,e(xr)),[[pr,gr],[dr,vr]]},u.projection=function(n){return arguments.length?(e=(t=n)?n.stream||zr(n):P,l()):t},u.context=function(t){return arguments.length?(r=null==(n=t)?new Mr:new Ar(t),"function"!=typeof a&&r.pointRadius(a),l()):n},u.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(r.pointRadius(+t),+t),u):a},u.projection(o.geo.albersUsa()).context(null)},o.geo.transform=function(t){return{stream:function(n){var e=new Tr(n);for(var r in t)e[r]=t[r];return e}}},Tr.prototype={point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},o.geo.projection=qr,o.geo.projectionMutator=Pr,(o.geo.equirectangular=function(){return qr(Dr)}).raw=Dr.invert=Dr,o.geo.rotation=function(t){function n(n){return(n=t(n[0]*Pt,n[1]*Pt))[0]*=jt,n[1]*=jt,n}return t=Ir(t[0]%360*Pt,t[1]*Pt,t.length>2?t[2]*Pt:0),n.invert=function(n){return(n=t.invert(n[0]*Pt,n[1]*Pt))[0]*=jt,n[1]*=jt,n},n},Rr.invert=Dr,o.geo.circle=function(){var t,n,e=[0,0],r=6;function i(){var t="function"==typeof e?e.apply(this,arguments):e,r=Ir(-t[0]*Pt,-t[1]*Pt,0).invert,i=[];return n(null,null,1,{point:function(t,n){i.push(t=r(t,n)),t[0]*=jt,t[1]*=jt}}),{type:"Polygon",coordinates:[i]}}return i.origin=function(t){return arguments.length?(e=t,i):e},i.angle=function(e){return arguments.length?(n=Hr((t=+e)*Pt,r*Pt),i):t},i.precision=function(e){return arguments.length?(n=Hr(t*Pt,(r=+e)*Pt),i):r},i.angle(90)},o.geo.distance=function(t,n){var e,r=(n[0]-t[0])*Pt,i=t[1]*Pt,o=n[1]*Pt,a=Math.sin(r),u=Math.cos(r),l=Math.sin(i),c=Math.cos(i),s=Math.sin(o),f=Math.cos(o);return Math.atan2(Math.sqrt((e=f*a)*e+(e=c*s-l*f*u)*e),l*s+c*f*u)},o.geo.graticule=function(){var t,n,e,r,i,a,u,l,c,s,f,h,p=10,g=p,d=90,v=360,y=2.5;function m(){return{type:"MultiLineString",coordinates:x()}}function x(){return o.range(Math.ceil(r/d)*d,e,d).map(f).concat(o.range(Math.ceil(l/v)*v,u,v).map(h)).concat(o.range(Math.ceil(n/p)*p,t,p).filter((function(t){return w(t%d)>At})).map(c)).concat(o.range(Math.ceil(a/g)*g,i,g).filter((function(t){return w(t%v)>At})).map(s))}return m.lines=function(){return x().map((function(t){return{type:"LineString",coordinates:t}}))},m.outline=function(){return{type:"Polygon",coordinates:[f(r).concat(h(u).slice(1),f(e).reverse().slice(1),h(l).reverse().slice(1))]}},m.extent=function(t){return arguments.length?m.majorExtent(t).minorExtent(t):m.minorExtent()},m.majorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],l=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),l>u&&(t=l,l=u,u=t),m.precision(y)):[[r,l],[e,u]]},m.minorExtent=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],a=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),a>i&&(e=a,a=i,i=e),m.precision(y)):[[n,a],[t,i]]},m.step=function(t){return arguments.length?m.majorStep(t).minorStep(t):m.minorStep()},m.majorStep=function(t){return arguments.length?(d=+t[0],v=+t[1],m):[d,v]},m.minorStep=function(t){return arguments.length?(p=+t[0],g=+t[1],m):[p,g]},m.precision=function(o){return arguments.length?(y=+o,c=Vr(a,i,90),s=Zr(n,t,y),f=Vr(l,u,90),h=Zr(r,e,y),m):y},m.majorExtent([[-180,-90+At],[180,90-At]]).minorExtent([[-180,-80-At],[180,80+At]])},o.geo.greatArc=function(){var t,n,e=Br,r=Xr;function i(){return{type:"LineString",coordinates:[t||e.apply(this,arguments),n||r.apply(this,arguments)]}}return i.distance=function(){return o.geo.distance(t||e.apply(this,arguments),n||r.apply(this,arguments))},i.source=function(n){return arguments.length?(e=n,t="function"==typeof n?null:n,i):e},i.target=function(t){return arguments.length?(r=t,n="function"==typeof t?null:t,i):r},i.precision=function(){return arguments.length?i:0},i},o.geo.interpolate=function(t,n){return e=t[0]*Pt,r=t[1]*Pt,i=n[0]*Pt,o=n[1]*Pt,a=Math.cos(r),u=Math.sin(r),l=Math.cos(o),c=Math.sin(o),s=a*Math.cos(e),f=a*Math.sin(e),h=l*Math.cos(i),p=l*Math.sin(i),g=2*Math.asin(Math.sqrt(Ft(o-r)+a*l*Ft(i-e))),d=1/Math.sin(g),(v=g?function(t){var n=Math.sin(t*=g)*d,e=Math.sin(g-t)*d,r=e*s+n*h,i=e*f+n*p,o=e*u+n*c;return[Math.atan2(i,r)*jt,Math.atan2(o,Math.sqrt(r*r+i*i))*jt]}:function(){return[e*jt,r*jt]}).distance=g,v;var e,r,i,o,a,u,l,c,s,f,h,p,g,d,v},o.geo.length=function(t){return wr=0,o.geo.stream(t,$r),wr};var $r={sphere:I,point:I,lineStart:function(){var t,n,e;function r(r,i){var o=Math.sin(i*=Pt),a=Math.cos(i),u=w((r*=Pt)-t),l=Math.cos(u);wr+=Math.atan2(Math.sqrt((u=a*Math.sin(u))*u+(u=e*o-n*a*l)*u),n*o+e*a*l),t=r,n=o,e=a}$r.point=function(i,o){t=i*Pt,n=Math.sin(o*=Pt),e=Math.cos(o),$r.point=r},$r.lineEnd=function(){$r.point=$r.lineEnd=I}},lineEnd:I,polygonStart:I,polygonEnd:I};function Wr(t,n){function e(n,e){var r=Math.cos(n),i=Math.cos(e),o=t(r*i);return[o*i*Math.sin(n),o*Math.sin(e)]}return e.invert=function(t,e){var r=Math.sqrt(t*t+e*e),i=n(r),o=Math.sin(i),a=Math.cos(i);return[Math.atan2(t*o,r*a),Math.asin(r&&e*o/r)]},e}var Jr=Wr((function(t){return Math.sqrt(2/(1+t))}),(function(t){return 2*Math.asin(t/2)}));(o.geo.azimuthalEqualArea=function(){return qr(Jr)}).raw=Jr;var Qr=Wr((function(t){var n=Math.acos(t);return n&&n/Math.sin(n)}),P);function Gr(t,n){var e=Math.cos(t),r=function(t){return Math.tan(zt/4+t/2)},i=t===n?Math.sin(t):Math.log(e/Math.cos(n))/Math.log(r(n)/r(t)),o=e*Math.pow(r(t),i)/i;if(!i)return ni;function a(t,n){o>0?n<-qt+At&&(n=-qt+At):n>qt-At&&(n=qt-At);var e=o/Math.pow(r(n),i);return[e*Math.sin(i*t),o-e*Math.cos(i*t)]}return a.invert=function(t,n){var e=o-n,r=Dt(i)*Math.sqrt(t*t+e*e);return[Math.atan2(t,e)/i,2*Math.atan(Math.pow(o/r,1/i))-qt]},a}function Kr(t,n){var e=Math.cos(t),r=t===n?Math.sin(t):(e-Math.cos(n))/(n-t),i=e/r+t;if(w(r)<At)return Dr;function o(t,n){var e=i-n;return[e*Math.sin(r*t),i-e*Math.cos(r*t)]}return o.invert=function(t,n){var e=i-n;return[Math.atan2(t,e)/r,i-Dt(r)*Math.sqrt(t*t+e*e)]},o}(o.geo.azimuthalEquidistant=function(){return qr(Qr)}).raw=Qr,(o.geo.conicConformal=function(){return cr(Gr)}).raw=Gr,(o.geo.conicEquidistant=function(){return cr(Kr)}).raw=Kr;var ti=Wr((function(t){return 1/t}),Math.atan);function ni(t,n){return[t,Math.log(Math.tan(zt/4+n/2))]}function ei(t){var n,e=qr(t),r=e.scale,i=e.translate,o=e.clipExtent;return e.scale=function(){var t=r.apply(e,arguments);return t===e?n?e.clipExtent(null):e:t},e.translate=function(){var t=i.apply(e,arguments);return t===e?n?e.clipExtent(null):e:t},e.clipExtent=function(t){var a=o.apply(e,arguments);if(a===e){if(n=null==t){var u=zt*r(),l=i();o([[l[0]-u,l[1]-u],[l[0]+u,l[1]+u]])}}else n&&(a=null);return a},e.clipExtent(null)}(o.geo.gnomonic=function(){return qr(ti)}).raw=ti,ni.invert=function(t,n){return[t,2*Math.atan(Math.exp(n))-qt]},(o.geo.mercator=function(){return ei(ni)}).raw=ni;var ri=Wr((function(){return 1}),Math.asin);(o.geo.orthographic=function(){return qr(ri)}).raw=ri;var ii=Wr((function(t){return 1/(1+t)}),(function(t){return 2*Math.atan(t)}));function oi(t,n){return[Math.log(Math.tan(zt/4+n/2)),-t]}function ai(t){return t[0]}function ui(t){return t[1]}function li(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;i++){for(;r>1&&Rt(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function ci(t,n){return t[0]-n[0]||t[1]-n[1]}(o.geo.stereographic=function(){return qr(ii)}).raw=ii,oi.invert=function(t,n){return[-n,2*Math.atan(Math.exp(t))-qt]},(o.geo.transverseMercator=function(){var t=ei(oi),n=t.center,e=t.rotate;return t.center=function(t){return t?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return t?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90])}).raw=oi,o.geom={},o.geom.hull=function(t){var n=ai,e=ui;if(arguments.length)return r(t);function r(t){if(t.length<3)return[];var r,i=xn(n),o=xn(e),a=t.length,u=[],l=[];for(r=0;r<a;r++)u.push([+i.call(this,t[r],r),+o.call(this,t[r],r),r]);for(u.sort(ci),r=0;r<a;r++)l.push([u[r][0],-u[r][1]]);var c=li(u),s=li(l),f=s[0]===c[0],h=s[s.length-1]===c[c.length-1],p=[];for(r=c.length-1;r>=0;--r)p.push(t[u[c[r]][2]]);for(r=+f;r<s.length-h;++r)p.push(t[u[s[r]][2]]);return p}return r.x=function(t){return arguments.length?(n=t,r):n},r.y=function(t){return arguments.length?(e=t,r):e},r},o.geom.polygon=function(t){return Z(t,si),t};var si=o.geom.polygon.prototype=[];function fi(t,n,e){return(e[0]-n[0])*(t[1]-n[1])<(e[1]-n[1])*(t[0]-n[0])}function hi(t,n,e,r){var i=t[0],o=e[0],a=n[0]-i,u=r[0]-o,l=t[1],c=e[1],s=n[1]-l,f=r[1]-c,h=(u*(l-c)-f*(i-o))/(f*a-u*s);return[i+h*a,l+h*s]}function pi(t){var n=t[0],e=t[t.length-1];return!(n[0]-e[0]||n[1]-e[1])}si.area=function(){for(var t,n=-1,e=this.length,r=this[e-1],i=0;++n<e;)t=r,r=this[n],i+=t[1]*r[0]-t[0]*r[1];return.5*i},si.centroid=function(t){var n,e,r=-1,i=this.length,o=0,a=0,u=this[i-1];for(arguments.length||(t=-1/(6*this.area()));++r<i;)n=u,u=this[r],e=n[0]*u[1]-u[0]*n[1],o+=(n[0]+u[0])*e,a+=(n[1]+u[1])*e;return[o*t,a*t]},si.clip=function(t){for(var n,e,r,i,o,a,u=pi(t),l=-1,c=this.length-pi(this),s=this[c-1];++l<c;){for(n=t.slice(),t.length=0,i=this[l],o=n[(r=n.length-u)-1],e=-1;++e<r;)fi(a=n[e],s,i)?(fi(o,s,i)||t.push(hi(o,a,s,i)),t.push(a)):fi(o,s,i)&&t.push(hi(o,a,s,i)),o=a;u&&t.push(t[0]),s=i}return t};var gi,di,vi,yi,mi,xi=[],Mi=[];function bi(){Ui(this),this.edge=this.site=this.circle=null}function wi(t){var n=xi.pop()||new bi;return n.site=t,n}function _i(t){Li(t),vi.remove(t),xi.push(t),Ui(t)}function ki(t){var n=t.circle,e=n.x,r=n.cy,i={x:e,y:r},o=t.P,a=t.N,u=[t];_i(t);for(var l=o;l.circle&&w(e-l.circle.x)<At&&w(r-l.circle.cy)<At;)o=l.P,u.unshift(l),_i(l),l=o;u.unshift(l),Li(l);for(var c=a;c.circle&&w(e-c.circle.x)<At&&w(r-c.circle.cy)<At;)a=c.N,u.push(c),_i(c),c=a;u.push(c),Li(c);var s,f=u.length;for(s=1;s<f;++s)c=u[s],l=u[s-1],Ri(c.edge,l.site,c.site,i);l=u[0],(c=u[f-1]).edge=ji(l.site,c.site,null,i),Ti(l),Ti(c)}function Si(t){for(var n,e,r,i,o=t.x,a=t.y,u=vi._;u;)if((r=Ni(u,a)-o)>At)u=u.L;else{if(!((i=o-Ei(u,a))>At)){r>-At?(n=u.P,e=u):i>-At?(n=u,e=u.N):n=e=u;break}if(!u.R){n=u;break}u=u.R}var l=wi(t);if(vi.insert(n,l),n||e){if(n===e)return Li(n),e=wi(n.site),vi.insert(l,e),l.edge=e.edge=ji(n.site,l.site),Ti(n),void Ti(e);if(e){Li(n),Li(e);var c=n.site,s=c.x,f=c.y,h=t.x-s,p=t.y-f,g=e.site,d=g.x-s,v=g.y-f,y=2*(h*v-p*d),m=h*h+p*p,x=d*d+v*v,M={x:(v*m-p*x)/y+s,y:(h*x-d*m)/y+f};Ri(e.edge,c,g,M),l.edge=ji(c,t,null,M),e.edge=ji(t,g,null,M),Ti(n),Ti(e)}else l.edge=ji(n.site,l.site)}}function Ni(t,n){var e=t.site,r=e.x,i=e.y,o=i-n;if(!o)return r;var a=t.P;if(!a)return-1/0;var u=(e=a.site).x,l=e.y,c=l-n;if(!c)return u;var s=u-r,f=1/o-1/c,h=s/c;return f?(-h+Math.sqrt(h*h-2*f*(s*s/(-2*c)-l+c/2+i-o/2)))/f+r:(r+u)/2}function Ei(t,n){var e=t.N;if(e)return Ni(e,n);var r=t.site;return r.y===n?r.x:1/0}function Ai(t){this.site=t,this.edges=[]}function Ci(t,n){return n.angle-t.angle}function zi(){Ui(this),this.x=this.y=this.arc=this.site=this.cy=null}function Ti(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var a=i.x,u=i.y,l=r.x-a,c=r.y-u,s=o.x-a,f=2*(l*(v=o.y-u)-c*s);if(!(f>=-Ct)){var h=l*l+c*c,p=s*s+v*v,g=(v*h-c*p)/f,d=(l*p-s*h)/f,v=d+u,y=Mi.pop()||new zi;y.arc=t,y.site=i,y.x=g+a,y.y=v+Math.sqrt(g*g+d*d),y.cy=v,t.circle=y;for(var m=null,x=mi._;x;)if(y.y<x.y||y.y===x.y&&y.x<=x.x){if(!x.L){m=x.P;break}x=x.L}else{if(!x.R){m=x;break}x=x.R}mi.insert(m,y),m||(yi=y)}}}}function Li(t){var n=t.circle;n&&(n.P||(yi=n.N),mi.remove(n),Mi.push(n),Ui(n),t.circle=null)}function qi(t,n){var e=t.b;if(e)return!0;var r,i,o=t.a,a=n[0][0],u=n[1][0],l=n[0][1],c=n[1][1],s=t.l,f=t.r,h=s.x,p=s.y,g=f.x,d=f.y,v=(h+g)/2,y=(p+d)/2;if(d===p){if(v<a||v>=u)return;if(h>g){if(o){if(o.y>=c)return}else o={x:v,y:l};e={x:v,y:c}}else{if(o){if(o.y<l)return}else o={x:v,y:c};e={x:v,y:l}}}else if(i=y-(r=(h-g)/(d-p))*v,r<-1||r>1)if(h>g){if(o){if(o.y>=c)return}else o={x:(l-i)/r,y:l};e={x:(c-i)/r,y:c}}else{if(o){if(o.y<l)return}else o={x:(c-i)/r,y:c};e={x:(l-i)/r,y:l}}else if(p<d){if(o){if(o.x>=u)return}else o={x:a,y:r*a+i};e={x:u,y:r*u+i}}else{if(o){if(o.x<a)return}else o={x:u,y:r*u+i};e={x:a,y:r*a+i}}return t.a=o,t.b=e,!0}function Pi(t,n){this.l=t,this.r=n,this.a=this.b=null}function ji(t,n,e,r){var i=new Pi(t,n);return gi.push(i),e&&Ri(i,t,n,e),r&&Ri(i,n,t,r),di[t.i].edges.push(new Ii(i,t,n)),di[n.i].edges.push(new Ii(i,n,t)),i}function Di(t,n,e){var r=new Pi(t,null);return r.a=n,r.b=e,gi.push(r),r}function Ri(t,n,e,r){t.a||t.b?t.l===e?t.b=r:t.a=r:(t.a=r,t.l=n,t.r=e)}function Ii(t,n,e){var r=t.a,i=t.b;this.edge=t,this.site=n,this.angle=e?Math.atan2(e.y-n.y,e.x-n.x):t.l===n?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function Oi(){this._=null}function Ui(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function Fi(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function Hi(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function Yi(t){for(;t.L;)t=t.L;return t}function Vi(t,n){var e,r,i,o=t.sort(Zi).pop();for(gi=[],di=new Array(t.length),vi=new Oi,mi=new Oi;;)if(i=yi,o&&(!i||o.y<i.y||o.y===i.y&&o.x<i.x))o.x===e&&o.y===r||(di[o.i]=new Ai(o),Si(o),e=o.x,r=o.y),o=t.pop();else{if(!i)break;ki(i.arc)}n&&(function(t){for(var n,e=gi,r=ur(t[0][0],t[0][1],t[1][0],t[1][1]),i=e.length;i--;)(!qi(n=e[i],t)||!r(n)||w(n.a.x-n.b.x)<At&&w(n.a.y-n.b.y)<At)&&(n.a=n.b=null,e.splice(i,1))}(n),function(t){for(var n,e,r,i,o,a,u,l,c,s,f=t[0][0],h=t[1][0],p=t[0][1],g=t[1][1],d=di,v=d.length;v--;)if((o=d[v])&&o.prepare())for(l=(u=o.edges).length,a=0;a<l;)r=(s=u[a].end()).x,i=s.y,n=(c=u[++a%l].start()).x,e=c.y,(w(r-n)>At||w(i-e)>At)&&(u.splice(a,0,new Ii(Di(o.site,s,w(r-f)<At&&g-i>At?{x:f,y:w(n-f)<At?e:g}:w(i-g)<At&&h-r>At?{x:w(e-g)<At?n:h,y:g}:w(r-h)<At&&i-p>At?{x:h,y:w(n-h)<At?e:p}:w(i-p)<At&&r-f>At?{x:w(e-p)<At?n:f,y:p}:null),o.site,null)),++l)}(n));var a={cells:di,edges:gi};return vi=mi=gi=di=null,a}function Zi(t,n){return n.y-t.y||n.x-t.x}Ai.prototype.prepare=function(){for(var t,n=this.edges,e=n.length;e--;)(t=n[e].edge).b&&t.a||n.splice(e,1);return n.sort(Ci),n.length},Ii.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},Oi.prototype={insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=Yi(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(Fi(this,e),e=(t=e).U),e.C=!1,r.C=!0,Hi(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(Hi(this,e),e=(t=e).U),e.C=!1,r.C=!0,Fi(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,a=t.R;if(e=o?a?Yi(a):o:a,i?i.L===t?i.L=e:i.R=e:this._=e,o&&a?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==a?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=a,a.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,Fi(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,Hi(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,Fi(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,Hi(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,Fi(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,Hi(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}},o.geom.voronoi=function(t){var n=ai,e=ui,r=n,i=e,o=Bi;if(t)return a(t);function a(t){var n=new Array(t.length),e=o[0][0],r=o[0][1],i=o[1][0],a=o[1][1];return Vi(u(t),o).cells.forEach((function(o,u){var l=o.edges,c=o.site;(n[u]=l.length?l.map((function(t){var n=t.start();return[n.x,n.y]})):c.x>=e&&c.x<=i&&c.y>=r&&c.y<=a?[[e,a],[i,a],[i,r],[e,r]]:[]).point=t[u]})),n}function u(t){return t.map((function(t,n){return{x:Math.round(r(t,n)/At)*At,y:Math.round(i(t,n)/At)*At,i:n}}))}return a.links=function(t){return Vi(u(t)).edges.filter((function(t){return t.l&&t.r})).map((function(n){return{source:t[n.l.i],target:t[n.r.i]}}))},a.triangles=function(t){var n=[];return Vi(u(t)).cells.forEach((function(e,r){for(var i,o,a,u,l=e.site,c=e.edges.sort(Ci),s=-1,f=c.length,h=c[f-1].edge,p=h.l===l?h.r:h.l;++s<f;)h,i=p,p=(h=c[s].edge).l===l?h.r:h.l,r<i.i&&r<p.i&&(a=i,u=p,((o=l).x-u.x)*(a.y-o.y)-(o.x-a.x)*(u.y-o.y)<0)&&n.push([t[r],t[i.i],t[p.i]])})),n},a.x=function(t){return arguments.length?(r=xn(n=t),a):n},a.y=function(t){return arguments.length?(i=xn(e=t),a):e},a.clipExtent=function(t){return arguments.length?(o=null==t?Bi:t,a):o===Bi?null:o},a.size=function(t){return arguments.length?a.clipExtent(t&&[[0,0],t]):o===Bi?null:o&&o[1]},a};var Bi=[[-1e6,-1e6],[1e6,1e6]];function Xi(t){return t.x}function $i(t){return t.y}function Wi(t,n,e,r,i,o){if(!t(n,e,r,i,o)){var a=.5*(e+i),u=.5*(r+o),l=n.nodes;l[0]&&Wi(t,l[0],e,r,a,u),l[1]&&Wi(t,l[1],a,r,i,u),l[2]&&Wi(t,l[2],e,u,a,o),l[3]&&Wi(t,l[3],a,u,i,o)}}function Ji(t,n,e,r,i,o,a){var u,l=1/0;return function t(c,s,f,h,p){if(!(s>o||f>a||h<r||p<i)){if(g=c.point){var g,d=n-c.x,v=e-c.y,y=d*d+v*v;if(y<l){var m=Math.sqrt(l=y);r=n-m,i=e-m,o=n+m,a=e+m,u=g}}for(var x=c.nodes,M=.5*(s+h),b=.5*(f+p),w=(e>=b)<<1|n>=M,_=w+4;w<_;++w)if(c=x[3&w])switch(3&w){case 0:t(c,s,f,M,b);break;case 1:t(c,M,f,h,b);break;case 2:t(c,s,b,M,p);break;case 3:t(c,M,b,h,p)}}}(t,r,i,o,a),u}function Qi(t,n){t=o.rgb(t),n=o.rgb(n);var e=t.r,r=t.g,i=t.b,a=n.r-e,u=n.g-r,l=n.b-i;return function(t){return"#"+hn(Math.round(e+a*t))+hn(Math.round(r+u*t))+hn(Math.round(i+l*t))}}function Gi(t,n){var e,r={},i={};for(e in t)e in n?r[e]=ro(t[e],n[e]):i[e]=t[e];for(e in n)e in t||(i[e]=n[e]);return function(t){for(e in r)i[e]=r[e](t);return i}}function Ki(t,n){return t=+t,n=+n,function(e){return t*(1-e)+n*e}}function to(t,n){var e,r,i,o=no.lastIndex=eo.lastIndex=0,a=-1,u=[],l=[];for(t+="",n+="";(e=no.exec(t))&&(r=eo.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,l.push({i:a,x:Ki(e,r)})),o=eo.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?l[0]?(n=l[0].x,function(t){return n(t)+""}):function(){return n}:(n=l.length,function(t){for(var e,r=0;r<n;++r)u[(e=l[r]).i]=e.x(t);return u.join("")})}o.geom.delaunay=function(t){return o.geom.voronoi().triangles(t)},o.geom.quadtree=function(t,n,e,r,i){var o,a=ai,u=ui;if(o=arguments.length)return a=Xi,u=$i,3===o&&(i=e,r=n,e=n=0),l(t);function l(t){var l,c,s,f,h,p,g,d,v,y=xn(a),m=xn(u);if(null!=n)p=n,g=e,d=r,v=i;else if(d=v=-(p=g=1/0),c=[],s=[],h=t.length,o)for(f=0;f<h;++f)(l=t[f]).x<p&&(p=l.x),l.y<g&&(g=l.y),l.x>d&&(d=l.x),l.y>v&&(v=l.y),c.push(l.x),s.push(l.y);else for(f=0;f<h;++f){var x=+y(l=t[f],f),M=+m(l,f);x<p&&(p=x),M<g&&(g=M),x>d&&(d=x),M>v&&(v=M),c.push(x),s.push(M)}var b=d-p,_=v-g;function k(t,n,e,r,i,o,a,u){if(!isNaN(e)&&!isNaN(r))if(t.leaf){var l=t.x,c=t.y;if(null!=l)if(w(l-e)+w(c-r)<.01)S(t,n,e,r,i,o,a,u);else{var s=t.point;t.x=t.y=t.point=null,S(t,s,l,c,i,o,a,u),S(t,n,e,r,i,o,a,u)}else t.x=e,t.y=r,t.point=n}else S(t,n,e,r,i,o,a,u)}function S(t,n,e,r,i,o,a,u){var l=.5*(i+a),c=.5*(o+u),s=e>=l,f=r>=c,h=f<<1|s;t.leaf=!1,s?i=l:a=l,f?o=c:u=c,k(t=t.nodes[h]||(t.nodes[h]={leaf:!0,nodes:[],point:null,x:null,y:null}),n,e,r,i,o,a,u)}b>_?v=g+b:d=p+_;var N={leaf:!0,nodes:[],point:null,x:null,y:null,add:function(t){k(N,t,+y(t,++f),+m(t,f),p,g,d,v)},visit:function(t){Wi(t,N,p,g,d,v)},find:function(t){return Ji(N,t[0],t[1],p,g,d,v)}};if(f=-1,null==n){for(;++f<h;)k(N,t[f],c[f],s[f],p,g,d,v);--f}else t.forEach(N.add);return c=s=t=l=null,N}return l.x=function(t){return arguments.length?(a=t,l):a},l.y=function(t){return arguments.length?(u=t,l):u},l.extent=function(t){return arguments.length?(null==t?n=e=r=i=null:(n=+t[0][0],e=+t[0][1],r=+t[1][0],i=+t[1][1]),l):null==n?null:[[n,e],[r,i]]},l.size=function(t){return arguments.length?(null==t?n=e=r=i=null:(n=e=0,r=+t[0],i=+t[1]),l):null==n?null:[r-n,i-e]},l},o.interpolateRgb=Qi,o.interpolateObject=Gi,o.interpolateNumber=Ki,o.interpolateString=to;var no=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,eo=new RegExp(no.source,"g");function ro(t,n){for(var e,r=o.interpolators.length;--r>=0&&!(e=o.interpolators[r](t,n)););return e}function io(t,n){var e,r=[],i=[],o=t.length,a=n.length,u=Math.min(t.length,n.length);for(e=0;e<u;++e)r.push(ro(t[e],n[e]));for(;e<o;++e)i[e]=t[e];for(;e<a;++e)i[e]=n[e];return function(t){for(e=0;e<u;++e)i[e]=r[e](t);return i}}o.interpolate=ro,o.interpolators=[function(t,n){var e=typeof n;return("string"===e?mn.has(n.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(n)?Qi:to:n instanceof Bt?Qi:Array.isArray(n)?io:"object"===e&&isNaN(n)?Gi:Ki)(t,n)}],o.interpolateArray=io;var oo=function(){return P},ao=o.map({linear:oo,poly:function(t){return function(n){return Math.pow(n,t)}},quad:function(){return fo},cubic:function(){return ho},sin:function(){return go},exp:function(){return vo},circle:function(){return yo},elastic:function(t,n){var e;arguments.length<2&&(n=.45);arguments.length?e=n/Tt*Math.asin(1/t):(t=1,e=n/4);return function(r){return 1+t*Math.pow(2,-10*r)*Math.sin((r-e)*Tt/n)}},back:function(t){t||(t=1.70158);return function(n){return n*n*((t+1)*n-t)}},bounce:function(){return mo}}),uo=o.map({in:P,out:co,"in-out":so,"out-in":function(t){return so(co(t))}});function lo(t){return function(n){return n<=0?0:n>=1?1:t(n)}}function co(t){return function(n){return 1-t(1-n)}}function so(t){return function(n){return.5*(n<.5?t(2*n):2-t(2-2*n))}}function fo(t){return t*t}function ho(t){return t*t*t}function po(t){if(t<=0)return 0;if(t>=1)return 1;var n=t*t,e=n*t;return 4*(t<.5?e:3*(t-n)+e-.75)}function go(t){return 1-Math.cos(t*qt)}function vo(t){return Math.pow(2,10*(t-1))}function yo(t){return 1-Math.sqrt(1-t*t)}function mo(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375}function xo(t,n){return n-=t,function(e){return Math.round(t+n*e)}}function Mo(t){var n,e,r,i=[t.a,t.b],o=[t.c,t.d],a=wo(i),u=bo(i,o),l=wo(((n=o)[0]+=(r=-u)*(e=i)[0],n[1]+=r*e[1],n))||0;i[0]*o[1]<o[0]*i[1]&&(i[0]*=-1,i[1]*=-1,a*=-1,u*=-1),this.rotate=(a?Math.atan2(i[1],i[0]):Math.atan2(-o[0],o[1]))*jt,this.translate=[t.e,t.f],this.scale=[a,l],this.skew=l?Math.atan2(u,l)*jt:0}function bo(t,n){return t[0]*n[0]+t[1]*n[1]}function wo(t){var n=Math.sqrt(bo(t,t));return n&&(t[0]/=n,t[1]/=n),n}o.ease=function(t){var n=t.indexOf("-"),e=n>=0?t.slice(0,n):t,r=n>=0?t.slice(n+1):"in";return e=ao.get(e)||oo,lo((r=uo.get(r)||P)(e.apply(null,a.call(arguments,1))))},o.interpolateHcl=function(t,n){t=o.hcl(t),n=o.hcl(n);var e=t.h,r=t.c,i=t.l,a=n.h-e,u=n.c-r,l=n.l-i;isNaN(u)&&(u=0,r=isNaN(r)?n.c:r);isNaN(a)?(a=0,e=isNaN(e)?n.h:e):a>180?a-=360:a<-180&&(a+=360);return function(t){return Gt(e+a*t,r+u*t,i+l*t)+""}},o.interpolateHsl=function(t,n){t=o.hsl(t),n=o.hsl(n);var e=t.h,r=t.s,i=t.l,a=n.h-e,u=n.s-r,l=n.l-i;isNaN(u)&&(u=0,r=isNaN(r)?n.s:r);isNaN(a)?(a=0,e=isNaN(e)?n.h:e):a>180?a-=360:a<-180&&(a+=360);return function(t){return Wt(e+a*t,r+u*t,i+l*t)+""}},o.interpolateLab=function(t,n){t=o.lab(t),n=o.lab(n);var e=t.l,r=t.a,i=t.b,a=n.l-e,u=n.a-r,l=n.b-i;return function(t){return en(e+a*t,r+u*t,i+l*t)+""}},o.interpolateRound=xo,o.transform=function(t){var n=l.createElementNS(o.ns.prefix.svg,"g");return(o.transform=function(t){if(null!=t){n.setAttribute("transform",t);var e=n.transform.baseVal.consolidate()}return new Mo(e?e.matrix:_o)})(t)},Mo.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var _o={a:1,b:0,c:0,d:1,e:0,f:0};function ko(t){return t.length?t.pop()+",":""}function So(t,n){var e=[],r=[];return t=o.transform(t),n=o.transform(n),function(t,n,e,r){if(t[0]!==n[0]||t[1]!==n[1]){var i=e.push("translate(",null,",",null,")");r.push({i:i-4,x:Ki(t[0],n[0])},{i:i-2,x:Ki(t[1],n[1])})}else(n[0]||n[1])&&e.push("translate("+n+")")}(t.translate,n.translate,e,r),function(t,n,e,r){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),r.push({i:e.push(ko(e)+"rotate(",null,")")-2,x:Ki(t,n)})):n&&e.push(ko(e)+"rotate("+n+")")}(t.rotate,n.rotate,e,r),function(t,n,e,r){t!==n?r.push({i:e.push(ko(e)+"skewX(",null,")")-2,x:Ki(t,n)}):n&&e.push(ko(e)+"skewX("+n+")")}(t.skew,n.skew,e,r),function(t,n,e,r){if(t[0]!==n[0]||t[1]!==n[1]){var i=e.push(ko(e)+"scale(",null,",",null,")");r.push({i:i-4,x:Ki(t[0],n[0])},{i:i-2,x:Ki(t[1],n[1])})}else 1===n[0]&&1===n[1]||e.push(ko(e)+"scale("+n+")")}(t.scale,n.scale,e,r),t=n=null,function(t){for(var n,i=-1,o=r.length;++i<o;)e[(n=r[i]).i]=n.x(t);return e.join("")}}function No(t,n){return n=(n-=t=+t)||1/n,function(e){return(e-t)/n}}function Eo(t,n){return n=(n-=t=+t)||1/n,function(e){return Math.max(0,Math.min(1,(e-t)/n))}}function Ao(t){for(var n=t.source,e=t.target,r=function(t,n){if(t===n)return t;var e=Co(t),r=Co(n),i=e.pop(),o=r.pop(),a=null;for(;i===o;)a=i,i=e.pop(),o=r.pop();return a}(n,e),i=[n];n!==r;)n=n.parent,i.push(n);for(var o=i.length;e!==r;)i.splice(o,0,e),e=e.parent;return i}function Co(t){for(var n=[],e=t.parent;null!=e;)n.push(t),t=e,e=e.parent;return n.push(t),n}function zo(t){t.fixed|=2}function To(t){t.fixed&=-7}function Lo(t){t.fixed|=4,t.px=t.x,t.py=t.y}function qo(t){t.fixed&=-5}o.interpolateTransform=So,o.layout={},o.layout.bundle=function(){return function(t){for(var n=[],e=-1,r=t.length;++e<r;)n.push(Ao(t[e]));return n}},o.layout.chord=function(){var t,n,e,r,i,a,u,l={},c=0;function s(){var l,s,h,p,g,d={},v=[],y=o.range(r),m=[];for(t=[],n=[],l=0,p=-1;++p<r;){for(s=0,g=-1;++g<r;)s+=e[p][g];v.push(s),m.push(o.range(r)),l+=s}for(i&&y.sort((function(t,n){return i(v[t],v[n])})),a&&m.forEach((function(t,n){t.sort((function(t,r){return a(e[n][t],e[n][r])}))})),l=(Tt-c*r)/l,s=0,p=-1;++p<r;){for(h=s,g=-1;++g<r;){var x=y[p],M=m[x][g],b=e[x][M],w=s,_=s+=b*l;d[x+"-"+M]={index:x,subindex:M,startAngle:w,endAngle:_,value:b}}n[x]={index:x,startAngle:h,endAngle:s,value:v[x]},s+=c}for(p=-1;++p<r;)for(g=p-1;++g<r;){var k=d[p+"-"+g],S=d[g+"-"+p];(k.value||S.value)&&t.push(k.value<S.value?{source:S,target:k}:{source:k,target:S})}u&&f()}function f(){t.sort((function(t,n){return u((t.source.value+t.target.value)/2,(n.source.value+n.target.value)/2)}))}return l.matrix=function(i){return arguments.length?(r=(e=i)&&e.length,t=n=null,l):e},l.padding=function(e){return arguments.length?(c=e,t=n=null,l):c},l.sortGroups=function(e){return arguments.length?(i=e,t=n=null,l):i},l.sortSubgroups=function(n){return arguments.length?(a=n,t=null,l):a},l.sortChords=function(n){return arguments.length?(u=n,t&&f(),l):u},l.chords=function(){return t||s(),t},l.groups=function(){return n||s(),n},l},o.layout.force=function(){var t,n,e,r,i,a,u={},l=o.dispatch("start","tick","end"),c=[1,1],s=.9,f=Po,h=jo,p=-30,g=Do,d=.1,v=.64,y=[],m=[];function x(t){return function(n,e,r,i){if(n.point!==t){var o=n.cx-t.x,a=n.cy-t.y,u=i-e,l=o*o+a*a;if(u*u/v<l){if(l<g){var c=n.charge/l;t.px-=o*c,t.py-=a*c}return!0}if(n.point&&l&&l<g){c=n.pointCharge/l;t.px-=o*c,t.py-=a*c}}return!n.charge}}function M(t){t.px=o.event.x,t.py=o.event.y,u.resume()}return u.tick=function(){if((e*=.99)<.005)return t=null,l.end({type:"end",alpha:e=0}),!0;var n,u,f,h,g,v,M,b,w,_=y.length,k=m.length;for(u=0;u<k;++u)h=(f=m[u]).source,(v=(b=(g=f.target).x-h.x)*b+(w=g.y-h.y)*w)&&(b*=v=e*i[u]*((v=Math.sqrt(v))-r[u])/v,w*=v,g.x-=b*(M=h.weight+g.weight?h.weight/(h.weight+g.weight):.5),g.y-=w*M,h.x+=b*(M=1-M),h.y+=w*M);if((M=e*d)&&(b=c[0]/2,w=c[1]/2,u=-1,M))for(;++u<_;)(f=y[u]).x+=(b-f.x)*M,f.y+=(w-f.y)*M;if(p)for(!function t(n,e,r){var i=0,o=0;if(n.charge=0,!n.leaf)for(var a,u=n.nodes,l=u.length,c=-1;++c<l;)null!=(a=u[c])&&(t(a,e,r),n.charge+=a.charge,i+=a.charge*a.cx,o+=a.charge*a.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var s=e*r[n.point.index];n.charge+=n.pointCharge=s,i+=s*n.point.x,o+=s*n.point.y}n.cx=i/n.charge,n.cy=o/n.charge}(n=o.geom.quadtree(y),e,a),u=-1;++u<_;)(f=y[u]).fixed||n.visit(x(f));for(u=-1;++u<_;)(f=y[u]).fixed?(f.x=f.px,f.y=f.py):(f.x-=(f.px-(f.px=f.x))*s,f.y-=(f.py-(f.py=f.y))*s);l.tick({type:"tick",alpha:e})},u.nodes=function(t){return arguments.length?(y=t,u):y},u.links=function(t){return arguments.length?(m=t,u):m},u.size=function(t){return arguments.length?(c=t,u):c},u.linkDistance=function(t){return arguments.length?(f="function"==typeof t?t:+t,u):f},u.distance=u.linkDistance,u.linkStrength=function(t){return arguments.length?(h="function"==typeof t?t:+t,u):h},u.friction=function(t){return arguments.length?(s=+t,u):s},u.charge=function(t){return arguments.length?(p="function"==typeof t?t:+t,u):p},u.chargeDistance=function(t){return arguments.length?(g=t*t,u):Math.sqrt(g)},u.gravity=function(t){return arguments.length?(d=+t,u):d},u.theta=function(t){return arguments.length?(v=t*t,u):Math.sqrt(v)},u.alpha=function(n){return arguments.length?(n=+n,e?n>0?e=n:(t.c=null,t.t=NaN,t=null,l.end({type:"end",alpha:e=0})):n>0&&(l.start({type:"start",alpha:e=n}),t=En(u.tick)),u):e},u.start=function(){var t,n,e,o=y.length,l=m.length,s=c[0],g=c[1];for(t=0;t<o;++t)(e=y[t]).index=t,e.weight=0;for(t=0;t<l;++t)"number"==typeof(e=m[t]).source&&(e.source=y[e.source]),"number"==typeof e.target&&(e.target=y[e.target]),++e.source.weight,++e.target.weight;for(t=0;t<o;++t)e=y[t],isNaN(e.x)&&(e.x=d("x",s)),isNaN(e.y)&&(e.y=d("y",g)),isNaN(e.px)&&(e.px=e.x),isNaN(e.py)&&(e.py=e.y);if(r=[],"function"==typeof f)for(t=0;t<l;++t)r[t]=+f.call(this,m[t],t);else for(t=0;t<l;++t)r[t]=f;if(i=[],"function"==typeof h)for(t=0;t<l;++t)i[t]=+h.call(this,m[t],t);else for(t=0;t<l;++t)i[t]=h;if(a=[],"function"==typeof p)for(t=0;t<o;++t)a[t]=+p.call(this,y[t],t);else for(t=0;t<o;++t)a[t]=p;function d(e,r){if(!n){for(n=new Array(o),c=0;c<o;++c)n[c]=[];for(c=0;c<l;++c){var i=m[c];n[i.source.index].push(i.target),n[i.target.index].push(i.source)}}for(var a,u=n[t],c=-1,s=u.length;++c<s;)if(!isNaN(a=u[c][e]))return a;return Math.random()*r}return u.resume()},u.resume=function(){return u.alpha(.1)},u.stop=function(){return u.alpha(0)},u.drag=function(){if(n||(n=o.behavior.drag().origin(P).on("dragstart.force",zo).on("drag.force",M).on("dragend.force",To)),!arguments.length)return n;this.on("mouseover.force",Lo).on("mouseout.force",qo).call(n)},o.rebind(u,l,"on")};var Po=20,jo=1,Do=1/0;function Ro(t,n){return o.rebind(t,n,"sort","children","value"),t.nodes=t,t.links=Yo,t}function Io(t,n){for(var e=[t];null!=(t=e.pop());)if(n(t),(i=t.children)&&(r=i.length))for(var r,i;--r>=0;)e.push(i[r])}function Oo(t,n){for(var e=[t],r=[];null!=(t=e.pop());)if(r.push(t),(o=t.children)&&(i=o.length))for(var i,o,a=-1;++a<i;)e.push(o[a]);for(;null!=(t=r.pop());)n(t)}function Uo(t){return t.children}function Fo(t){return t.value}function Ho(t,n){return n.value-t.value}function Yo(t){return o.merge(t.map((function(t){return(t.children||[]).map((function(n){return{source:t,target:n}}))})))}o.layout.hierarchy=function(){var t=Ho,n=Uo,e=Fo;function r(i){var o,a=[i],u=[];for(i.depth=0;null!=(o=a.pop());)if(u.push(o),(c=n.call(r,o,o.depth))&&(l=c.length)){for(var l,c,s;--l>=0;)a.push(s=c[l]),s.parent=o,s.depth=o.depth+1;e&&(o.value=0),o.children=c}else e&&(o.value=+e.call(r,o,o.depth)||0),delete o.children;return Oo(i,(function(n){var r,i;t&&(r=n.children)&&r.sort(t),e&&(i=n.parent)&&(i.value+=n.value)})),u}return r.sort=function(n){return arguments.length?(t=n,r):t},r.children=function(t){return arguments.length?(n=t,r):n},r.value=function(t){return arguments.length?(e=t,r):e},r.revalue=function(t){return e&&(Io(t,(function(t){t.children&&(t.value=0)})),Oo(t,(function(t){var n;t.children||(t.value=+e.call(r,t,t.depth)||0),(n=t.parent)&&(n.value+=t.value)}))),t},r},o.layout.partition=function(){var t=o.layout.hierarchy(),n=[1,1];function e(e,r){var i=t.call(this,e,r);return function t(n,e,r,i){var o=n.children;if(n.x=e,n.y=n.depth*i,n.dx=r,n.dy=i,o&&(a=o.length)){var a,u,l,c=-1;for(r=n.value?r/n.value:0;++c<a;)t(u=o[c],e,l=u.value*r,i),e+=l}}(i[0],0,n[0],n[1]/function t(n){var e=n.children,r=0;if(e&&(i=e.length))for(var i,o=-1;++o<i;)r=Math.max(r,t(e[o]));return 1+r}(i[0])),i}return e.size=function(t){return arguments.length?(n=t,e):n},Ro(e,t)},o.layout.pie=function(){var t=Number,n=Vo,e=0,r=Tt,i=0;function a(u){var l,c=u.length,s=u.map((function(n,e){return+t.call(a,n,e)})),f=+("function"==typeof e?e.apply(this,arguments):e),h=("function"==typeof r?r.apply(this,arguments):r)-f,p=Math.min(Math.abs(h)/c,+("function"==typeof i?i.apply(this,arguments):i)),g=p*(h<0?-1:1),d=o.sum(s),v=d?(h-c*g)/d:0,y=o.range(c),m=[];return null!=n&&y.sort(n===Vo?function(t,n){return s[n]-s[t]}:function(t,e){return n(u[t],u[e])}),y.forEach((function(t){m[t]={data:u[t],value:l=s[t],startAngle:f,endAngle:f+=l*v+g,padAngle:p}})),m}return a.value=function(n){return arguments.length?(t=n,a):t},a.sort=function(t){return arguments.length?(n=t,a):n},a.startAngle=function(t){return arguments.length?(e=t,a):e},a.endAngle=function(t){return arguments.length?(r=t,a):r},a.padAngle=function(t){return arguments.length?(i=t,a):i},a};var Vo={};function Zo(t){return t.x}function Bo(t){return t.y}function Xo(t,n,e){t.y0=n,t.y=e}o.layout.stack=function(){var t=P,n=Jo,e=Qo,r=Xo,i=Zo,a=Bo;function u(l,c){if(!(p=l.length))return l;var s=l.map((function(n,e){return t.call(u,n,e)})),f=s.map((function(t){return t.map((function(t,n){return[i.call(u,t,n),a.call(u,t,n)]}))})),h=n.call(u,f,c);s=o.permute(s,h),f=o.permute(f,h);var p,g,d,v,y=e.call(u,f,c),m=s[0].length;for(d=0;d<m;++d)for(r.call(u,s[0][d],v=y[d],f[0][d][1]),g=1;g<p;++g)r.call(u,s[g][d],v+=f[g-1][d][1],f[g][d][1]);return l}return u.values=function(n){return arguments.length?(t=n,u):t},u.order=function(t){return arguments.length?(n="function"==typeof t?t:$o.get(t)||Jo,u):n},u.offset=function(t){return arguments.length?(e="function"==typeof t?t:Wo.get(t)||Qo,u):e},u.x=function(t){return arguments.length?(i=t,u):i},u.y=function(t){return arguments.length?(a=t,u):a},u.out=function(t){return arguments.length?(r=t,u):r},u};var $o=o.map({"inside-out":function(t){var n,e,r=t.length,i=t.map(Go),a=t.map(Ko),u=o.range(r).sort((function(t,n){return i[t]-i[n]})),l=0,c=0,s=[],f=[];for(n=0;n<r;++n)e=u[n],l<c?(l+=a[e],s.push(e)):(c+=a[e],f.push(e));return f.reverse().concat(s)},reverse:function(t){return o.range(t.length).reverse()},default:Jo}),Wo=o.map({silhouette:function(t){var n,e,r,i=t.length,o=t[0].length,a=[],u=0,l=[];for(e=0;e<o;++e){for(n=0,r=0;n<i;n++)r+=t[n][e][1];r>u&&(u=r),a.push(r)}for(e=0;e<o;++e)l[e]=(u-a[e])/2;return l},wiggle:function(t){var n,e,r,i,o,a,u,l,c,s=t.length,f=t[0],h=f.length,p=[];for(p[0]=l=c=0,e=1;e<h;++e){for(n=0,i=0;n<s;++n)i+=t[n][e][1];for(n=0,o=0,u=f[e][0]-f[e-1][0];n<s;++n){for(r=0,a=(t[n][e][1]-t[n][e-1][1])/(2*u);r<n;++r)a+=(t[r][e][1]-t[r][e-1][1])/u;o+=a*t[n][e][1]}p[e]=l-=i?o/i*u:0,l<c&&(c=l)}for(e=0;e<h;++e)p[e]-=c;return p},expand:function(t){var n,e,r,i=t.length,o=t[0].length,a=1/i,u=[];for(e=0;e<o;++e){for(n=0,r=0;n<i;n++)r+=t[n][e][1];if(r)for(n=0;n<i;n++)t[n][e][1]/=r;else for(n=0;n<i;n++)t[n][e][1]=a}for(e=0;e<o;++e)u[e]=0;return u},zero:Qo});function Jo(t){return o.range(t.length)}function Qo(t){for(var n=-1,e=t[0].length,r=[];++n<e;)r[n]=0;return r}function Go(t){for(var n,e=1,r=0,i=t[0][1],o=t.length;e<o;++e)(n=t[e][1])>i&&(r=e,i=n);return r}function Ko(t){return t.reduce(ta,0)}function ta(t,n){return t+n[1]}function na(t,n){return ea(t,Math.ceil(Math.log(n.length)/Math.LN2+1))}function ea(t,n){for(var e=-1,r=+t[0],i=(t[1]-r)/n,o=[];++e<=n;)o[e]=i*e+r;return o}function ra(t){return[o.min(t),o.max(t)]}function ia(t,n){return t.value-n.value}function oa(t,n){var e=t._pack_next;t._pack_next=n,n._pack_prev=t,n._pack_next=e,e._pack_prev=n}function aa(t,n){t._pack_next=n,n._pack_prev=t}function ua(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return.999*i*i>e*e+r*r}function la(t){if((n=t.children)&&(l=n.length)){var n,e,r,i,o,a,u,l,c=1/0,s=-1/0,f=1/0,h=-1/0;if(n.forEach(ca),(e=n[0]).x=-e.r,e.y=0,x(e),l>1&&((r=n[1]).x=r.r,r.y=0,x(r),l>2))for(fa(e,r,i=n[2]),x(i),oa(e,i),e._pack_prev=i,oa(i,r),r=e._pack_next,o=3;o<l;o++){fa(e,r,i=n[o]);var p=0,g=1,d=1;for(a=r._pack_next;a!==r;a=a._pack_next,g++)if(ua(a,i)){p=1;break}if(1==p)for(u=e._pack_prev;u!==a._pack_prev&&!ua(u,i);u=u._pack_prev,d++);p?(g<d||g==d&&r.r<e.r?aa(e,r=a):aa(e=u,r),o--):(oa(e,i),r=i,x(i))}var v=(c+s)/2,y=(f+h)/2,m=0;for(o=0;o<l;o++)(i=n[o]).x-=v,i.y-=y,m=Math.max(m,i.r+Math.sqrt(i.x*i.x+i.y*i.y));t.r=m,n.forEach(sa)}function x(t){c=Math.min(t.x-t.r,c),s=Math.max(t.x+t.r,s),f=Math.min(t.y-t.r,f),h=Math.max(t.y+t.r,h)}}function ca(t){t._pack_next=t._pack_prev=t}function sa(t){delete t._pack_next,delete t._pack_prev}function fa(t,n,e){var r=t.r+e.r,i=n.x-t.x,o=n.y-t.y;if(r&&(i||o)){var a=n.r+e.r,u=i*i+o*o,l=.5+((r*=r)-(a*=a))/(2*u),c=Math.sqrt(Math.max(0,2*a*(r+u)-(r-=u)*r-a*a))/(2*u);e.x=t.x+l*i+c*o,e.y=t.y+l*o-c*i}else e.x=t.x+r,e.y=t.y}function ha(t,n){return t.parent==n.parent?1:2}function pa(t){var n=t.children;return n.length?n[0]:t.t}function ga(t){var n,e=t.children;return(n=e.length)?e[n-1]:t.t}function da(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function va(t,n,e){return t.a.parent===n.parent?t.a:e}function ya(t){return{x:t.x,y:t.y,dx:t.dx,dy:t.dy}}function ma(t,n){var e=t.x+n[3],r=t.y+n[0],i=t.dx-n[1]-n[3],o=t.dy-n[0]-n[2];return i<0&&(e+=i/2,i=0),o<0&&(r+=o/2,o=0),{x:e,y:r,dx:i,dy:o}}function xa(t){var n=t[0],e=t[t.length-1];return n<e?[n,e]:[e,n]}function Ma(t){return t.rangeExtent?t.rangeExtent():xa(t.range())}function ba(t,n,e,r){var i=e(t[0],t[1]),o=r(n[0],n[1]);return function(t){return o(i(t))}}function wa(t,n){var e,r=0,i=t.length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t}function _a(t){return t?{floor:function(n){return Math.floor(n/t)*t},ceil:function(n){return Math.ceil(n/t)*t}}:ka}o.layout.histogram=function(){var t=!0,n=Number,e=ra,r=na;function i(i,a){for(var u,l,c=[],s=i.map(n,this),f=e.call(this,s,a),h=r.call(this,f,s,a),p=(a=-1,s.length),g=h.length-1,d=t?1:1/p;++a<g;)(u=c[a]=[]).dx=h[a+1]-(u.x=h[a]),u.y=0;if(g>0)for(a=-1;++a<p;)(l=s[a])>=f[0]&&l<=f[1]&&((u=c[o.bisect(h,l,1,g)-1]).y+=d,u.push(i[a]));return c}return i.value=function(t){return arguments.length?(n=t,i):n},i.range=function(t){return arguments.length?(e=xn(t),i):e},i.bins=function(t){return arguments.length?(r="number"==typeof t?function(n){return ea(n,t)}:xn(t),i):r},i.frequency=function(n){return arguments.length?(t=!!n,i):t},i},o.layout.pack=function(){var t,n=o.layout.hierarchy().sort(ia),e=0,r=[1,1];function i(i,o){var a=n.call(this,i,o),u=a[0],l=r[0],c=r[1],s=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(u.x=u.y=0,Oo(u,(function(t){t.r=+s(t.value)})),Oo(u,la),e){var f=e*(t?1:Math.max(2*u.r/l,2*u.r/c))/2;Oo(u,(function(t){t.r+=f})),Oo(u,la),Oo(u,(function(t){t.r-=f}))}return function t(n,e,r,i){var o=n.children;if(n.x=e+=i*n.x,n.y=r+=i*n.y,n.r*=i,o)for(var a=-1,u=o.length;++a<u;)t(o[a],e,r,i)}(u,l/2,c/2,t?1:1/Math.max(2*u.r/l,2*u.r/c)),a}return i.size=function(t){return arguments.length?(r=t,i):r},i.radius=function(n){return arguments.length?(t=null==n||"function"==typeof n?n:+n,i):t},i.padding=function(t){return arguments.length?(e=+t,i):e},Ro(i,n)},o.layout.tree=function(){var t=o.layout.hierarchy().sort(null).value(null),n=ha,e=[1,1],r=null;function i(i,o){var c=t.call(this,i,o),s=c[0],f=function(t){var n,e={A:null,children:[t]},r=[e];for(;null!=(n=r.pop());)for(var i,o=n.children,a=0,u=o.length;a<u;++a)r.push((o[a]=i={_:o[a],parent:n,children:(i=o[a].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:a}).a=i);return e.children[0]}(s);if(Oo(f,a),f.parent.m=-f.z,Io(f,u),r)Io(s,l);else{var h=s,p=s,g=s;Io(s,(function(t){t.x<h.x&&(h=t),t.x>p.x&&(p=t),t.depth>g.depth&&(g=t)}));var d=n(h,p)/2-h.x,v=e[0]/(p.x+n(p,h)/2+d),y=e[1]/(g.depth||1);Io(s,(function(t){t.x=(t.x+d)*v,t.y=t.depth*y}))}return c}function a(t){var e=t.children,r=t.parent.children,i=t.i?r[t.i-1]:null;if(e.length){!function(t){var n,e=0,r=0,i=t.children,o=i.length;for(;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(t);var o=(e[0].z+e[e.length-1].z)/2;i?(t.z=i.z+n(t._,i._),t.m=t.z-o):t.z=o}else i&&(t.z=i.z+n(t._,i._));t.parent.A=function(t,e,r){if(e){for(var i,o=t,a=t,u=e,l=o.parent.children[0],c=o.m,s=a.m,f=u.m,h=l.m;u=ga(u),o=pa(o),u&&o;)l=pa(l),(a=ga(a)).a=t,(i=u.z+f-o.z-c+n(u._,o._))>0&&(da(va(u,t,r),t,i),c+=i,s+=i),f+=u.m,c+=o.m,h+=l.m,s+=a.m;u&&!ga(a)&&(a.t=u,a.m+=f-s),o&&!pa(l)&&(l.t=o,l.m+=c-h,r=t)}return r}(t,i,t.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function l(t){t.x*=e[0],t.y=t.depth*e[1]}return i.separation=function(t){return arguments.length?(n=t,i):n},i.size=function(t){return arguments.length?(r=null==(e=t)?l:null,i):r?null:e},i.nodeSize=function(t){return arguments.length?(r=null==(e=t)?null:l,i):r?e:null},Ro(i,t)},o.layout.cluster=function(){var t=o.layout.hierarchy().sort(null).value(null),n=ha,e=[1,1],r=!1;function i(i,a){var u,l=t.call(this,i,a),c=l[0],s=0;Oo(c,(function(t){var e=t.children;e&&e.length?(t.x=function(t){return t.reduce((function(t,n){return t+n.x}),0)/t.length}(e),t.y=function(t){return 1+o.max(t,(function(t){return t.y}))}(e)):(t.x=u?s+=n(t,u):0,t.y=0,u=t)}));var f=function t(n){var e=n.children;return e&&e.length?t(e[0]):n}(c),h=function t(n){var e,r=n.children;return r&&(e=r.length)?t(r[e-1]):n}(c),p=f.x-n(f,h)/2,g=h.x+n(h,f)/2;return Oo(c,r?function(t){t.x=(t.x-c.x)*e[0],t.y=(c.y-t.y)*e[1]}:function(t){t.x=(t.x-p)/(g-p)*e[0],t.y=(1-(c.y?t.y/c.y:1))*e[1]}),l}return i.separation=function(t){return arguments.length?(n=t,i):n},i.size=function(t){return arguments.length?(r=null==(e=t),i):r?null:e},i.nodeSize=function(t){return arguments.length?(r=null!=(e=t),i):r?e:null},Ro(i,t)},o.layout.treemap=function(){var t,n=o.layout.hierarchy(),e=Math.round,r=[1,1],i=null,a=ya,u=!1,l="squarify",c=.5*(1+Math.sqrt(5));function s(t,n){for(var e,r,i=-1,o=t.length;++i<o;)r=(e=t[i]).value*(n<0?0:n),e.area=isNaN(r)||r<=0?0:r}function f(t){var n=t.children;if(n&&n.length){var e,r,i,o=a(t),u=[],c=n.slice(),h=1/0,d="slice"===l?o.dx:"dice"===l?o.dy:"slice-dice"===l?1&t.depth?o.dy:o.dx:Math.min(o.dx,o.dy);for(s(c,o.dx*o.dy/t.value),u.area=0;(i=c.length)>0;)u.push(e=c[i-1]),u.area+=e.area,"squarify"!==l||(r=p(u,d))<=h?(c.pop(),h=r):(u.area-=u.pop().area,g(u,d,o,!1),d=Math.min(o.dx,o.dy),u.length=u.area=0,h=1/0);u.length&&(g(u,d,o,!0),u.length=u.area=0),n.forEach(f)}}function h(t){var n=t.children;if(n&&n.length){var e,r=a(t),i=n.slice(),o=[];for(s(i,r.dx*r.dy/t.value),o.area=0;e=i.pop();)o.push(e),o.area+=e.area,null!=e.z&&(g(o,e.z?r.dx:r.dy,r,!i.length),o.length=o.area=0);n.forEach(h)}}function p(t,n){for(var e,r=t.area,i=0,o=1/0,a=-1,u=t.length;++a<u;)(e=t[a].area)&&(e<o&&(o=e),e>i&&(i=e));return n*=n,(r*=r)?Math.max(n*i*c/r,r/(n*o*c)):1/0}function g(t,n,r,i){var o,a=-1,u=t.length,l=r.x,c=r.y,s=n?e(t.area/n):0;if(n==r.dx){for((i||s>r.dy)&&(s=r.dy);++a<u;)(o=t[a]).x=l,o.y=c,o.dy=s,l+=o.dx=Math.min(r.x+r.dx-l,s?e(o.area/s):0);o.z=!0,o.dx+=r.x+r.dx-l,r.y+=s,r.dy-=s}else{for((i||s>r.dx)&&(s=r.dx);++a<u;)(o=t[a]).x=l,o.y=c,o.dx=s,c+=o.dy=Math.min(r.y+r.dy-c,s?e(o.area/s):0);o.z=!1,o.dy+=r.y+r.dy-c,r.x+=s,r.dx-=s}}function d(e){var i=t||n(e),o=i[0];return o.x=o.y=0,o.value?(o.dx=r[0],o.dy=r[1]):o.dx=o.dy=0,t&&n.revalue(o),s([o],o.dx*o.dy/o.value),(t?h:f)(o),u&&(t=i),i}return d.size=function(t){return arguments.length?(r=t,d):r},d.padding=function(t){if(!arguments.length)return i;function n(n){var e=t.call(d,n,n.depth);return null==e?ya(n):ma(n,"number"==typeof e?[e,e,e,e]:e)}function e(n){return ma(n,t)}var r;return a=null==(i=t)?ya:"function"==(r=typeof t)?n:"number"===r?(t=[t,t,t,t],e):e,d},d.round=function(t){return arguments.length?(e=t?Math.round:Number,d):e!=Number},d.sticky=function(n){return arguments.length?(u=n,t=null,d):u},d.ratio=function(t){return arguments.length?(c=t,d):c},d.mode=function(t){return arguments.length?(l=t+"",d):l},Ro(d,n)},o.random={normal:function(t,n){var e=arguments.length;return e<2&&(n=1),e<1&&(t=0),function(){var e,r,i;do{i=(e=2*Math.random()-1)*e+(r=2*Math.random()-1)*r}while(!i||i>1);return t+n*e*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var t=o.random.normal.apply(o,arguments);return function(){return Math.exp(t())}},bates:function(t){var n=o.random.irwinHall(t);return function(){return n()/t}},irwinHall:function(t){return function(){for(var n=0,e=0;e<t;e++)n+=Math.random();return n}}},o.scale={};var ka={floor:P,ceil:P};function Sa(t,n,e,r){var i=[],a=[],u=0,l=Math.min(t.length,n.length)-1;for(t[l]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<=l;)i.push(e(t[u-1],t[u])),a.push(r(n[u-1],n[u]));return function(n){var e=o.bisect(t,n,1,l)-1;return a[e](i[e](n))}}function Na(t,n){return o.rebind(t,n,"range","rangeRound","interpolate","clamp")}function Ea(t,n){return wa(t,_a(Aa(t,n)[2])),wa(t,_a(Aa(t,n)[2])),t}function Aa(t,n){null==n&&(n=10);var e=xa(t),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/n)/Math.LN10)),o=n/r*i;return o<=.15?i*=10:o<=.35?i*=5:o<=.75&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function Ca(t,n){return o.range.apply(o,Aa(t,n))}function za(t,n,e){var r=Aa(t,n);if(e){var i=Pn.exec(e);if(i.shift(),"s"===i[8]){var a=o.formatPrefix(Math.max(w(r[0]),w(r[1])));return i[7]||(i[7]="."+La(a.scale(r[2]))),i[8]="f",e=o.format(i.join("")),function(t){return e(a.scale(t))+a.symbol}}i[7]||(i[7]="."+function(t,n){var e=La(n[2]);return t in Ta?Math.abs(e-La(Math.max(w(n[0]),w(n[1]))))+ +("e"!==t):e-2*("%"===t)}(i[8],r)),e=i.join("")}else e=",."+La(r[2])+"f";return o.format(e)}o.scale.linear=function(){return function t(n,e,r,i){var o,a;function u(){var t=Math.min(n.length,e.length)>2?Sa:ba,u=i?Eo:No;return o=t(n,e,u,r),a=t(e,n,u,ro),l}function l(t){return o(t)}return l.invert=function(t){return a(t)},l.domain=function(t){return arguments.length?(n=t.map(Number),u()):n},l.range=function(t){return arguments.length?(e=t,u()):e},l.rangeRound=function(t){return l.range(t).interpolate(xo)},l.clamp=function(t){return arguments.length?(i=t,u()):i},l.interpolate=function(t){return arguments.length?(r=t,u()):r},l.ticks=function(t){return Ca(n,t)},l.tickFormat=function(t,e){return za(n,t,e)},l.nice=function(t){return Ea(n,t),u()},l.copy=function(){return t(n,e,r,i)},u()}([0,1],[0,1],ro,!1)};var Ta={s:1,g:1,p:1,r:1,e:1};function La(t){return-Math.floor(Math.log(t)/Math.LN10+.01)}o.scale.log=function(){return function t(n,e,r,i){function a(t){return(r?Math.log(t<0?0:t):-Math.log(t>0?0:-t))/Math.log(e)}function u(t){return r?Math.pow(e,t):-Math.pow(e,-t)}function l(t){return n(a(t))}return l.invert=function(t){return u(n.invert(t))},l.domain=function(t){return arguments.length?(r=t[0]>=0,n.domain((i=t.map(Number)).map(a)),l):i},l.base=function(t){return arguments.length?(e=+t,n.domain(i.map(a)),l):e},l.nice=function(){var t=wa(i.map(a),r?Math:Pa);return n.domain(t),i=t.map(u),l},l.ticks=function(){var t=xa(i),n=[],o=t[0],l=t[1],c=Math.floor(a(o)),s=Math.ceil(a(l)),f=e%1?2:e;if(isFinite(s-c)){if(r){for(;c<s;c++)for(var h=1;h<f;h++)n.push(u(c)*h);n.push(u(c))}else for(n.push(u(c));c++<s;)for(h=f-1;h>0;h--)n.push(u(c)*h);for(c=0;n[c]<o;c++);for(s=n.length;n[s-1]>l;s--);n=n.slice(c,s)}return n},l.tickFormat=function(t,n){if(!arguments.length)return qa;arguments.length<2?n=qa:"function"!=typeof n&&(n=o.format(n));var r=Math.max(1,e*t/l.ticks().length);return function(t){var i=t/u(Math.round(a(t)));return i*e<e-.5&&(i*=e),i<=r?n(t):""}},l.copy=function(){return t(n.copy(),e,r,i)},Na(l,n)}(o.scale.linear().domain([0,1]),10,!0,[1,10])};var qa=o.format(".0e"),Pa={floor:function(t){return-Math.ceil(-t)},ceil:function(t){return-Math.floor(-t)}};function ja(t){return function(n){return n<0?-Math.pow(-n,t):Math.pow(n,t)}}o.scale.pow=function(){return function t(n,e,r){var i=ja(e),o=ja(1/e);function a(t){return n(i(t))}return a.invert=function(t){return o(n.invert(t))},a.domain=function(t){return arguments.length?(n.domain((r=t.map(Number)).map(i)),a):r},a.ticks=function(t){return Ca(r,t)},a.tickFormat=function(t,n){return za(r,t,n)},a.nice=function(t){return a.domain(Ea(r,t))},a.exponent=function(t){return arguments.length?(i=ja(e=t),o=ja(1/e),n.domain(r.map(i)),a):e},a.copy=function(){return t(n.copy(),e,r)},Na(a,n)}(o.scale.linear(),1,[0,1])},o.scale.sqrt=function(){return o.scale.pow().exponent(.5)},o.scale.ordinal=function(){return function t(n,e){var r,i,a;function u(t){return i[((r.get(t)||("range"===e.t?r.set(t,n.push(t)):NaN))-1)%i.length]}function l(t,e){return o.range(n.length).map((function(n){return t+e*n}))}return u.domain=function(t){if(!arguments.length)return n;n=[],r=new S;for(var i,o=-1,a=t.length;++o<a;)r.has(i=t[o])||r.set(i,n.push(i));return u[e.t].apply(u,e.a)},u.range=function(t){return arguments.length?(i=t,a=0,e={t:"range",a:arguments},u):i},u.rangePoints=function(t,r){arguments.length<2&&(r=0);var o=t[0],c=t[1],s=n.length<2?(o=(o+c)/2,0):(c-o)/(n.length-1+r);return i=l(o+s*r/2,s),a=0,e={t:"rangePoints",a:arguments},u},u.rangeRoundPoints=function(t,r){arguments.length<2&&(r=0);var o=t[0],c=t[1],s=n.length<2?(o=c=Math.round((o+c)/2),0):(c-o)/(n.length-1+r)|0;return i=l(o+Math.round(s*r/2+(c-o-(n.length-1+r)*s)/2),s),a=0,e={t:"rangeRoundPoints",a:arguments},u},u.rangeBands=function(t,r,o){arguments.length<2&&(r=0),arguments.length<3&&(o=r);var c=t[1]<t[0],s=t[c-0],f=t[1-c],h=(f-s)/(n.length-r+2*o);return i=l(s+h*o,h),c&&i.reverse(),a=h*(1-r),e={t:"rangeBands",a:arguments},u},u.rangeRoundBands=function(t,r,o){arguments.length<2&&(r=0),arguments.length<3&&(o=r);var c=t[1]<t[0],s=t[c-0],f=t[1-c],h=Math.floor((f-s)/(n.length-r+2*o));return i=l(s+Math.round((f-s-(n.length-r)*h)/2),h),c&&i.reverse(),a=Math.round(h*(1-r)),e={t:"rangeRoundBands",a:arguments},u},u.rangeBand=function(){return a},u.rangeExtent=function(){return xa(e.a[0])},u.copy=function(){return t(n,e)},u.domain(n)}([],{t:"range",a:[[]]})},o.scale.category10=function(){return o.scale.ordinal().range(Da)},o.scale.category20=function(){return o.scale.ordinal().range(Ra)},o.scale.category20b=function(){return o.scale.ordinal().range(Ia)},o.scale.category20c=function(){return o.scale.ordinal().range(Oa)};var Da=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(sn),Ra=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(sn),Ia=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(sn),Oa=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(sn);function Ua(){return 0}o.scale.quantile=function(){return function t(n,e){var r;function i(){var t=0,i=e.length;for(r=[];++t<i;)r[t-1]=o.quantile(n,t/i);return a}function a(t){if(!isNaN(t=+t))return e[o.bisect(r,t)]}return a.domain=function(t){return arguments.length?(n=t.map(y).filter(m).sort(v),i()):n},a.range=function(t){return arguments.length?(e=t,i()):e},a.quantiles=function(){return r},a.invertExtent=function(t){return(t=e.indexOf(t))<0?[NaN,NaN]:[t>0?r[t-1]:n[0],t<r.length?r[t]:n[n.length-1]]},a.copy=function(){return t(n,e)},i()}([],[])},o.scale.quantize=function(){return function t(n,e,r){var i,o;function a(t){return r[Math.max(0,Math.min(o,Math.floor(i*(t-n))))]}function u(){return i=r.length/(e-n),o=r.length-1,a}return a.domain=function(t){return arguments.length?(n=+t[0],e=+t[t.length-1],u()):[n,e]},a.range=function(t){return arguments.length?(r=t,u()):r},a.invertExtent=function(t){return[t=(t=r.indexOf(t))<0?NaN:t/i+n,t+1/i]},a.copy=function(){return t(n,e,r)},u()}(0,1,[0,1])},o.scale.threshold=function(){return function t(n,e){function r(t){if(t<=t)return e[o.bisect(n,t)]}return r.domain=function(t){return arguments.length?(n=t,r):n},r.range=function(t){return arguments.length?(e=t,r):e},r.invertExtent=function(t){return t=e.indexOf(t),[n[t-1],n[t]]},r.copy=function(){return t(n,e)},r}([.5],[0,1])},o.scale.identity=function(){return function t(n){function e(t){return+t}return e.invert=e,e.domain=e.range=function(t){return arguments.length?(n=t.map(e),e):n},e.ticks=function(t){return Ca(n,t)},e.tickFormat=function(t,e){return za(n,t,e)},e.copy=function(){return t(n)},e}([0,1])},o.svg={},o.svg.arc=function(){var t=Ha,n=Ya,e=Ua,r=Fa,i=Va,o=Za,a=Ba;function u(){var u=Math.max(0,+t.apply(this,arguments)),c=Math.max(0,+n.apply(this,arguments)),s=i.apply(this,arguments)-qt,f=o.apply(this,arguments)-qt,h=Math.abs(f-s),p=s>f?0:1;if(c<u&&(g=c,c=u,u=g),h>=Lt)return l(c,p)+(u?l(u,1-p):"")+"Z";var g,d,v,y,m,x,M,b,w,_,k,S,N=0,E=0,A=[];if((y=(+a.apply(this,arguments)||0)/2)&&(v=r===Fa?Math.sqrt(u*u+c*c):+r.apply(this,arguments),p||(E*=-1),c&&(E=Ot(v/c*Math.sin(y))),u&&(N=Ot(v/u*Math.sin(y)))),c){m=c*Math.cos(s+E),x=c*Math.sin(s+E),M=c*Math.cos(f-E),b=c*Math.sin(f-E);var C=Math.abs(f-s-2*E)<=zt?0:1;if(E&&Xa(m,x,M,b)===p^C){var z=(s+f)/2;m=c*Math.cos(z),x=c*Math.sin(z),M=b=null}}else m=x=0;if(u){w=u*Math.cos(f-N),_=u*Math.sin(f-N),k=u*Math.cos(s+N),S=u*Math.sin(s+N);var T=Math.abs(s-f+2*N)<=zt?0:1;if(N&&Xa(w,_,k,S)===1-p^T){var L=(s+f)/2;w=u*Math.cos(L),_=u*Math.sin(L),k=S=null}}else w=_=0;if(h>At&&(g=Math.min(Math.abs(c-u)/2,+e.apply(this,arguments)))>.001){d=u<c^p?0:1;var q=g,P=g;if(h<zt){var j=null==k?[w,_]:null==M?[m,x]:hi([m,x],[k,S],[M,b],[w,_]),D=m-j[0],R=x-j[1],I=M-j[0],O=b-j[1],U=1/Math.sin(Math.acos((D*I+R*O)/(Math.sqrt(D*D+R*R)*Math.sqrt(I*I+O*O)))/2),F=Math.sqrt(j[0]*j[0]+j[1]*j[1]);P=Math.min(g,(u-F)/(U-1)),q=Math.min(g,(c-F)/(U+1))}if(null!=M){var H=$a(null==k?[w,_]:[k,S],[m,x],c,q,p),Y=$a([M,b],[w,_],c,q,p);g===q?A.push("M",H[0],"A",q,",",q," 0 0,",d," ",H[1],"A",c,",",c," 0 ",1-p^Xa(H[1][0],H[1][1],Y[1][0],Y[1][1]),",",p," ",Y[1],"A",q,",",q," 0 0,",d," ",Y[0]):A.push("M",H[0],"A",q,",",q," 0 1,",d," ",Y[0])}else A.push("M",m,",",x);if(null!=k){var V=$a([m,x],[k,S],u,-P,p),Z=$a([w,_],null==M?[m,x]:[M,b],u,-P,p);g===P?A.push("L",Z[0],"A",P,",",P," 0 0,",d," ",Z[1],"A",u,",",u," 0 ",p^Xa(Z[1][0],Z[1][1],V[1][0],V[1][1]),",",1-p," ",V[1],"A",P,",",P," 0 0,",d," ",V[0]):A.push("L",Z[0],"A",P,",",P," 0 0,",d," ",V[0])}else A.push("L",w,",",_)}else A.push("M",m,",",x),null!=M&&A.push("A",c,",",c," 0 ",C,",",p," ",M,",",b),A.push("L",w,",",_),null!=k&&A.push("A",u,",",u," 0 ",T,",",1-p," ",k,",",S);return A.push("Z"),A.join("")}function l(t,n){return"M0,"+t+"A"+t+","+t+" 0 1,"+n+" 0,"+-t+"A"+t+","+t+" 0 1,"+n+" 0,"+t}return u.innerRadius=function(n){return arguments.length?(t=xn(n),u):t},u.outerRadius=function(t){return arguments.length?(n=xn(t),u):n},u.cornerRadius=function(t){return arguments.length?(e=xn(t),u):e},u.padRadius=function(t){return arguments.length?(r=t==Fa?Fa:xn(t),u):r},u.startAngle=function(t){return arguments.length?(i=xn(t),u):i},u.endAngle=function(t){return arguments.length?(o=xn(t),u):o},u.padAngle=function(t){return arguments.length?(a=xn(t),u):a},u.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-qt;return[Math.cos(r)*e,Math.sin(r)*e]},u};var Fa="auto";function Ha(t){return t.innerRadius}function Ya(t){return t.outerRadius}function Va(t){return t.startAngle}function Za(t){return t.endAngle}function Ba(t){return t&&t.padAngle}function Xa(t,n,e,r){return(t-e)*n-(n-r)*t>0?0:1}function $a(t,n,e,r,i){var o=t[0]-n[0],a=t[1]-n[1],u=(i?r:-r)/Math.sqrt(o*o+a*a),l=u*a,c=-u*o,s=t[0]+l,f=t[1]+c,h=n[0]+l,p=n[1]+c,g=(s+h)/2,d=(f+p)/2,v=h-s,y=p-f,m=v*v+y*y,x=e-r,M=s*p-h*f,b=(y<0?-1:1)*Math.sqrt(Math.max(0,x*x*m-M*M)),w=(M*y-v*b)/m,_=(-M*v-y*b)/m,k=(M*y+v*b)/m,S=(-M*v+y*b)/m,N=w-g,E=_-d,A=k-g,C=S-d;return N*N+E*E>A*A+C*C&&(w=k,_=S),[[w-l,_-c],[w*e/x,_*e/x]]}function Wa(t){var n=ai,e=ui,r=Qe,i=Qa,o=i.key,a=.7;function u(o){var u,l=[],c=[],s=-1,f=o.length,h=xn(n),p=xn(e);function g(){l.push("M",i(t(c),a))}for(;++s<f;)r.call(this,u=o[s],s)?c.push([+h.call(this,u,s),+p.call(this,u,s)]):c.length&&(g(),c=[]);return c.length&&g(),l.length?l.join(""):null}return u.x=function(t){return arguments.length?(n=t,u):n},u.y=function(t){return arguments.length?(e=t,u):e},u.defined=function(t){return arguments.length?(r=t,u):r},u.interpolate=function(t){return arguments.length?(o="function"==typeof t?i=t:(i=Ja.get(t)||Qa).key,u):o},u.tension=function(t){return arguments.length?(a=t,u):a},u}o.svg.line=function(){return Wa(P)};var Ja=o.map({linear:Qa,"linear-closed":Ga,step:function(t){var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];for(;++n<e;)i.push("H",(r[0]+(r=t[n])[0])/2,"V",r[1]);e>1&&i.push("H",r[0]);return i.join("")},"step-before":Ka,"step-after":tu,basis:ru,"basis-open":function(t){if(t.length<4)return Qa(t);var n,e=[],r=-1,i=t.length,o=[0],a=[0];for(;++r<3;)n=t[r],o.push(n[0]),a.push(n[1]);e.push(iu(uu,o)+","+iu(uu,a)),--r;for(;++r<i;)n=t[r],o.shift(),o.push(n[0]),a.shift(),a.push(n[1]),lu(e,o,a);return e.join("")},"basis-closed":function(t){var n,e,r=-1,i=t.length,o=i+4,a=[],u=[];for(;++r<4;)e=t[r%i],a.push(e[0]),u.push(e[1]);n=[iu(uu,a),",",iu(uu,u)],--r;for(;++r<o;)e=t[r%i],a.shift(),a.push(e[0]),u.shift(),u.push(e[1]),lu(n,a,u);return n.join("")},bundle:function(t,n){var e=t.length-1;if(e)for(var r,i,o=t[0][0],a=t[0][1],u=t[e][0]-o,l=t[e][1]-a,c=-1;++c<=e;)r=t[c],i=c/e,r[0]=n*r[0]+(1-n)*(o+i*u),r[1]=n*r[1]+(1-n)*(a+i*l);return ru(t)},cardinal:function(t,n){return t.length<3?Qa(t):t[0]+nu(t,eu(t,n))},"cardinal-open":function(t,n){return t.length<4?Qa(t):t[1]+nu(t.slice(1,-1),eu(t,n))},"cardinal-closed":function(t,n){return t.length<3?Ga(t):t[0]+nu((t.push(t[0]),t),eu([t[t.length-2]].concat(t,[t[1]]),n))},monotone:function(t){return t.length<3?Qa(t):t[0]+nu(t,function(t){var n,e,r,i,o=[],a=function(t){var n=0,e=t.length-1,r=[],i=t[0],o=t[1],a=r[0]=cu(i,o);for(;++n<e;)r[n]=(a+(a=cu(i=o,o=t[n+1])))/2;return r[n]=a,r}(t),u=-1,l=t.length-1;for(;++u<l;)n=cu(t[u],t[u+1]),w(n)<At?a[u]=a[u+1]=0:(e=a[u]/n,r=a[u+1]/n,(i=e*e+r*r)>9&&(i=3*n/Math.sqrt(i),a[u]=i*e,a[u+1]=i*r));u=-1;for(;++u<=l;)i=(t[Math.min(l,u+1)][0]-t[Math.max(0,u-1)][0])/(6*(1+a[u]*a[u])),o.push([i||0,a[u]*i||0]);return o}(t))}});function Qa(t){return t.length>1?t.join("L"):t+"Z"}function Ga(t){return t.join("L")+"Z"}function Ka(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("V",(r=t[n])[1],"H",r[0]);return i.join("")}function tu(t){for(var n=0,e=t.length,r=t[0],i=[r[0],",",r[1]];++n<e;)i.push("H",(r=t[n])[0],"V",r[1]);return i.join("")}function nu(t,n){if(n.length<1||t.length!=n.length&&t.length!=n.length+2)return Qa(t);var e=t.length!=n.length,r="",i=t[0],o=t[1],a=n[0],u=a,l=1;if(e&&(r+="Q"+(o[0]-2*a[0]/3)+","+(o[1]-2*a[1]/3)+","+o[0]+","+o[1],i=t[1],l=2),n.length>1){u=n[1],o=t[l],l++,r+="C"+(i[0]+a[0])+","+(i[1]+a[1])+","+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1];for(var c=2;c<n.length;c++,l++)o=t[l],u=n[c],r+="S"+(o[0]-u[0])+","+(o[1]-u[1])+","+o[0]+","+o[1]}if(e){var s=t[l];r+="Q"+(o[0]+2*u[0]/3)+","+(o[1]+2*u[1]/3)+","+s[0]+","+s[1]}return r}function eu(t,n){for(var e,r=[],i=(1-n)/2,o=t[0],a=t[1],u=1,l=t.length;++u<l;)e=o,o=a,a=t[u],r.push([i*(a[0]-e[0]),i*(a[1]-e[1])]);return r}function ru(t){if(t.length<3)return Qa(t);var n=1,e=t.length,r=t[0],i=r[0],o=r[1],a=[i,i,i,(r=t[1])[0]],u=[o,o,o,r[1]],l=[i,",",o,"L",iu(uu,a),",",iu(uu,u)];for(t.push(t[e-1]);++n<=e;)r=t[n],a.shift(),a.push(r[0]),u.shift(),u.push(r[1]),lu(l,a,u);return t.pop(),l.push("L",r),l.join("")}function iu(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]+t[3]*n[3]}Ja.forEach((function(t,n){n.key=t,n.closed=/-closed$/.test(t)}));var ou=[0,2/3,1/3,0],au=[0,1/3,2/3,0],uu=[0,1/6,2/3,1/6];function lu(t,n,e){t.push("C",iu(ou,n),",",iu(ou,e),",",iu(au,n),",",iu(au,e),",",iu(uu,n),",",iu(uu,e))}function cu(t,n){return(n[1]-t[1])/(n[0]-t[0])}function su(t){for(var n,e,r,i=-1,o=t.length;++i<o;)e=(n=t[i])[0],r=n[1]-qt,n[0]=e*Math.cos(r),n[1]=e*Math.sin(r);return t}function fu(t){var n=ai,e=ai,r=0,i=ui,o=Qe,a=Qa,u=a.key,l=a,c="L",s=.7;function f(u){var f,h,p,g=[],d=[],v=[],y=-1,m=u.length,x=xn(n),M=xn(r),b=n===e?function(){return h}:xn(e),w=r===i?function(){return p}:xn(i);function _(){g.push("M",a(t(v),s),c,l(t(d.reverse()),s),"Z")}for(;++y<m;)o.call(this,f=u[y],y)?(d.push([h=+x.call(this,f,y),p=+M.call(this,f,y)]),v.push([+b.call(this,f,y),+w.call(this,f,y)])):d.length&&(_(),d=[],v=[]);return d.length&&_(),g.length?g.join(""):null}return f.x=function(t){return arguments.length?(n=e=t,f):e},f.x0=function(t){return arguments.length?(n=t,f):n},f.x1=function(t){return arguments.length?(e=t,f):e},f.y=function(t){return arguments.length?(r=i=t,f):i},f.y0=function(t){return arguments.length?(r=t,f):r},f.y1=function(t){return arguments.length?(i=t,f):i},f.defined=function(t){return arguments.length?(o=t,f):o},f.interpolate=function(t){return arguments.length?(u="function"==typeof t?a=t:(a=Ja.get(t)||Qa).key,l=a.reverse||a,c=a.closed?"M":"L",f):u},f.tension=function(t){return arguments.length?(s=t,f):s},f}function hu(t){return t.radius}function pu(t){return[t.x,t.y]}function gu(t){return function(){var n=t.apply(this,arguments),e=n[0],r=n[1]-qt;return[e*Math.cos(r),e*Math.sin(r)]}}function du(){return 64}function vu(){return"circle"}function yu(t){var n=Math.sqrt(t/zt);return"M0,"+n+"A"+n+","+n+" 0 1,1 0,"+-n+"A"+n+","+n+" 0 1,1 0,"+n+"Z"}o.svg.line.radial=function(){var t=Wa(su);return t.radius=t.x,delete t.x,t.angle=t.y,delete t.y,t},Ka.reverse=tu,tu.reverse=Ka,o.svg.area=function(){return fu(P)},o.svg.area.radial=function(){var t=fu(su);return t.radius=t.x,delete t.x,t.innerRadius=t.x0,delete t.x0,t.outerRadius=t.x1,delete t.x1,t.angle=t.y,delete t.y,t.startAngle=t.y0,delete t.y0,t.endAngle=t.y1,delete t.y1,t},o.svg.chord=function(){var t=Br,n=Xr,e=hu,r=Va,i=Za;function o(e,r){var i,o,c=a(this,t,e,r),s=a(this,n,e,r);return"M"+c.p0+u(c.r,c.p1,c.a1-c.a0)+(o=s,(i=c).a0==o.a0&&i.a1==o.a1?l(c.r,c.p1,c.r,c.p0):l(c.r,c.p1,s.r,s.p0)+u(s.r,s.p1,s.a1-s.a0)+l(s.r,s.p1,c.r,c.p0))+"Z"}function a(t,n,o,a){var u=n.call(t,o,a),l=e.call(t,u,a),c=r.call(t,u,a)-qt,s=i.call(t,u,a)-qt;return{r:l,a0:c,a1:s,p0:[l*Math.cos(c),l*Math.sin(c)],p1:[l*Math.cos(s),l*Math.sin(s)]}}function u(t,n,e){return"A"+t+","+t+" 0 "+ +(e>zt)+",1 "+n}function l(t,n,e,r){return"Q 0,0 "+r}return o.radius=function(t){return arguments.length?(e=xn(t),o):e},o.source=function(n){return arguments.length?(t=xn(n),o):t},o.target=function(t){return arguments.length?(n=xn(t),o):n},o.startAngle=function(t){return arguments.length?(r=xn(t),o):r},o.endAngle=function(t){return arguments.length?(i=xn(t),o):i},o},o.svg.diagonal=function(){var t=Br,n=Xr,e=pu;function r(r,i){var o=t.call(this,r,i),a=n.call(this,r,i),u=(o.y+a.y)/2,l=[o,{x:o.x,y:u},{x:a.x,y:u},a];return"M"+(l=l.map(e))[0]+"C"+l[1]+" "+l[2]+" "+l[3]}return r.source=function(n){return arguments.length?(t=xn(n),r):t},r.target=function(t){return arguments.length?(n=xn(t),r):n},r.projection=function(t){return arguments.length?(e=t,r):e},r},o.svg.diagonal.radial=function(){var t=o.svg.diagonal(),n=pu,e=t.projection;return t.projection=function(t){return arguments.length?e(gu(n=t)):n},t},o.svg.symbol=function(){var t=vu,n=du;function e(e,r){return(mu.get(t.call(this,e,r))||yu)(n.call(this,e,r))}return e.type=function(n){return arguments.length?(t=xn(n),e):t},e.size=function(t){return arguments.length?(n=xn(t),e):n},e};var mu=o.map({circle:yu,cross:function(t){var n=Math.sqrt(t/5)/2;return"M"+-3*n+","+-n+"H"+-n+"V"+-3*n+"H"+n+"V"+-n+"H"+3*n+"V"+n+"H"+n+"V"+3*n+"H"+-n+"V"+n+"H"+-3*n+"Z"},diamond:function(t){var n=Math.sqrt(t/(2*Mu)),e=n*Mu;return"M0,"+-n+"L"+e+",0 0,"+n+" "+-e+",0Z"},square:function(t){var n=Math.sqrt(t)/2;return"M"+-n+","+-n+"L"+n+","+-n+" "+n+","+n+" "+-n+","+n+"Z"},"triangle-down":function(t){var n=Math.sqrt(t/xu),e=n*xu/2;return"M0,"+e+"L"+n+","+-e+" "+-n+","+-e+"Z"},"triangle-up":function(t){var n=Math.sqrt(t/xu),e=n*xu/2;return"M0,"+-e+"L"+n+","+e+" "+-n+","+e+"Z"}});o.svg.symbolTypes=mu.keys();var xu=Math.sqrt(3),Mu=Math.tan(30*Pt);J.transition=function(t){for(var n,e,r=ku||++Eu,i=zu(t),o=[],a=Su||{time:Date.now(),ease:po,delay:0,duration:250},u=-1,l=this.length;++u<l;){o.push(n=[]);for(var c=this[u],s=-1,f=c.length;++s<f;)(e=c[s])&&Tu(e,s,i,r,a),n.push(e)}return _u(o,i,r)},J.interrupt=function(t){return this.each(null==t?bu:wu(zu(t)))};var bu=wu(zu());function wu(t){return function(){var n,e,r;(n=this[t])&&(r=n[e=n.active])&&(r.timer.c=null,r.timer.t=NaN,--n.count?delete n[e]:delete this[t],n.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function _u(t,n,e){return Z(t,Nu),t.namespace=n,t.id=e,t}var ku,Su,Nu=[],Eu=0;function Au(t,n,e,r){var i=t.id,o=t.namespace;return gt(t,"function"==typeof e?function(t,a,u){t[o][i].tween.set(n,r(e.call(t,t.__data__,a,u)))}:(e=r(e),function(t){t[o][i].tween.set(n,e)}))}function Cu(t){return null==t&&(t=""),function(){this.textContent=t}}function zu(t){return null==t?"__transition__":"__transition_"+t+"__"}function Tu(t,n,e,r,i){var o,a,u,l,c,s=t[e]||(t[e]={active:0,count:0}),f=s[r];function h(e){var i=s.active,h=s[i];for(var g in h&&(h.timer.c=null,h.timer.t=NaN,--s.count,delete s[i],h.event&&h.event.interrupt.call(t,t.__data__,h.index)),s)if(+g<r){var d=s[g];d.timer.c=null,d.timer.t=NaN,--s.count,delete s[g]}a.c=p,En((function(){return a.c&&p(e||1)&&(a.c=null,a.t=NaN),1}),0,o),s.active=r,f.event&&f.event.start.call(t,t.__data__,n),c=[],f.tween.forEach((function(e,r){(r=r.call(t,t.__data__,n))&&c.push(r)})),l=f.ease,u=f.duration}function p(i){for(var o=i/u,a=l(o),h=c.length;h>0;)c[--h].call(t,a);if(o>=1)return f.event&&f.event.end.call(t,t.__data__,n),--s.count?delete s[r]:delete t[e],1}f||(o=i.time,a=En((function(t){var n=f.delay;if(a.t=n+o,n<=t)return h(t-n);a.c=h}),0,o),f=s[r]={tween:new S,time:o,timer:a,delay:i.delay,duration:i.duration,ease:i.ease,index:n},i=null,++s.count)}Nu.call=J.call,Nu.empty=J.empty,Nu.node=J.node,Nu.size=J.size,o.transition=function(t,n){return t&&t.transition?ku?t.transition(n):t:o.selection().transition(t)},o.transition.prototype=Nu,Nu.select=function(t){var n,e,r,i=this.id,o=this.namespace,a=[];t=Q(t);for(var u=-1,l=this.length;++u<l;){a.push(n=[]);for(var c=this[u],s=-1,f=c.length;++s<f;)(r=c[s])&&(e=t.call(r,r.__data__,s,u))?("__data__"in r&&(e.__data__=r.__data__),Tu(e,s,o,i,r[o][i]),n.push(e)):n.push(null)}return _u(a,o,i)},Nu.selectAll=function(t){var n,e,r,i,o,a=this.id,u=this.namespace,l=[];t=G(t);for(var c=-1,s=this.length;++c<s;)for(var f=this[c],h=-1,p=f.length;++h<p;)if(r=f[h]){o=r[u][a],e=t.call(r,r.__data__,h,c),l.push(n=[]);for(var g=-1,d=e.length;++g<d;)(i=e[g])&&Tu(i,g,u,a,o),n.push(i)}return _u(l,u,a)},Nu.filter=function(t){var n,e,r=[];"function"!=typeof t&&(t=ht(t));for(var i=0,o=this.length;i<o;i++){r.push(n=[]);for(var a,u=0,l=(a=this[i]).length;u<l;u++)(e=a[u])&&t.call(e,e.__data__,u,i)&&n.push(e)}return _u(r,this.namespace,this.id)},Nu.tween=function(t,n){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(t):gt(this,null==n?function(n){n[r][e].tween.remove(t)}:function(i){i[r][e].tween.set(t,n)})},Nu.attr=function(t,n){if(arguments.length<2){for(n in t)this.attr(n,t[n]);return this}var e="transform"==t?So:ro,r=o.ns.qualify(t);function i(){this.removeAttribute(r)}function a(){this.removeAttributeNS(r.space,r.local)}function u(t){return null==t?i:(t+="",function(){var n,i=this.getAttribute(r);return i!==t&&(n=e(i,t),function(t){this.setAttribute(r,n(t))})})}function l(t){return null==t?a:(t+="",function(){var n,i=this.getAttributeNS(r.space,r.local);return i!==t&&(n=e(i,t),function(t){this.setAttributeNS(r.space,r.local,n(t))})})}return Au(this,"attr."+t,n,r.local?l:u)},Nu.attrTween=function(t,n){var e=o.ns.qualify(t);return this.tween("attr."+t,e.local?function(t,r){var i=n.call(this,t,r,this.getAttributeNS(e.space,e.local));return i&&function(t){this.setAttributeNS(e.space,e.local,i(t))}}:function(t,r){var i=n.call(this,t,r,this.getAttribute(e));return i&&function(t){this.setAttribute(e,i(t))}})},Nu.style=function(t,n,e){var r=arguments.length;if(r<3){if("string"!=typeof t){for(e in r<2&&(n=""),t)this.style(e,t[e],n);return this}e=""}function i(){this.style.removeProperty(t)}function o(n){return null==n?i:(n+="",function(){var r,i=s(this).getComputedStyle(this,null).getPropertyValue(t);return i!==n&&(r=ro(i,n),function(n){this.style.setProperty(t,r(n),e)})})}return Au(this,"style."+t,n,o)},Nu.styleTween=function(t,n,e){function r(r,i){var o=n.call(this,r,i,s(this).getComputedStyle(this,null).getPropertyValue(t));return o&&function(n){this.style.setProperty(t,o(n),e)}}return arguments.length<3&&(e=""),this.tween("style."+t,r)},Nu.text=function(t){return Au(this,"text",t,Cu)},Nu.remove=function(){var t=this.namespace;return this.each("end.transition",(function(){var n;this[t].count<2&&(n=this.parentNode)&&n.removeChild(this)}))},Nu.ease=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].ease:("function"!=typeof t&&(t=o.ease.apply(o,arguments)),gt(this,(function(r){r[e][n].ease=t})))},Nu.delay=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].delay:gt(this,"function"==typeof t?function(r,i,o){r[e][n].delay=+t.call(r,r.__data__,i,o)}:(t=+t,function(r){r[e][n].delay=t}))},Nu.duration=function(t){var n=this.id,e=this.namespace;return arguments.length<1?this.node()[e][n].duration:gt(this,"function"==typeof t?function(r,i,o){r[e][n].duration=Math.max(1,t.call(r,r.__data__,i,o))}:(t=Math.max(1,t),function(r){r[e][n].duration=t}))},Nu.each=function(t,n){var e=this.id,r=this.namespace;if(arguments.length<2){var i=Su,a=ku;try{ku=e,gt(this,(function(n,i,o){Su=n[r][e],t.call(n,n.__data__,i,o)}))}finally{Su=i,ku=a}}else gt(this,(function(i){var a=i[r][e];(a.event||(a.event=o.dispatch("start","end","interrupt"))).on(t,n)}));return this},Nu.transition=function(){for(var t,n,e,r=this.id,i=++Eu,o=this.namespace,a=[],u=0,l=this.length;u<l;u++){a.push(t=[]);for(var c,s=0,f=(c=this[u]).length;s<f;s++)(n=c[s])&&Tu(n,s,o,i,{time:(e=n[o][r]).time,ease:e.ease,delay:e.delay+e.duration,duration:e.duration}),t.push(n)}return _u(a,o,i)},o.svg.axis=function(){var t,n=o.scale.linear(),e=Lu,r=6,i=6,a=3,l=[10],c=null;function s(u){u.each((function(){var u,s=o.select(this),f=this.__chart__||n,h=this.__chart__=n.copy(),p=null==c?h.ticks?h.ticks.apply(h,l):h.domain():c,g=null==t?h.tickFormat?h.tickFormat.apply(h,l):P:t,d=s.selectAll(".tick").data(p,h),v=d.enter().insert("g",".domain").attr("class","tick").style("opacity",At),y=o.transition(d.exit()).style("opacity",At).remove(),m=o.transition(d.order()).style("opacity",1),x=Math.max(r,0)+a,M=Ma(h),b=s.selectAll(".domain").data([0]),w=(b.enter().append("path").attr("class","domain"),o.transition(b));v.append("line"),v.append("text");var _,k,S,N,E=v.select("line"),A=m.select("line"),C=d.select("text").text(g),z=v.select("text"),T=m.select("text"),L="top"===e||"left"===e?-1:1;if("bottom"===e||"top"===e?(u=Pu,_="x",S="y",k="x2",N="y2",C.attr("dy",L<0?"0em":".71em").style("text-anchor","middle"),w.attr("d","M"+M[0]+","+L*i+"V0H"+M[1]+"V"+L*i)):(u=ju,_="y",S="x",k="y2",N="x2",C.attr("dy",".32em").style("text-anchor",L<0?"end":"start"),w.attr("d","M"+L*i+","+M[0]+"H0V"+M[1]+"H"+L*i)),E.attr(N,L*r),z.attr(S,L*x),A.attr(k,0).attr(N,L*r),T.attr(_,0).attr(S,L*x),h.rangeBand){var q=h,j=q.rangeBand()/2;f=h=function(t){return q(t)+j}}else f.rangeBand?f=h:y.call(u,h,f);v.call(u,f,h),m.call(u,h,h)}))}return s.scale=function(t){return arguments.length?(n=t,s):n},s.orient=function(t){return arguments.length?(e=t in qu?t+"":Lu,s):e},s.ticks=function(){return arguments.length?(l=u(arguments),s):l},s.tickValues=function(t){return arguments.length?(c=t,s):c},s.tickFormat=function(n){return arguments.length?(t=n,s):t},s.tickSize=function(t){var n=arguments.length;return n?(r=+t,i=+arguments[n-1],s):r},s.innerTickSize=function(t){return arguments.length?(r=+t,s):r},s.outerTickSize=function(t){return arguments.length?(i=+t,s):i},s.tickPadding=function(t){return arguments.length?(a=+t,s):a},s.tickSubdivide=function(){return arguments.length&&s},s};var Lu="bottom",qu={top:1,right:1,bottom:1,left:1};function Pu(t,n,e){t.attr("transform",(function(t){var r=n(t);return"translate("+(isFinite(r)?r:e(t))+",0)"}))}function ju(t,n,e){t.attr("transform",(function(t){var r=n(t);return"translate(0,"+(isFinite(r)?r:e(t))+")"}))}o.svg.brush=function(){var t,n,e=Y(h,"brushstart","brush","brushend"),r=null,i=null,a=[0,0],u=[0,0],l=!0,c=!0,f=Ru[0];function h(t){t.each((function(){var t=o.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",v).on("touchstart.brush",v),n=t.selectAll(".background").data([0]);n.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var e=t.selectAll(".resize").data(f,P);e.exit().remove(),e.enter().append("g").attr("class",(function(t){return"resize "+t})).style("cursor",(function(t){return Du[t]})).append("rect").attr("x",(function(t){return/[ew]$/.test(t)?-3:null})).attr("y",(function(t){return/^[ns]/.test(t)?-3:null})).attr("width",6).attr("height",6).style("visibility","hidden"),e.style("display",h.empty()?"none":null);var a,u=o.transition(t),l=o.transition(n);r&&(a=Ma(r),l.attr("x",a[0]).attr("width",a[1]-a[0]),g(u)),i&&(a=Ma(i),l.attr("y",a[0]).attr("height",a[1]-a[0]),d(u)),p(u)}))}function p(t){t.selectAll(".resize").attr("transform",(function(t){return"translate("+a[+/e$/.test(t)]+","+u[+/^s/.test(t)]+")"}))}function g(t){t.select(".extent").attr("x",a[0]),t.selectAll(".extent,.n>rect,.s>rect").attr("width",a[1]-a[0])}function d(t){t.select(".extent").attr("y",u[0]),t.selectAll(".extent,.e>rect,.w>rect").attr("height",u[1]-u[0])}function v(){var f,v,y=this,m=o.select(o.event.target),x=e.of(y,arguments),M=o.select(y),b=m.datum(),w=!/^(n|s)$/.test(b)&&r,_=!/^(e|w)$/.test(b)&&i,k=m.classed("extent"),S=kt(y),N=o.mouse(y),E=o.select(s(y)).on("keydown.brush",z).on("keyup.brush",T);if(o.event.changedTouches?E.on("touchmove.brush",L).on("touchend.brush",P):E.on("mousemove.brush",L).on("mouseup.brush",P),M.interrupt().selectAll("*").interrupt(),k)N[0]=a[0]-N[0],N[1]=u[0]-N[1];else if(b){var A=+/w$/.test(b),C=+/^n/.test(b);v=[a[1-A]-N[0],u[1-C]-N[1]],N[0]=a[A],N[1]=u[C]}else o.event.altKey&&(f=N.slice());function z(){32==o.event.keyCode&&(k||(f=null,N[0]-=a[1],N[1]-=u[1],k=2),F())}function T(){32==o.event.keyCode&&2==k&&(N[0]+=a[1],N[1]+=u[1],k=0,F())}function L(){var t=o.mouse(y),n=!1;v&&(t[0]+=v[0],t[1]+=v[1]),k||(o.event.altKey?(f||(f=[(a[0]+a[1])/2,(u[0]+u[1])/2]),N[0]=a[+(t[0]<f[0])],N[1]=u[+(t[1]<f[1])]):f=null),w&&q(t,r,0)&&(g(M),n=!0),_&&q(t,i,1)&&(d(M),n=!0),n&&(p(M),x({type:"brush",mode:k?"move":"resize"}))}function q(e,r,i){var o,s,h=Ma(r),p=h[0],g=h[1],d=N[i],v=i?u:a,y=v[1]-v[0];if(k&&(p-=d,g-=y+d),o=(i?c:l)?Math.max(p,Math.min(g,e[i])):e[i],k?s=(o+=d)+y:(f&&(d=Math.max(p,Math.min(g,2*f[i]-o))),d<o?(s=o,o=d):s=d),v[0]!=o||v[1]!=s)return i?n=null:t=null,v[0]=o,v[1]=s,!0}function P(){L(),M.style("pointer-events","all").selectAll(".resize").style("display",h.empty()?"none":null),o.select("body").style("cursor",null),E.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),S(),x({type:"brushend"})}M.style("pointer-events","none").selectAll(".resize").style("display",null),o.select("body").style("cursor",m.style("cursor")),x({type:"brushstart"}),L()}return h.event=function(r){r.each((function(){var r=e.of(this,arguments),i={x:a,y:u,i:t,j:n},l=this.__chart__||i;this.__chart__=i,ku?o.select(this).transition().each("start.brush",(function(){t=l.i,n=l.j,a=l.x,u=l.y,r({type:"brushstart"})})).tween("brush:brush",(function(){var e=io(a,i.x),o=io(u,i.y);return t=n=null,function(t){a=i.x=e(t),u=i.y=o(t),r({type:"brush",mode:"resize"})}})).each("end.brush",(function(){t=i.i,n=i.j,r({type:"brush",mode:"resize"}),r({type:"brushend"})})):(r({type:"brushstart"}),r({type:"brush",mode:"resize"}),r({type:"brushend"}))}))},h.x=function(t){return arguments.length?(f=Ru[!(r=t)<<1|!i],h):r},h.y=function(t){return arguments.length?(f=Ru[!r<<1|!(i=t)],h):i},h.clamp=function(t){return arguments.length?(r&&i?(l=!!t[0],c=!!t[1]):r?l=!!t:i&&(c=!!t),h):r&&i?[l,c]:r?l:i?c:null},h.extent=function(e){var o,l,c,s,f;return arguments.length?(r&&(o=e[0],l=e[1],i&&(o=o[0],l=l[0]),t=[o,l],r.invert&&(o=r(o),l=r(l)),l<o&&(f=o,o=l,l=f),o==a[0]&&l==a[1]||(a=[o,l])),i&&(c=e[0],s=e[1],r&&(c=c[1],s=s[1]),n=[c,s],i.invert&&(c=i(c),s=i(s)),s<c&&(f=c,c=s,s=f),c==u[0]&&s==u[1]||(u=[c,s])),h):(r&&(t?(o=t[0],l=t[1]):(o=a[0],l=a[1],r.invert&&(o=r.invert(o),l=r.invert(l)),l<o&&(f=o,o=l,l=f))),i&&(n?(c=n[0],s=n[1]):(c=u[0],s=u[1],i.invert&&(c=i.invert(c),s=i.invert(s)),s<c&&(f=c,c=s,s=f))),r&&i?[[o,c],[l,s]]:r?[o,l]:i&&[c,s])},h.clear=function(){return h.empty()||(a=[0,0],u=[0,0],t=n=null),h},h.empty=function(){return!!r&&a[0]==a[1]||!!i&&u[0]==u[1]},o.rebind(h,e,"on")};var Du={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Ru=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Iu=Rn.format=he.timeFormat,Ou=Iu.utc,Uu=Ou("%Y-%m-%dT%H:%M:%S.%LZ");function Fu(t){return t.toISOString()}function Hu(t,n,e){function r(n){return t(n)}function i(t,e){var r=(t[1]-t[0])/e,i=o.bisect(Vu,r);return i==Vu.length?[n.year,Aa(t.map((function(t){return t/31536e6})),e)[2]]:i?n[r/Vu[i-1]<Vu[i]/r?i-1:i]:[Xu,Aa(t,e)[2]]}return r.invert=function(n){return Yu(t.invert(n))},r.domain=function(n){return arguments.length?(t.domain(n),r):t.domain().map(Yu)},r.nice=function(t,n){var e=r.domain(),o=xa(e),a=null==t?i(o,10):"number"==typeof t&&i(o,t);function u(e){return!isNaN(e)&&!t.range(e,Yu(+e+1),n).length}return a&&(t=a[0],n=a[1]),r.domain(wa(e,n>1?{floor:function(n){for(;u(n=t.floor(n));)n=Yu(n-1);return n},ceil:function(n){for(;u(n=t.ceil(n));)n=Yu(+n+1);return n}}:t))},r.ticks=function(t,n){var e=xa(r.domain()),o=null==t?i(e,10):"number"==typeof t?i(e,t):!t.range&&[{range:t},n];return o&&(t=o[0],n=o[1]),t.range(e[0],Yu(+e[1]+1),n<1?1:n)},r.tickFormat=function(){return e},r.copy=function(){return Hu(t.copy(),n,e)},Na(r,t)}function Yu(t){return new Date(t)}Iu.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?Fu:Uu,Fu.parse=function(t){var n=new Date(t);return isNaN(n)?null:n},Fu.toString=Uu.toString,Rn.second=Fn((function(t){return new In(1e3*Math.floor(t/1e3))}),(function(t,n){t.setTime(t.getTime()+1e3*Math.floor(n))}),(function(t){return t.getSeconds()})),Rn.seconds=Rn.second.range,Rn.seconds.utc=Rn.second.utc.range,Rn.minute=Fn((function(t){return new In(6e4*Math.floor(t/6e4))}),(function(t,n){t.setTime(t.getTime()+6e4*Math.floor(n))}),(function(t){return t.getMinutes()})),Rn.minutes=Rn.minute.range,Rn.minutes.utc=Rn.minute.utc.range,Rn.hour=Fn((function(t){var n=t.getTimezoneOffset()/60;return new In(36e5*(Math.floor(t/36e5-n)+n))}),(function(t,n){t.setTime(t.getTime()+36e5*Math.floor(n))}),(function(t){return t.getHours()})),Rn.hours=Rn.hour.range,Rn.hours.utc=Rn.hour.utc.range,Rn.month=Fn((function(t){return(t=Rn.day(t)).setDate(1),t}),(function(t,n){t.setMonth(t.getMonth()+n)}),(function(t){return t.getMonth()})),Rn.months=Rn.month.range,Rn.months.utc=Rn.month.utc.range;var Vu=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Zu=[[Rn.second,1],[Rn.second,5],[Rn.second,15],[Rn.second,30],[Rn.minute,1],[Rn.minute,5],[Rn.minute,15],[Rn.minute,30],[Rn.hour,1],[Rn.hour,3],[Rn.hour,6],[Rn.hour,12],[Rn.day,1],[Rn.day,2],[Rn.week,1],[Rn.month,1],[Rn.month,3],[Rn.year,1]],Bu=Iu.multi([[".%L",function(t){return t.getMilliseconds()}],[":%S",function(t){return t.getSeconds()}],["%I:%M",function(t){return t.getMinutes()}],["%I %p",function(t){return t.getHours()}],["%a %d",function(t){return t.getDay()&&1!=t.getDate()}],["%b %d",function(t){return 1!=t.getDate()}],["%B",function(t){return t.getMonth()}],["%Y",Qe]]),Xu={range:function(t,n,e){return o.range(Math.ceil(t/e)*e,+n,e).map(Yu)},floor:P,ceil:P};Zu.year=Rn.year,Rn.scale=function(){return Hu(o.scale.linear(),Zu,Bu)};var $u=Zu.map((function(t){return[t[0].utc,t[1]]})),Wu=Ou.multi([[".%L",function(t){return t.getUTCMilliseconds()}],[":%S",function(t){return t.getUTCSeconds()}],["%I:%M",function(t){return t.getUTCMinutes()}],["%I %p",function(t){return t.getUTCHours()}],["%a %d",function(t){return t.getUTCDay()&&1!=t.getUTCDate()}],["%b %d",function(t){return 1!=t.getUTCDate()}],["%B",function(t){return t.getUTCMonth()}],["%Y",Qe]]);function Ju(t){return JSON.parse(t.responseText)}function Qu(t){var n=l.createRange();return n.selectNode(l.body),n.createContextualFragment(t.responseText)}$u.year=Rn.year.utc,Rn.scale.utc=function(){return Hu(o.scale.linear(),$u,Wu)},o.text=Mn((function(t){return t.responseText})),o.json=function(t,n){return bn(t,"application/json",Ju,n)},o.html=function(t,n){return bn(t,"text/html",Qu,n)},o.xml=Mn((function(t){return t.responseXML})),this.d3=o,void 0===(i="function"==typeof(r=o)?r.call(n,e,n,t):r)||(t.exports=i)}()},function(n,e){n.exports=t}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,